{"version":3,"sources":["webpack:///static/js/8.20b8a774486d94b58cb9.js","webpack:///./~/jssorslider/js/jssor.component.js"],"names":["webpackJsonp","144","module","exports","$JssorObject$","AddListener","eventName","handler","$JssorDebug$","$Execute","undefined","Error","$Jssor$","$Each","_Listeners","listener","$EventName","$Handler","push","RemoveListener","index","splice","ClearListeners","ClearListenees","_Listenees","listenee","$RemoveEvent","$Obj","_ThisObject","this","$Listen","obj","useCapture","$AddEvent","$Unlisten","$UnlistenAll","$On","addEventListener","$Off","removeEventListener","$TriggerEvent","args","slice","call","arguments","apply","window","$Destroy","name","$C_AbstractClass","$JssorAnimator$","delay","duration","options","elmt","fromStyles","difStyles","Shift","offset","_Position_OuterBegin","_Position_OuterEnd","_Position_InnerBegin","_Position_InnerEnd","_Position_Current","_Position_Display","_Shift","Locate","position","relative","GoToPosition","positionOuter","force","trimedPositionOuter","_LoopLength","_Hooked","_NoStop","positionToDisplay","Math","min","max","interPosition","$Reverse","currentStyles","$Cast","_SubEasings","_SubDurings","_SubRounds","value","key","_StyleSetter","_ThisAnimator","$OnInnerOffsetChange","_NestedAnimators","animator","i","length","$GoToPosition","positionOld","positionNew","$OnPositionChange","Join","combineMode","noExpand","$Fail","$Locate","$GetPosition_OuterBegin","$GetPosition_OuterEnd","ShowFrame","_AutoPlay","now","$GetNow","timeOffset","_TimeStampLastFrame","$IntervalMax","timePosition","_PlayDirection","_PlayToPosition","Stop","_Callback","RequestAnimationFrame","PlayToPosition","toPosition","callback","noStop","$OnStart","$OnStop","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","$IsBrowserSafari","$BrowserVersion","$Delay","$Interval","$Play","positionLength","$PlayToPosition","$PlayToBegin","$PlayToEnd","$Stop","$Continue","$GetPosition","$GetPlayToPosition","$GetPosition_Display","$GoToBegin","$GoToEnd","$Move","$CombineMode","$GetDuration","$IsPlaying","$IsOnTheWay","$SetLoopLength","$Shift","$Join","$Combine","$Chain","$GetPosition_InnerBegin","$GetPosition_InnerEnd","$EmptyFunction","$Version","$Extend","$LoopLength","$Setter","$Easing","$StyleSetter","$Round","$During","$Default","$IsFunction","$JssorEasing$","$EaseSwing","$JssorCaptionSliderBase$","$Revert","C_AbstractClass","instance","constructor","caller","$DebugMode","$Log","msg","important","console","debug","log","alert","$Error","e","error","$Assert","$Trace","func","$LiveStamp","id","stamp","document","createElement","setAttribute","$Live","$C_AbstractProperty","$C_AbstractMethod","t","cos","PI","$EaseLinear","$EaseInQuad","$EaseOutQuad","$EaseInOutQuad","$EaseInCubic","$EaseOutCubic","$EaseInOutCubic","$EaseInQuart","$EaseOutQuart","$EaseInOutQuart","$EaseInQuint","$EaseOutQuint","$EaseInOutQuint","$EaseInSine","$EaseOutSine","sin","$EaseInOutSine","$EaseInExpo","pow","$EaseOutExpo","$EaseInOutExpo","$EaseInCirc","sqrt","$EaseOutCirc","$EaseInOutCirc","$EaseInElastic","$EaseOutElastic","$EaseInOutElastic","$EaseInBack","s","$EaseOutBack","$EaseInOutBack","$EaseInBounce","$EaseOutBounce","$EaseInOutBounce","$EaseGoBack","abs","$EaseInWave","$EaseOutWave","$EaseOutJump","$EaseInJump","$JssorDirection$","$TO_LEFT","$TO_RIGHT","$TO_TOP","$TO_BOTTOM","$HORIZONTAL","$VERTICAL","$GetDirectionHorizontal","direction","$GetDirectionVertical","$IsHorizontal","$IsVertical","Device","_Device","$Touchable","msPrefix","_Navigator","pointerEnabled","msPointerEnabled","$TouchActionAttr","DetectBrowser","browser","_Browser","_AppName","attachEvent","ActiveXObject","ieOffset","_UserAgent","indexOf","BROWSER_IE","_BrowserEngineVersion","ParseFloat","substring","_BrowserRuntimeVersion","documentMode","ffOffset","saOffset","chOffset","webkitOffset","BROWSER_FIREFOX","slash","lastIndexOf","BROWSER_CHROME","BROWSER_SAFARI","match","exec","_WebkitVersion","BROWSER_OPERA","IsBrowserIE","IsBrowserIeQuirks","compatMode","IsBrowserFireFox","IsBrowserSafari","IsBrowserChrome","IsBrowserOpera","IsBrowserBadTransform","IsBrowserIe9Earlier","GetTransformProperty","_TransformProperty","Each","property","style","toString","GetClass2Type","_Class2type","toLowerCase","Type","String","IsNotEmpty","IsPlainObject","nodeType","hasOwnProperty","prototype","Point","x","y","Delay","code","setTimeout","BuildNewCss","oldCss","removeRegs","replaceValue","css","removeReg","m","header","substr","tailer","lastIndex","SetStyleFilterIE","filter","SetStyleMatrixIE","matrix","_BrowserJavascriptVersion","RegExp","_This","$CssMarginTop","$CssMarginLeft","Construct","$Construct","GetEvent","event","Css","currentStyle","getComputedStyle","ownerDocument","defaultView","getPropertyValue","CssN","isDimensional","CssP","CssProxy","numericOrDimension","cssAccessor","GetStyleOpacity","opacity","SetStyleOpacity","ie9EarlierForce","finalFilter","alphaReg","ieOpacity","round","alphaFilter","SetStyleTransformInternal","transform","rotate","$Rotate","scale","$Scale","$CreateMatrix","$GetMatrixOffset","$OriginalWidth","$OriginalHeight","transformProperty","transformValue","FindChild","attrValue","noDeep","attrName","firstChild","nextSibling","AttributeEx","childRet","FindChildren","ret","concat","FindChildByTag","tagName","FindChildrenByTag","Extend","target","propName","propValue","deep","Unextend","option","targetProp","optionProp","unextended","exclude","CreateElement","Attribute","getAttribute","ClassName","className","ToHash","array","hash","item","Split","str","separator","REGEX_WHITESPACE_GLOBAL","StringToHashObject","regExp","strings","joined","ReplaceClass","oldClassName","newClassName","CloneNode","keepId","clone","cloneNode","$RemoveAttribute","JssorButtonEx","Highlight","_ToggleClassName","_ToggleClasses","_IsDisabled","_IsMouseDown","_IsSelected","$Css","MouseUpOrCancelEventHandler","MouseDownEventHandler","$CancelEvent","_Self","_OriginClassName","_ToggleClassSuffixes","$Selected","activate","$Enable","enable","$GetElement","originalClassNameArray","$Split","shift","toggleClassSuffix","unshift","StyleSetter","_StyleSetterReserved","$MarginTop","$MarginLeft","$Clip","$SetStyleClip","$Transform","$SetStyleTransform","_StyleGetter","StyleSetterEx","navigator","appName","appVersion","userAgent","_DocElmt","documentElement","$Device","$IsBrowserIE","$IsBrowserIeQuirks","$IsBrowserFireFox","$IsBrowserChrome","$IsBrowserOpera","$IsBrowserBadTransform","$IsBrowserIe9Earlier","$BrowserEngineVersion","$WebKitVersion","$Inherit","baseClass","$IsString","getElementById","$GetEvent","$EvtSrc","srcElement","$EvtTarget","relatedTarget","toElement","$EvtWhich","which","button","charCode","keyCode","$MousePosition","pageX","clientX","pageY","clientY","$PageScroll","body","pageXOffset","scrollLeft","clientLeft","pageYOffset","scrollTop","clientTop","$WindowSize","clientWidth","clientHeight","$CreateCallback","$SetStyleTransformOrigin","transformOrigin","$CssScale","zoom","oldTransformValue","scaleReg","newTransformValue","$EnableHWA","$DisableHWA","ie8OffsetWidth","ie8OffsetHeight","$WindowResizeFilter","trigger","checkElement","widthChange","offsetWidth","heightChange","offsetHeight","$MouseOverOutFilter","type","related","fromElement","$IsChild","setCapture","detachEvent","releaseCapture","$FireEvent","createEvent","createEventObject","dispatchEvent","fireEvent","evento","initEvent","ieEventName","preventDefault","cancel","returnValue","$StopEvent","stopPropagation","cancelBubble","object","method","initialArgs","$InnerText","text","textContent","innerText","textNode","createTextNode","$Empty","appendChild","$InnerHtml","html","innerHTML","$GetClientRect","rect","getBoundingClientRect","left","top","w","right","h","bottom","$ClearInnerHtml","$EncodeHtml","div","$CreateDiv","$DecodeHtml","$SelectElement","userSelection","getSelection","theRange","createRange","selectNode","createTextRange","moveToElementText","select","addRange","$DeselectElements","selection","empty","removeAllRanges","$Children","includeAll","children","tmpEl","$FindChild","$FindChildren","$FindChildByTag","$FindChildrenByTag","$GetElementsByTag","getElementsByTagName","$Unextend","$IsArray","$IsNumeric","isNaN","isFinite","$Type","$IsNotEmpty","$IsPlainObject","$CreateElement","$CreateSpan","$Attribute","$AttributeEx","$ClassName","$ToHash","$AddClass","$RemoveClass","$ReplaceClass","$ParentNode","parentNode","$HideElement","$CssDisplay","$EnableElement","notEnable","$HideElements","elmts","$ShowElement","hide","$ShowElements","attrbuteName","removeAttribute","$CanClearClip","clip","$Top","$Right","$Bottom","$Left","cssText","clipRegs","newCssText","$CssCssText","Date","getTime","$AppendChild","child","$AppendChildren","$InsertBefore","newNode","refNode","pNode","insertBefore","$InsertAfter","$InsertAdjacentHtml","where","insertAdjacentHTML","$RemoveElement","removeChild","$RemoveElements","$ParseInt","radix","parseInt","parseFloat","$ParseFloat","elmtA","elmtB","$CloneNode","$LoadImage","src","LoadImageCompleteHandler","abort","image","ErrorOrAbortHandler","Image","$LoadImages","imageElmts","mainImageElmt","LoadImageCompleteEventHandler","_ImageLoading","imageElmt","$BuildElement","template","replacer","createCopy","templateHolders","j","templateHolder","replaceItem","$Buttonize","$CssN","$CssP","$CssOverflow","$CssTop","$CssLeft","$CssWidth","$CssHeight","$CssPosition","$CssZIndex","$CssFloat","floatValue","$CssOpacity","$Opacity","$Width","$Height","$Position","$Display","$ZIndex","$StyleSetterEx","$GetStyles","originStyles","styles","$SetStyles","styleSetter","$SetStylesEx","$JssorMatrix$","Multiply","ma","mb","acs","rows","cols","r","row","c","unitValue","ac","_ThisMatrix","$ScaleX","sx","$ScaleXY","$ScaleY","sy","$TransformPoint","p","pMatrix","alpha","scaleX","scaleY","width","height","p1","p2","p3","p4","easings","durings","rounds","during","propertyInterPosition","floorPosition","floor","currentPropertyValue","easing","easingValue","difValue","$Offset","rectX","n","offsetValue","$Zoom","styleFrameNClipOffset","offsetY","offsetX","$JssorSlideshowFormations$","isToRight","roadValue","TO_RIGHT","isToTop","TO_TOP","PushFormationOrder","arr","order","formationItem","TO_LEFT","TO_BOTTOM","ASSEMBLY_BOTTOM_LEFT","ASSEMBLY_BOTTOM_RIGHT","ASSEMBLY_TOP_LEFT","ASSEMBLY_TOP_RIGHT","ASSEMBLY_LEFT_TOP","ASSEMBLY_LEFT_BOTTOM","ASSEMBLY_RIGHT_TOP","ASSEMBLY_RIGHT_BOTTOM","$FormationStraight","transition","$Cols","$Rows","formationDirection","$Assembly","count","$Count","a","col","cl","rl","il","$FormationSwirl","cr","courses","hit","course","$FormationZigZag","$FormationStraightStairs","C","R","$FormationSquare","dc","dr","$FormationRectangle","$FormationRandom","ceil","random","$FormationCircle","hc","hr","$FormationCross","$FormationRectangleCross","$JssorSlider$","$JssorSlideshowRunner$","slideContainer","slideContainerWidth","slideContainerHeight","slideshowOptions","isTouchDevice","EnsureTransitionInstance","slideshowInterval","slideshowTransition","$Duration","$SlideOut","$Formation","$ChessMode","$Column","$Row","$Blocks","$FramesCount","$GetBlocks","wh","$Brother","JssorSlideshowPlayer","slideElement","slideTransition","beginTime","_Block","_StyleStart","_StyleEnd","_StyleDif","_IsIn","_StartStylesArr","_AnimationStylesArrs","_AnimationBlockItems","_ChessModeColumn","_ChessModeRow","_Blocks","_FormationInstance","formationInstance","reverse","_MaxOrder","_Period","_EndTime","_SlideOut","$EndTime","$ShowFrame","time","isIn","frameIndex","itemFrameIndex","$Min","$LastFrameIndex","$Max","hasImage","slideChildElements","slideChildElement","formationItems","columnRow","chessHorizontal","chessVertical","chessRotate","topBenchmark","bottomBenchmark","leftBenchmark","rightBenchmark","allowClip","allowRotate","clipScale","$ScaleClip","blockOffset","chessHor","chessVer","propertyEnd","framesCount","virtualFrameCount","Array","frameN","styleFrameN","$AddClipElement","SlideshowProcessor","_SelfSlideshowProcessor","_CurrentTime","oldPosition","newPosition","_SlideshowPerformance","_SlideshowPlayerAbove","_SlideshowPlayerBelow","$Transition","_SlideshowTransition","_PrevItem","_SlideItem","_SelfSlideshowRunner","_TransitionIndex","_TransitionsOrder","$TransitionsOrder","$GetTransition","slideCount","transitions","$Transitions","transitionCount","$Index","$Initialize","slideIndex","prevIndex","slideItem","prevItem","prevSlideElement","$Item","currentSlideElement","$Image","slideElementAbove","slideElementBelow","slideTransitionAbove","slideTransitionBelow","$Clear","$GetProcessor","slideshowProcessor","Conveyor","_SelfConveyor","$GetCurrentSlideInfo","positionDisplay","virtualIndex","GetRealIndex","$VirtualIndex","ResetNavigator","_SelfSlider","$EVT_POSITION_CHANGE","Carousel","_SelfCarousel","_SlideCount","_SlideItems","_Loop","_ParkingPosition","_StepLength","Slideshow","_SelfSlideshow","_Wrapper","_SlideContainer","$Elmt","SetPosition","$Wrapper","CarouselPlayer","carousel","slideshow","_FromPosition","_ToPosition","_Duration","_StandBy","_StandByPosition","_SelfCarouselPlayer","_IsSliding","_LoadingTicket","$EVT_SWIPE_START","_Conveyor","currentSlideInfo","$EVT_SWIPE_END","OnPark","_CurrentSlideIndex","_Options","$SlideEasing","$PlayCarousel","fromPosition","$StandBy","standByPosition","$SetStandByPosition","$MoveCarouselTo","SlideContainer","CreatePanel","clipElement","SlideItem","slideElmt","ResetCaptionSlider","fresh","_CaptionSliderOut","_CaptionSliderIn","RefreshContent","_ContentRefreshed","_CaptionSliderOptions","$Class","_CaptionSliderCount","EnsureCaptionSliderVersion","completeCallback","loadingScreen","_ImageLoaded","_ImageItem","imageWidth","imageHeight","fillWidth","fillHeight","$FillMode","_SlideWidth","_SlideHeight","fitHeight","ratio","$EVT_LOAD_END","_SelfSlideItem","LoadSlideshowImageCompleteEventHandler","nextIndex","nextItem","loadingTicket","_Frozen","nextRealIndex","_SlideshowRunner","$HideContentForSlideshow","_Slideshow","_CarouselPlayer","SlideReadyEventHandler","_Processor","Processor","$GetCaptionSliderIn","$GetCaptionSliderOut","$SetPlayer","_PlayerInstance","$Replay","ParkEventHandler","currentIndex","previousIndex","manualActivate","$ParkOut","$AdjustIdleOnPark","distance","loadRange","_DisplayPieces","$LazyLoading","_ImageLazyLoading","SwipeStartEventHandler","$Quit","$Disable","$OpenSlideshowPanel","FreezeEventHandler","SlideClickEventHandler","_LastDragSucceded","$EVT_CLICK","PlayerAvailableEventHandler","_PlayerInstanceElement","pInstance","level","_ImageElmts","$HWA","_SlideshowEnabled","childElements","childElement","childTagName","uAttribute","captionElement","outerHTML","_LinkItemOrigin","_StyleDef","_LinkItem","border","_LoadingScreen","_SequenceNumber","$SlideItemAnimator","$EVT_LOAD_START","$GoForNextSlide","$AutoPlaySteps","_PlayReverse","PlayTo","$TryActivate","$UnhideContentForSlideshow","$Abort","$StampSlideItemElements","$EnablePlayer","oldOffset","newOffset","thumb","$Thumb","_LoadingContainer","$Link","_SlideItemCreatedCount","captionSliderIn","captionSliderOut","UpdateLink","_LinkContainer","_ShowLink","_IsSlideshowRunning","ProcessCompleteEventHandler","_IsRollingBack","$EVT_ROLLBACK_END","_IdleEnd","_ProgressBegin","_IdleBegin","_ProgressEnd","_SelfProcessor","PlayerSwitchEventHandler","isOnService","_IsPlayerOnService","_SlideshowEnd","currentPosition","_IsDragging","$EVT_SLIDESHOW_START","stateEvent","$EVT_STATE_CHANGE","$EVT_ROLLBACK_START","allowAutoPlay","_HoverToPause","_NotOnHover","open","_SlideshowPanel","$Outside","$EVT_SLIDESHOW_END","$EVT_PROGRESS_CHANGE","playerInstance","$JssorPlayer$","$EVT_SWITCH","_AutoPlayInterval","orientation","_DragOrientation","_PlayOrientation","_StepLengthX","_StepLengthY","RecordFreezePoint","_CarouselPlaying_OnFreeze","_PlayToPosition_OnFreeze","_Position_OnFreeze","Freeze","$EVT_FREEZE","Unfreeze","byDrag","_DragOffsetTotal","$MinDragOffsetToSlide","_DragIndexAdjust","_CurrentSlideItem","_SlideDuration","PreventDragSelectionEvent","OnTouchStart","OnDragStart","touch","eventSrc","_DragOrientationRegistered","RegisterDrag","touches","_DragInvalid","OnDragMove","_LastTimeMoveByDrag","touchPoint","_DragStartMouseX","_DragStartMouseY","mousePoint","_DragOffsetLastTime","$EVT_DRAG_START","actionPoint","distanceX","distanceY","_IsTouchDevice","stepLength","normalDistance","sqrtDistance","_PositionToGoByDrag","_ScaleRatio","OnDragEnd","UnregisterDrag","$EVT_DRAG_END","SlidesClickEventHandler","_SlidesContainer","SetCurrentSlideIndex","_PrevSlideItem","_PreviousSlideIndex","$EVT_PARK","temp","_TempSlideIndex","_Navigators","$SetCurrentIndex","dragRegistry","$DragRegistry","dragOrientation","_DragEnabled","NavigationClickHandler","toIndex","$GetVirtualIndex","$SlideDuration","ShowNavigators","$Show","$Options","$ChanceToShow","MainContainerMouseLeaveEventHandler","MainContainerMouseEnterEventHandler","PlayToOffset","slideDuration","_CarouselEnabled","$NaviQuitDrag","_Carousel","positionTo","positionOffset","OriginalWidth","_ScaleWrapper","OriginalHeight","Scale","dimension","isHeight","originalWidthStr","originalHeightStr","originalWidth","originalHeight","innerWrapper","_InitialScrollWidth","scrollWidth","scaleWidth","scaleHeight","$Relocate","$PlayTo","$GoTo","$Next","$Prev","$Pause","$SetSlideshowTransitions","$SlideshowOptions","$SetCaptionTransitions","$CaptionTransitions","$SlidesCount","_SlideElmts","$CurrentIndex","$IsAutoPlaying","$IsDragging","$IsSliding","$IsMouseOver","$LastDragSucceded","$GetOriginalWidth","$GetOriginalHeight","$ScaleHeight","$GetScaleHeight","$ScaleWidth","$SetScaleWidth","$GetScaleWidth","parkingIndex","displayIndex","$StartIndex","$AutoPlay","$Loop","$AutoPlayInterval","$PauseOnHover","$SlideSpacing","$DisplayPieces","$ParkingPosition","$UISearchMode","$PlayOrientation","$DragOrientation","$Idle","$ArrowKeyNavigation","$SlideWidth","$SlideHeight","$CaptionSliderOptions","$BulletNavigatorOptions","$ArrowNavigatorOptions","$ThumbnailNavigatorOptions","_SlideshowOptions","$PlayInMode","$PlayOutMode","_BulletNavigatorOptions","_ArrowNavigatorOptions","_ThumbnailNavigatorOptions","_UISearchNoDeep","_BulletNavigatorContainer","_ArrowLeft","_ArrowRight","_ThumbnailNavigatorContainer","_SlidesContainerWidth","_SlidesContainerHeight","slidesContainerOverflow","slidesContainerOverflowX","slidesContainerOverflowY","slideElmts","_BulletNavigator","_ArrowNavigator","_ThumbnailNavigator","_SlideshowRunnerClass","_SlideSpacing","$ShowLink","_SlideboardElmt","$Reset","$JssorNavigatorEvents$","$NAVIGATIONREQUEST","startPosition","$JssorSlideo$","$INDEXCHANGE","$RESET","$JssorBulletNavigator$","containerWidth","containerHeight","_Buttons","_CurrentInnerIndex","OnNavigationRequest","self","_Steps","_Count","_Length","_Width","_Height","_CurrentIndex","_Lanes","_SpacingX","_SpacingY","_Orientation","_ItemPrototype","_PrototypeWidth","_PrototypeHeight","_ButtonElements","$GetCurrentIndex","lastInnerIndex","innerIndex","_Located","$AutoCenter","_Initialized","itemOffsetX","itemOffsetY","maxIndex","buttonIndex","numberDiv","columnIndex","$ActionMode","$SpacingX","$SpacingY","$Orientation","$Steps","$Lanes","$JssorArrowNavigator$","arrowLeft","arrowRight","steps","ShowArrows","_Hide","_ArrowWidth","_ArrowHeight","conainerWidth","$JssorThumbnailNavigator$","NavigationItem","mouseStatus","_Button","byMouseOver","_Slider","_Thumbnail","$Highlight","_ThumbnailPrototype","_NavigationItems","oldIndex","items","loadingContainer","horizontal","slideWidth","slideHeight","slidesContainerWidth","slidesContainerHeight","slideItemElmts","navigationItem","navigationItemWrapper","laneIndex","thumbnailSliderOptions","$DisableDrag","$JssorCaptionSlider$","container","captionSlideOptions","playIn","GetCaptionItems","element","FetchRawTransition","captionElmt","rawTransition","_CaptionTuningFetcher","fetchAttribute","fetchProperty","attributeValue","propertyValue","$Value","$Percent","GetRandomTransition","_CaptionTransitions","EvaluateCaptionTransition","transitionName","tempTransition","lastTransitionName","namedTransitionOrders","namedTransitions","itemsToPlay","captionElmts","transitionsWithTuning","isCaption","k","transitionWithTuning","rawPropertyValue","propertyName","tuningPropertyValue","_CaptionTuningTransfer","$BeginTime","CreateAnimator","immediateOut","animatorOptions","$CaptionAnimator","captionItem","captionParent","captionItemWidth","captionItemHeight","captionParentWidth","captionParentHeight","scaleClip","fromStyleClip","toStyleClip","toLeft","toTop","CreateAnimators","streamLineLength","captionItems","transition3","animator3","_ImmediateOutCaptionHanger","_PlayMode","tuningValue"],"mappings":"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","file":"static/js/8.20b8a774486d94b58cb9.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 144:\n/***/ (function(module, exports) {\n\n/*\r\n* Jssor 19.0\r\n* http://www.jssor.com/\r\n*\r\n* Licensed under the MIT license:\r\n* http://www.opensource.org/licenses/MIT\r\n* \r\n* TERMS OF USE - Jssor\r\n* \r\n* Copyright 2014 Jssor\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining\r\n* a copy of this software and associated documentation files (the\r\n* \"Software\"), to deal in the Software without restriction, including\r\n* without limitation the rights to use, copy, modify, merge, publish,\r\n* distribute, sublicense, and/or sell copies of the Software, and to\r\n* permit persons to whom the Software is furnished to do so, subject to\r\n* the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n/*! Jssor */\r\n\r\n//$JssorDebug$\r\nvar $JssorDebug$ = new function () {\r\n\r\n    this.$DebugMode = true;\r\n\r\n    // Methods\r\n\r\n    this.$Log = function (msg, important) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.log) {\r\n            console.log(msg);\r\n        } else if (debug && important) {\r\n            alert(msg);\r\n        }\r\n    };\r\n\r\n    this.$Error = function (msg, e) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.error) {\r\n            console.error(msg);\r\n        } else if (debug) {\r\n            alert(msg);\r\n        }\r\n\r\n        if (debug) {\r\n            // since we're debugging, fail fast by crashing\r\n            throw e || new Error(msg);\r\n        }\r\n    };\r\n\r\n    this.$Fail = function (msg) {\r\n        throw new Error(msg);\r\n    };\r\n\r\n    this.$Assert = function (value, msg) {\r\n        var debug = this.$DebugMode;\r\n        if (debug) {\r\n            if (!value)\r\n                throw new Error(\"Assert failed \" + msg || \"\");\r\n        }\r\n    };\r\n\r\n    this.$Trace = function (msg) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.log) {\r\n            console.log(msg);\r\n        }\r\n    };\r\n\r\n    this.$Execute = function (func) {\r\n        var debug = this.$DebugMode;\r\n        if (debug)\r\n            func();\r\n    };\r\n\r\n    this.$LiveStamp = function (obj, id) {\r\n        var debug = this.$DebugMode;\r\n        if (debug) {\r\n            var stamp = document.createElement(\"DIV\");\r\n            stamp.setAttribute(\"id\", id);\r\n\r\n            obj.$Live = stamp;\r\n        }\r\n    };\r\n\r\n    this.$C_AbstractProperty = function () {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the property is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        throw new Error(\"The property is abstract, it should be implemented by subclass.\");\r\n    };\r\n\r\n    this.$C_AbstractMethod = function () {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the method is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        throw new Error(\"The method is abstract, it should be implemented by subclass.\");\r\n    };\r\n\r\n    function C_AbstractClass(instance) {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the class is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        if (instance.constructor === C_AbstractClass.caller)\r\n            throw new Error(\"Cannot create instance of an abstract class.\");\r\n    }\r\n\r\n    this.$C_AbstractClass = C_AbstractClass;\r\n};\r\n\r\n//$JssorEasing$\r\nvar $JssorEasing$ = window.$JssorEasing$ = {\r\n    $EaseSwing: function (t) {\r\n        return -Math.cos(t * Math.PI) / 2 + .5;\r\n    },\r\n    $EaseLinear: function (t) {\r\n        return t;\r\n    },\r\n    $EaseInQuad: function (t) {\r\n        return t * t;\r\n    },\r\n    $EaseOutQuad: function (t) {\r\n        return -t * (t - 2);\r\n    },\r\n    $EaseInOutQuad: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t : -1 / 2 * (--t * (t - 2) - 1);\r\n    },\r\n    $EaseInCubic: function (t) {\r\n        return t * t * t;\r\n    },\r\n    $EaseOutCubic: function (t) {\r\n        return (t -= 1) * t * t + 1;\r\n    },\r\n    $EaseInOutCubic: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t : 1 / 2 * ((t -= 2) * t * t + 2);\r\n    },\r\n    $EaseInQuart: function (t) {\r\n        return t * t * t * t;\r\n    },\r\n    $EaseOutQuart: function (t) {\r\n        return -((t -= 1) * t * t * t - 1);\r\n    },\r\n    $EaseInOutQuart: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t * t : -1 / 2 * ((t -= 2) * t * t * t - 2);\r\n    },\r\n    $EaseInQuint: function (t) {\r\n        return t * t * t * t * t;\r\n    },\r\n    $EaseOutQuint: function (t) {\r\n        return (t -= 1) * t * t * t * t + 1;\r\n    },\r\n    $EaseInOutQuint: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t * t * t : 1 / 2 * ((t -= 2) * t * t * t * t + 2);\r\n    },\r\n    $EaseInSine: function (t) {\r\n        return 1 - Math.cos(t * Math.PI / 2);\r\n    },\r\n    $EaseOutSine: function (t) {\r\n        return Math.sin(t * Math.PI / 2);\r\n    },\r\n    $EaseInOutSine: function (t) {\r\n        return -1 / 2 * (Math.cos(Math.PI * t) - 1);\r\n    },\r\n    $EaseInExpo: function (t) {\r\n        return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\r\n    },\r\n    $EaseOutExpo: function (t) {\r\n        return t == 1 ? 1 : -Math.pow(2, -10 * t) + 1;\r\n    },\r\n    $EaseInOutExpo: function (t) {\r\n        return t == 0 || t == 1 ? t : (t *= 2) < 1 ? 1 / 2 * Math.pow(2, 10 * (t - 1)) : 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\r\n    },\r\n    $EaseInCirc: function (t) {\r\n        return -(Math.sqrt(1 - t * t) - 1);\r\n    },\r\n    $EaseOutCirc: function (t) {\r\n        return Math.sqrt(1 - (t -= 1) * t);\r\n    },\r\n    $EaseInOutCirc: function (t) {\r\n        return (t *= 2) < 1 ? -1 / 2 * (Math.sqrt(1 - t * t) - 1) : 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\r\n    },\r\n    $EaseInElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .3, s = .075;\r\n        return -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p));\r\n    },\r\n    $EaseOutElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .3, s = .075;\r\n        return Math.pow(2, -10 * t) * Math.sin((t - s) * 2 * Math.PI / p) + 1;\r\n    },\r\n    $EaseInOutElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .45, s = .1125;\r\n        return (t *= 2) < 1 ? -.5 * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p) : Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p) * .5 + 1;\r\n    },\r\n    $EaseInBack: function (t) {\r\n        var s = 1.70158;\r\n        return t * t * ((s + 1) * t - s);\r\n    },\r\n    $EaseOutBack: function (t) {\r\n        var s = 1.70158;\r\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n    },\r\n    $EaseInOutBack: function (t) {\r\n        var s = 1.70158;\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * (((s *= 1.525) + 1) * t - s) : 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\r\n    },\r\n    $EaseInBounce: function (t) {\r\n        return 1 - $JssorEasing$.$EaseOutBounce(1 - t)\r\n    },\r\n    $EaseOutBounce: function (t) {\r\n        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\r\n    },\r\n    $EaseInOutBounce: function (t) {\r\n        return t < 1 / 2 ? $JssorEasing$.$EaseInBounce(t * 2) * .5 : $JssorEasing$.$EaseOutBounce(t * 2 - 1) * .5 + .5;\r\n    },\r\n    $EaseGoBack: function (t) {\r\n        return 1 - Math.abs((t *= 2) - 1);\r\n    },\r\n    $EaseInWave: function (t) {\r\n        return 1 - Math.cos(t * Math.PI * 2)\r\n    },\r\n    $EaseOutWave: function (t) {\r\n        return Math.sin(t * Math.PI * 2);\r\n    },\r\n    $EaseOutJump: function (t) {\r\n        return 1 - (((t *= 2) < 1) ? (t = 1 - t) * t * t : (t -= 1) * t * t);\r\n    },\r\n    $EaseInJump: function (t) {\r\n        return ((t *= 2) < 1) ? t * t * t : (t = 2 - t) * t * t;\r\n    }\r\n};\r\n\r\nvar $JssorDirection$ = window.$JssorDirection$ = {\r\n    $TO_LEFT: 0x0001,\r\n    $TO_RIGHT: 0x0002,\r\n    $TO_TOP: 0x0004,\r\n    $TO_BOTTOM: 0x0008,\r\n    $HORIZONTAL: 0x0003,\r\n    $VERTICAL: 0x000C,\r\n    //$LEFTRIGHT: 0x0003,\r\n    //$TOPBOTOM: 0x000C,\r\n    //$TOPLEFT: 0x0005,\r\n    //$TOPRIGHT: 0x0006,\r\n    //$BOTTOMLEFT: 0x0009,\r\n    //$BOTTOMRIGHT: 0x000A,\r\n    //$AROUND: 0x000F,\r\n\r\n    $GetDirectionHorizontal: function (direction) {\r\n        return direction & 0x0003;\r\n    },\r\n    $GetDirectionVertical: function (direction) {\r\n        return direction & 0x000C;\r\n    },\r\n    //$ChessHorizontal: function (direction) {\r\n    //    return (~direction & 0x0003) + (direction & 0x000C);\r\n    //},\r\n    //$ChessVertical: function (direction) {\r\n    //    return (~direction & 0x000C) + (direction & 0x0003);\r\n    //},\r\n    //$IsToLeft: function (direction) {\r\n    //    return (direction & 0x0003) == 0x0001;\r\n    //},\r\n    //$IsToRight: function (direction) {\r\n    //    return (direction & 0x0003) == 0x0002;\r\n    //},\r\n    //$IsToTop: function (direction) {\r\n    //    return (direction & 0x000C) == 0x0004;\r\n    //},\r\n    //$IsToBottom: function (direction) {\r\n    //    return (direction & 0x000C) == 0x0008;\r\n    //},\r\n    $IsHorizontal: function (direction) {\r\n        return direction & 0x0003;\r\n    },\r\n    $IsVertical: function (direction) {\r\n        return direction & 0x000C;\r\n    }\r\n};\r\n\r\nvar $JssorKeyCode$ = {\r\n    $BACKSPACE: 8,\r\n    $COMMA: 188,\r\n    $DELETE: 46,\r\n    $DOWN: 40,\r\n    $END: 35,\r\n    $ENTER: 13,\r\n    $ESCAPE: 27,\r\n    $HOME: 36,\r\n    $LEFT: 37,\r\n    $NUMPAD_ADD: 107,\r\n    $NUMPAD_DECIMAL: 110,\r\n    $NUMPAD_DIVIDE: 111,\r\n    $NUMPAD_ENTER: 108,\r\n    $NUMPAD_MULTIPLY: 106,\r\n    $NUMPAD_SUBTRACT: 109,\r\n    $PAGE_DOWN: 34,\r\n    $PAGE_UP: 33,\r\n    $PERIOD: 190,\r\n    $RIGHT: 39,\r\n    $SPACE: 32,\r\n    $TAB: 9,\r\n    $UP: 38\r\n};\r\n\r\n// $Jssor$ is a static class, so make it singleton instance\r\nvar $Jssor$ = window.$Jssor$ = new function () {\r\n    var _This = this;\r\n\r\n    //#region Constants\r\n    var REGEX_WHITESPACE_GLOBAL = /\\S+/g;\r\n    var ROWSER_OTHER = -1;\r\n    var ROWSER_UNKNOWN = 0;\r\n    var BROWSER_IE = 1;\r\n    var BROWSER_FIREFOX = 2;\r\n    var BROWSER_SAFARI = 3;\r\n    var BROWSER_CHROME = 4;\r\n    var BROWSER_OPERA = 5;\r\n    //var arrActiveX = [\"Msxml2.XMLHTTP\", \"Msxml3.XMLHTTP\", \"Microsoft.XMLHTTP\"];\r\n    //#endregion\r\n\r\n    //#region Variables\r\n    var _Device;\r\n    var _Browser = 0;\r\n    var _BrowserRuntimeVersion = 0;\r\n    var _BrowserEngineVersion = 0;\r\n    var _BrowserJavascriptVersion = 0;\r\n    var _WebkitVersion = 0;\r\n\r\n    var _Navigator = navigator;\r\n    var _AppName = _Navigator.appName;\r\n    var _AppVersion = _Navigator.appVersion;\r\n    var _UserAgent = _Navigator.userAgent;\r\n\r\n    var _DocElmt = document.documentElement;\r\n    var _TransformProperty;\r\n    //#endregion\r\n\r\n    function Device() {\r\n        if (!_Device) {\r\n            _Device = { $Touchable: \"ontouchstart\" in window || \"createTouch\" in document };\r\n\r\n            var msPrefix;\r\n            if ((_Navigator.pointerEnabled || (msPrefix = _Navigator.msPointerEnabled))) {\r\n                _Device.$TouchActionAttr = msPrefix ? \"msTouchAction\" : \"touchAction\";\r\n            }\r\n        }\r\n\r\n        return _Device;\r\n    }\r\n\r\n    function DetectBrowser(browser) {\r\n        if (!_Browser) {\r\n            _Browser = -1;\r\n\r\n            if (_AppName == \"Microsoft Internet Explorer\" &&\r\n                !!window.attachEvent && !!window.ActiveXObject) {\r\n\r\n                var ieOffset = _UserAgent.indexOf(\"MSIE\");\r\n                _Browser = BROWSER_IE;\r\n                _BrowserEngineVersion = ParseFloat(_UserAgent.substring(ieOffset + 5, _UserAgent.indexOf(\";\", ieOffset)));\r\n\r\n                //check IE javascript version\r\n                /*@cc_on\r\n                _BrowserJavascriptVersion = @_jscript_version;\r\n                @*/\r\n\r\n                // update: for intranet sites and compat view list sites, IE sends\r\n                // an IE7 User-Agent to the server to be interoperable, and even if\r\n                // the page requests a later IE version, IE will still report the\r\n                // IE7 UA to JS. we should be robust to self\r\n                //var docMode = document.documentMode;\r\n                //if (typeof docMode !== \"undefined\") {\r\n                //    _BrowserRuntimeVersion = docMode;\r\n                //}\r\n\r\n                _BrowserRuntimeVersion = document.documentMode || _BrowserEngineVersion;\r\n\r\n            }\r\n            else if (_AppName == \"Netscape\" && !!window.addEventListener) {\r\n\r\n                var ffOffset = _UserAgent.indexOf(\"Firefox\");\r\n                var saOffset = _UserAgent.indexOf(\"Safari\");\r\n                var chOffset = _UserAgent.indexOf(\"Chrome\");\r\n                var webkitOffset = _UserAgent.indexOf(\"AppleWebKit\");\r\n\r\n                if (ffOffset >= 0) {\r\n                    _Browser = BROWSER_FIREFOX;\r\n                    _BrowserRuntimeVersion = ParseFloat(_UserAgent.substring(ffOffset + 8));\r\n                }\r\n                else if (saOffset >= 0) {\r\n                    var slash = _UserAgent.substring(0, saOffset).lastIndexOf(\"/\");\r\n                    _Browser = (chOffset >= 0) ? BROWSER_CHROME : BROWSER_SAFARI;\r\n                    _BrowserRuntimeVersion = ParseFloat(_UserAgent.substring(slash + 1, saOffset));\r\n                }\r\n                else {\r\n                    //(/Trident.*rv[ :]*11\\./i\r\n                    var match = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/i.exec(_UserAgent);\r\n                    if (match) {\r\n                        _Browser = BROWSER_IE;\r\n                        _BrowserRuntimeVersion = _BrowserEngineVersion = ParseFloat(match[1]);\r\n                    }\r\n                }\r\n\r\n                if (webkitOffset >= 0)\r\n                    _WebkitVersion = ParseFloat(_UserAgent.substring(webkitOffset + 12));\r\n            }\r\n            else {\r\n                var match = /(opera)(?:.*version|)[ \\/]([\\w.]+)/i.exec(_UserAgent);\r\n                if (match) {\r\n                    _Browser = BROWSER_OPERA;\r\n                    _BrowserRuntimeVersion = ParseFloat(match[2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return browser == _Browser;\r\n    }\r\n\r\n    function IsBrowserIE() {\r\n        return DetectBrowser(BROWSER_IE);\r\n    }\r\n\r\n    function IsBrowserIeQuirks() {\r\n        return IsBrowserIE() && (_BrowserRuntimeVersion < 6 || document.compatMode == \"BackCompat\");   //Composite to \"CSS1Compat\"\r\n    }\r\n\r\n    function IsBrowserFireFox() {\r\n        return DetectBrowser(BROWSER_FIREFOX);\r\n    }\r\n\r\n    function IsBrowserSafari() {\r\n        return DetectBrowser(BROWSER_SAFARI);\r\n    }\r\n\r\n    function IsBrowserChrome() {\r\n        return DetectBrowser(BROWSER_CHROME);\r\n    }\r\n\r\n    function IsBrowserOpera() {\r\n        return DetectBrowser(BROWSER_OPERA);\r\n    }\r\n\r\n    function IsBrowserBadTransform() {\r\n        return IsBrowserSafari() && (_WebkitVersion > 534) && (_WebkitVersion < 535);\r\n    }\r\n\r\n    function IsBrowserIe9Earlier() {\r\n        return IsBrowserIE() && _BrowserRuntimeVersion < 9;\r\n    }\r\n\r\n    function GetTransformProperty(elmt) {\r\n\r\n        if (!_TransformProperty) {\r\n            // Note that in some versions of IE9 it is critical that\r\n            // msTransform appear in this list before MozTransform\r\n\r\n            Each(['transform', 'WebkitTransform', 'msTransform', 'MozTransform', 'OTransform'], function (property) {\r\n                if (elmt.style[property] != undefined) {\r\n                    _TransformProperty = property;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            _TransformProperty = _TransformProperty || \"transform\";\r\n        }\r\n\r\n        return _TransformProperty;\r\n    }\r\n\r\n    // Helpers\r\n    function getOffsetParent(elmt, isFixed) {\r\n        // IE and Opera \"fixed\" position elements don't have offset parents.\r\n        // regardless, if it's fixed, its offset parent is the body.\r\n        if (isFixed && elmt != document.body) {\r\n            return document.body;\r\n        } else {\r\n            return elmt.offsetParent;\r\n        }\r\n    }\r\n\r\n    function toString(obj) {\r\n        return {}.toString.call(obj);\r\n    }\r\n\r\n    // [[Class]] -> type pairs\r\n    var _Class2type;\r\n\r\n    function GetClass2Type() {\r\n        if (!_Class2type) {\r\n            _Class2type = {};\r\n            Each([\"Boolean\", \"Number\", \"String\", \"Function\", \"Array\", \"Date\", \"RegExp\", \"Object\"], function (name) {\r\n                _Class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n            });\r\n        }\r\n\r\n        return _Class2type;\r\n    }\r\n\r\n    function Each(obj, callback) {\r\n        if (toString(obj) == \"[object Array]\") {\r\n            for (var i = 0; i < obj.length; i++) {\r\n                if (callback(obj[i], i, obj)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var name in obj) {\r\n                if (callback(obj[name], name, obj)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function Type(obj) {\r\n        return obj == null ? String(obj) : GetClass2Type()[toString(obj)] || \"object\";\r\n    }\r\n\r\n    function IsNotEmpty(obj) {\r\n        for(var name in obj)\r\n            return true;\r\n    }\r\n\r\n    function IsPlainObject(obj) {\r\n        // Not plain objects:\r\n        // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\r\n        // - DOM nodes\r\n        // - window\r\n        try {\r\n            return Type(obj) == \"object\"\r\n                && !obj.nodeType\r\n                && obj != obj.window\r\n                && (!obj.constructor || { }.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\"));\r\n        }\r\n        catch (e) { }\r\n    }\r\n\r\n    function Point(x, y) {\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    function Delay(code, delay) {\r\n        setTimeout(code, delay || 0);\r\n    }\r\n\r\n    function RemoveByReg(str, reg) {\r\n        var m = reg.exec(str);\r\n\r\n        if (m) {\r\n            var header = str.substr(0, m.index);\r\n            var tailer = str.substr(m.lastIndex + 1, str.length - (m.lastIndex + 1));\r\n            str = header + tailer;\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    function BuildNewCss(oldCss, removeRegs, replaceValue) {\r\n        var css = (!oldCss || oldCss == \"inherit\") ? \"\" : oldCss;\r\n\r\n        Each(removeRegs, function (removeReg) {\r\n            var m = removeReg.exec(css);\r\n\r\n            if (m) {\r\n                var header = css.substr(0, m.index);\r\n                var tailer = css.substr(m.lastIndex + 1, css.length - (m.lastIndex + 1));\r\n                css = header + tailer;\r\n            }\r\n        });\r\n\r\n        css = replaceValue + (css.indexOf(\" \") != 0 ? \" \" : \"\") + css;\r\n\r\n        return css;\r\n    }\r\n\r\n    function SetStyleFilterIE(elmt, value) {\r\n        if (_BrowserRuntimeVersion < 9) {\r\n            elmt.style.filter = value;\r\n        }\r\n    }\r\n\r\n    function SetStyleMatrixIE(elmt, matrix, offset) {\r\n        //matrix is not for ie9+ running in ie8- mode\r\n        if (_BrowserJavascriptVersion < 9) {\r\n            var oldFilterValue = elmt.style.filter;\r\n            var matrixReg = new RegExp(/[\\s]*progid:DXImageTransform\\.Microsoft\\.Matrix\\([^\\)]*\\)/g);\r\n            var matrixValue = matrix ? \"progid:DXImageTransform.Microsoft.Matrix(\" + \"M11=\" + matrix[0][0] + \", M12=\" + matrix[0][1] + \", M21=\" + matrix[1][0] + \", M22=\" + matrix[1][1] + \", SizingMethod='auto expand')\" : \"\";\r\n\r\n            var newFilterValue = BuildNewCss(oldFilterValue, [matrixReg], matrixValue);\r\n\r\n            SetStyleFilterIE(elmt, newFilterValue);\r\n\r\n            _This.$CssMarginTop(elmt, offset.y);\r\n            _This.$CssMarginLeft(elmt, offset.x);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n\r\n    _This.$Device = Device;\r\n\r\n    _This.$IsBrowserIE = IsBrowserIE;\r\n\r\n    _This.$IsBrowserIeQuirks = IsBrowserIeQuirks;\r\n\r\n    _This.$IsBrowserFireFox = IsBrowserFireFox;\r\n\r\n    _This.$IsBrowserSafari = IsBrowserSafari;\r\n\r\n    _This.$IsBrowserChrome = IsBrowserChrome;\r\n\r\n    _This.$IsBrowserOpera = IsBrowserOpera;\r\n\r\n    _This.$IsBrowserBadTransform = IsBrowserBadTransform;\r\n\r\n    _This.$IsBrowserIe9Earlier = IsBrowserIe9Earlier;\r\n\r\n    _This.$BrowserVersion = function () {\r\n        return _BrowserRuntimeVersion;\r\n    };\r\n\r\n    _This.$BrowserEngineVersion = function () {\r\n        return _BrowserEngineVersion || _BrowserRuntimeVersion;\r\n    };\r\n\r\n    _This.$WebKitVersion = function () {\r\n        DetectBrowser();\r\n\r\n        return _WebkitVersion;\r\n    };\r\n\r\n    _This.$Delay = Delay;\r\n\r\n    _This.$Inherit = function (instance, baseClass) {\r\n        baseClass.call(instance);\r\n        return Extend({}, instance);\r\n    };\r\n\r\n    function Construct(instance) {\r\n        instance.constructor === Construct.caller && instance.$Construct && instance.$Construct.apply(instance, Construct.caller.arguments);\r\n    }\r\n\r\n    _This.$Construct = Construct;\r\n\r\n    _This.$GetElement = function (elmt) {\r\n        if (_This.$IsString(elmt)) {\r\n            elmt = document.getElementById(elmt);\r\n        }\r\n\r\n        return elmt;\r\n    };\r\n\r\n    function GetEvent(event) {\r\n        return event || window.event;\r\n    }\r\n\r\n    _This.$GetEvent = GetEvent;\r\n\r\n    _This.$EvtSrc = function (event) {\r\n        event = GetEvent(event);\r\n        return event.target || event.srcElement || document;\r\n    };\r\n\r\n    _This.$EvtTarget = function (event) {\r\n        event = GetEvent(event);\r\n        return event.relatedTarget || event.toElement;\r\n    };\r\n\r\n    _This.$EvtWhich = function (event) {\r\n        event = GetEvent(event);\r\n        return event.which || [0, 1, 3, 0, 2][event.button] || event.charCode || event.keyCode;\r\n    };\r\n\r\n    _This.$MousePosition = function (event) {\r\n        event = GetEvent(event);\r\n        //var body = document.body;\r\n\r\n        return {\r\n            x: event.pageX || event.clientX/* + (_DocElmt.scrollLeft || body.scrollLeft || 0) - (_DocElmt.clientLeft || body.clientLeft || 0)*/ || 0,\r\n            y: event.pageY || event.clientY/* + (_DocElmt.scrollTop || body.scrollTop || 0) - (_DocElmt.clientTop || body.clientTop || 0)*/ || 0\r\n        };\r\n    };\r\n\r\n    _This.$PageScroll = function () {\r\n        var body = document.body;\r\n\r\n        return {\r\n            x: (window.pageXOffset || _DocElmt.scrollLeft || body.scrollLeft || 0) - (_DocElmt.clientLeft || body.clientLeft || 0),\r\n            y: (window.pageYOffset || _DocElmt.scrollTop || body.scrollTop || 0) - (_DocElmt.clientTop || body.clientTop || 0)\r\n        };\r\n    };\r\n\r\n    _This.$WindowSize = function () {\r\n        var body = document.body;\r\n\r\n        return {\r\n            x: body.clientWidth || _DocElmt.clientWidth,\r\n            y: body.clientHeight || _DocElmt.clientHeight\r\n        };\r\n    };\r\n\r\n    //_This.$GetElementPosition = function (elmt) {\r\n    //    elmt = _This.$GetElement(elmt);\r\n    //    var result = Point();\r\n\r\n    //    // technique from:\r\n    //    // http://www.quirksmode.org/js/findpos.html\r\n    //    // with special check for \"fixed\" elements.\r\n\r\n    //    while (elmt) {\r\n    //        result.x += elmt.offsetLeft;\r\n    //        result.y += elmt.offsetTop;\r\n\r\n    //        var isFixed = _This.$GetElementStyle(elmt).position == \"fixed\";\r\n\r\n    //        if (isFixed) {\r\n    //            result = result.$Plus(_This.$PageScroll(window));\r\n    //        }\r\n\r\n    //        elmt = getOffsetParent(elmt, isFixed);\r\n    //    }\r\n\r\n    //    return result;\r\n    //};\r\n\r\n    //_This.$GetMouseScroll = function (event) {\r\n    //    event = GetEvent(event);\r\n    //    var delta = 0; // default value\r\n\r\n    //    // technique from:\r\n    //    // http://blog.paranoidferret.com/index.php/2007/10/31/javascript-tutorial-the-scroll-wheel/\r\n\r\n    //    if (typeof (event.wheelDelta) == \"number\") {\r\n    //        delta = event.wheelDelta;\r\n    //    } else if (typeof (event.detail) == \"number\") {\r\n    //        delta = event.detail * -1;\r\n    //    } else {\r\n    //        $JssorDebug$.$Fail(\"Unknown event mouse scroll, no known technique.\");\r\n    //    }\r\n\r\n    //    // normalize value to [-1, 1]\r\n    //    return delta ? delta / Math.abs(delta) : 0;\r\n    //};\r\n\r\n    //_This.$MakeAjaxRequest = function (url, callback) {\r\n    //    var async = typeof (callback) == \"function\";\r\n    //    var req = null;\r\n\r\n    //    if (async) {\r\n    //        var actual = callback;\r\n    //        var callback = function () {\r\n    //            Delay($Jssor$.$CreateCallback(null, actual, req), 1);\r\n    //        };\r\n    //    }\r\n\r\n    //    if (window.ActiveXObject) {\r\n    //        for (var i = 0; i < arrActiveX.length; i++) {\r\n    //            try {\r\n    //                req = new ActiveXObject(arrActiveX[i]);\r\n    //                break;\r\n    //            } catch (e) {\r\n    //                continue;\r\n    //            }\r\n    //        }\r\n    //    } else if (window.XMLHttpRequest) {\r\n    //        req = new XMLHttpRequest();\r\n    //    }\r\n\r\n    //    if (!req) {\r\n    //        $JssorDebug$.$Fail(\"Browser doesn't support XMLHttpRequest.\");\r\n    //    }\r\n\r\n    //    if (async) {\r\n    //        req.onreadystatechange = function () {\r\n    //            if (req.readyState == 4) {\r\n    //                // prevent memory leaks by breaking circular reference now\r\n    //                req.onreadystatechange = new Function();\r\n    //                callback();\r\n    //            }\r\n    //        };\r\n    //    }\r\n\r\n    //    try {\r\n    //        req.open(\"GET\", url, async);\r\n    //        req.send(null);\r\n    //    } catch (e) {\r\n    //        $JssorDebug$.$Log(e.name + \" while making AJAX request: \" + e.message);\r\n\r\n    //        req.onreadystatechange = null;\r\n    //        req = null;\r\n\r\n    //        if (async) {\r\n    //            callback();\r\n    //        }\r\n    //    }\r\n\r\n    //    return async ? null : req;\r\n    //};\r\n\r\n    //_This.$ParseXml = function (string) {\r\n    //    var xmlDoc = null;\r\n\r\n    //    if (window.ActiveXObject) {\r\n    //        try {\r\n    //            xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n    //            xmlDoc.async = false;\r\n    //            xmlDoc.loadXML(string);\r\n    //        } catch (e) {\r\n    //            $JssorDebug$.$Log(e.name + \" while parsing XML (ActiveX): \" + e.message);\r\n    //        }\r\n    //    } else if (window.DOMParser) {\r\n    //        try {\r\n    //            var parser = new DOMParser();\r\n    //            xmlDoc = parser.parseFromString(string, \"text/xml\");\r\n    //        } catch (e) {\r\n    //            $JssorDebug$.$Log(e.name + \" while parsing XML (DOMParser): \" + e.message);\r\n    //        }\r\n    //    } else {\r\n    //        $JssorDebug$.$Fail(\"Browser doesn't support XML DOM.\");\r\n    //    }\r\n\r\n    //    return xmlDoc;\r\n    //};\r\n\r\n    function Css(elmt, name, value) {\r\n        ///\t<summary>\r\n        ///\t\taccess css\r\n        ///     $Jssor$.$Css(elmt, name);         //get css value\r\n        ///     $Jssor$.$Css(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        if (value != undefined) {\r\n            elmt.style[name] = value;\r\n        }\r\n        else {\r\n            var style = elmt.currentStyle || elmt.style;\r\n            value = style[name];\r\n\r\n            if (value == \"\" && window.getComputedStyle) {\r\n                style = elmt.ownerDocument.defaultView.getComputedStyle(elmt, null);\r\n\r\n                style && (value = style.getPropertyValue(name) || style[name]);\r\n            }\r\n\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function CssN(elmt, name, value, isDimensional) {\r\n        ///\t<summary>\r\n        ///\t\taccess css as numeric\r\n        ///     $Jssor$.$CssN(elmt, name);         //get css value\r\n        ///     $Jssor$.$CssN(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" type=\"Number\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        if (value != undefined) {\r\n            isDimensional && (value += \"px\");\r\n            Css(elmt, name, value);\r\n        }\r\n        else {\r\n            return ParseFloat(Css(elmt, name));\r\n        }\r\n    }\r\n\r\n    function CssP(elmt, name, value) {\r\n        ///\t<summary>\r\n        ///\t\taccess css in pixel as numeric, like 'top', 'left', 'width', 'height'\r\n        ///     $Jssor$.$CssP(elmt, name);         //get css value\r\n        ///     $Jssor$.$CssP(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" type=\"Number\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        return CssN(elmt, name, value, true);\r\n    }\r\n\r\n    function CssProxy(name, numericOrDimension) {\r\n        ///\t<summary>\r\n        ///\t\tcreate proxy to access css, CssProxy(name[, numericOrDimension]);\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"numericOrDimension\" type=\"Number\" optional=\"true\">\r\n        ///\t\tnot set: access original css, 1: access css as numeric, 2: access css in pixel as numeric\r\n        ///\t</param>\r\n        var isDimensional = numericOrDimension & 2;\r\n        var cssAccessor = numericOrDimension ? CssN : Css;\r\n        return function (elmt, value) {\r\n            return cssAccessor(elmt, name, value, isDimensional);\r\n        };\r\n    }\r\n\r\n    function GetStyleOpacity(elmt) {\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9) {\r\n            var match = /opacity=([^)]*)/.exec(elmt.style.filter || \"\");\r\n            return match ? (ParseFloat(match[1]) / 100) : 1;\r\n        }\r\n        else\r\n            return ParseFloat(elmt.style.opacity || \"1\");\r\n    }\r\n\r\n    function SetStyleOpacity(elmt, opacity, ie9EarlierForce) {\r\n\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9) {\r\n            //var filterName = \"filter\"; // _BrowserEngineVersion < 8 ? \"filter\" : \"-ms-filter\";\r\n            var finalFilter = elmt.style.filter || \"\";\r\n\r\n            // for CSS filter browsers (IE), remove alpha filter if it's unnecessary.\r\n            // update: doing _This always since IE9 beta seems to have broken the\r\n            // behavior if we rely on the programmatic filters collection.\r\n            var alphaReg = new RegExp(/[\\s]*alpha\\([^\\)]*\\)/g);\r\n\r\n            // important: note the lazy star! _This protects against\r\n            // multiple filters; we don't want to delete the other ones.\r\n            // update: also trimming extra whitespace around filter.\r\n\r\n            var ieOpacity = Math.round(100 * opacity);\r\n            var alphaFilter = \"\";\r\n            if (ieOpacity < 100 || ie9EarlierForce) {\r\n                alphaFilter = \"alpha(opacity=\" + ieOpacity + \") \";\r\n            }\r\n\r\n            var newFilterValue = BuildNewCss(finalFilter, [alphaReg], alphaFilter);\r\n\r\n            SetStyleFilterIE(elmt, newFilterValue);\r\n        }\r\n        else {\r\n            elmt.style.opacity = opacity == 1 ? \"\" : Math.round(opacity * 100) / 100;\r\n        }\r\n    }\r\n\r\n    function SetStyleTransformInternal(elmt, transform) {\r\n        var rotate = transform.$Rotate || 0;\r\n        var scale = transform.$Scale == undefined ? 1 : transform.$Scale;\r\n\r\n        if (IsBrowserIe9Earlier()) {\r\n            var matrix = _This.$CreateMatrix(rotate / 180 * Math.PI, scale, scale);\r\n            SetStyleMatrixIE(elmt, (!rotate && scale == 1) ? null : matrix, _This.$GetMatrixOffset(matrix, transform.$OriginalWidth, transform.$OriginalHeight));\r\n        }\r\n        else {\r\n            //rotate(15deg) scale(.5) translateZ(0)\r\n            var transformProperty = GetTransformProperty(elmt);\r\n            if (transformProperty) {\r\n                var transformValue = \"rotate(\" + rotate % 360 + \"deg) scale(\" + scale + \")\";\r\n\r\n                //needed for touch device, no need for desktop device\r\n                if (IsBrowserChrome() && _WebkitVersion > 535 && \"ontouchstart\" in window)\r\n                    transformValue += \" perspective(2000px)\";\r\n\r\n                elmt.style[transformProperty] = transformValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$SetStyleTransform = function (elmt, transform) {\r\n        if (IsBrowserBadTransform()) {\r\n            Delay(_This.$CreateCallback(null, SetStyleTransformInternal, elmt, transform));\r\n        }\r\n        else {\r\n            SetStyleTransformInternal(elmt, transform);\r\n        }\r\n    };\r\n\r\n    _This.$SetStyleTransformOrigin = function (elmt, transformOrigin) {\r\n        var transformProperty = GetTransformProperty(elmt);\r\n\r\n        if (transformProperty)\r\n            elmt.style[transformProperty + \"Origin\"] = transformOrigin;\r\n    };\r\n\r\n    _This.$CssScale = function (elmt, scale) {\r\n\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9 || (_BrowserEngineVersion < 10 && IsBrowserIeQuirks())) {\r\n            elmt.style.zoom = (scale == 1) ? \"\" : scale;\r\n        }\r\n        else {\r\n            var transformProperty = GetTransformProperty(elmt);\r\n\r\n            if (transformProperty) {\r\n                //rotate(15deg) scale(.5)\r\n                var transformValue = \"scale(\" + scale + \")\";\r\n\r\n                var oldTransformValue = elmt.style[transformProperty];\r\n                var scaleReg = new RegExp(/[\\s]*scale\\(.*?\\)/g);\r\n\r\n                var newTransformValue = BuildNewCss(oldTransformValue, [scaleReg], transformValue);\r\n\r\n                elmt.style[transformProperty] = newTransformValue;\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$EnableHWA = function (elmt) {\r\n        if (!elmt.style[GetTransformProperty(elmt)] || elmt.style[GetTransformProperty(elmt)] == \"none\")\r\n            elmt.style[GetTransformProperty(elmt)] = \"perspective(2000px)\";\r\n    };\r\n\r\n    _This.$DisableHWA = function (elmt) {\r\n        elmt.style[GetTransformProperty(elmt)] = \"none\";\r\n    };\r\n\r\n    var ie8OffsetWidth = 0;\r\n    var ie8OffsetHeight = 0;\r\n\r\n    _This.$WindowResizeFilter = function (window, handler) {\r\n        return IsBrowserIe9Earlier() ? function () {\r\n\r\n            var trigger = true;\r\n\r\n            var checkElement = (IsBrowserIeQuirks() ? window.document.body : window.document.documentElement);\r\n            if (checkElement) {\r\n                var widthChange = checkElement.offsetWidth - ie8OffsetWidth;\r\n                var heightChange = checkElement.offsetHeight - ie8OffsetHeight;\r\n                if (widthChange || heightChange) {\r\n                    ie8OffsetWidth += widthChange;\r\n                    ie8OffsetHeight += heightChange;\r\n                }\r\n                else\r\n                    trigger = false;\r\n            }\r\n\r\n            trigger && handler();\r\n\r\n        } : handler;\r\n    };\r\n\r\n    _This.$MouseOverOutFilter = function (handler, target) {\r\n        ///\t<param name=\"target\" type=\"HTMLDomElement\">\r\n        ///\t\tThe target element to detect mouse over/out events. (for ie < 9 compatibility)\r\n        ///\t</param>\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!target) {\r\n                throw new Error(\"Null reference, parameter \\\"target\\\".\");\r\n            }\r\n        });\r\n\r\n        return function (event) {\r\n            event = GetEvent(event);\r\n\r\n            var eventName = event.type;\r\n            var related = event.relatedTarget || (eventName == \"mouseout\" ? event.toElement : event.fromElement);\r\n\r\n            if (!related || (related !== target && !_This.$IsChild(target, related))) {\r\n                handler(event);\r\n            }\r\n        };\r\n    };\r\n\r\n    _This.$AddEvent = function (elmt, eventName, handler, useCapture) {\r\n        elmt = _This.$GetElement(elmt);\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!elmt) {\r\n                $JssorDebug$.$Fail(\"Parameter 'elmt' not specified.\");\r\n            }\r\n\r\n            if (!handler) {\r\n                $JssorDebug$.$Fail(\"Parameter 'handler' not specified.\");\r\n            }\r\n\r\n            if (!elmt.addEventListener && !elmt.attachEvent) {\r\n                $JssorDebug$.$Fail(\"Unable to attach event handler, no known technique.\");\r\n            }\r\n        });\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (elmt.addEventListener) {\r\n            if (eventName == \"mousewheel\") {\r\n                elmt.addEventListener(\"DOMMouseScroll\", handler, useCapture);\r\n            }\r\n            // we are still going to add the mousewheel -- not a mistake!\r\n            // _This is for opera, since it uses onmousewheel but needs addEventListener.\r\n            elmt.addEventListener(eventName, handler, useCapture);\r\n        }\r\n        else if (elmt.attachEvent) {\r\n            elmt.attachEvent(\"on\" + eventName, handler);\r\n            if (useCapture && elmt.setCapture) {\r\n                elmt.setCapture();\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$RemoveEvent = function (elmt, eventName, handler, useCapture) {\r\n        elmt = _This.$GetElement(elmt);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (elmt.removeEventListener) {\r\n            if (eventName == \"mousewheel\") {\r\n                elmt.removeEventListener(\"DOMMouseScroll\", handler, useCapture);\r\n            }\r\n            // we are still going to remove the mousewheel -- not a mistake!\r\n            // _This is for opera, since it uses onmousewheel but needs removeEventListener.\r\n            elmt.removeEventListener(eventName, handler, useCapture);\r\n        }\r\n        else if (elmt.detachEvent) {\r\n            elmt.detachEvent(\"on\" + eventName, handler);\r\n            if (useCapture && elmt.releaseCapture) {\r\n                elmt.releaseCapture();\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$FireEvent = function (elmt, eventName) {\r\n        //var document = elmt.document;\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!document.createEvent && !document.createEventObject) {\r\n                $JssorDebug$.$Fail(\"Unable to fire event, no known technique.\");\r\n            }\r\n\r\n            if (!elmt.dispatchEvent && !elmt.fireEvent) {\r\n                $JssorDebug$.$Fail(\"Unable to fire event, no known technique.\");\r\n            }\r\n        });\r\n\r\n        var evento;\r\n\r\n        if (document.createEvent) {\r\n            evento = document.createEvent(\"HTMLEvents\");\r\n            evento.initEvent(eventName, false, false);\r\n            elmt.dispatchEvent(evento);\r\n        }\r\n        else {\r\n            var ieEventName = \"on\" + eventName;\r\n            evento = document.createEventObject();\r\n\r\n            elmt.fireEvent(ieEventName, evento);\r\n        }\r\n    };\r\n\r\n    _This.$CancelEvent = function (event) {\r\n        event = GetEvent(event);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (event.preventDefault) {\r\n            event.preventDefault();     // W3C for preventing default\r\n        }\r\n\r\n        event.cancel = true;            // legacy for preventing default\r\n        event.returnValue = false;      // IE for preventing default\r\n    };\r\n\r\n    _This.$StopEvent = function (event) {\r\n        event = GetEvent(event);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();    // W3C for stopping propagation\r\n        }\r\n\r\n        event.cancelBubble = true;      // IE for stopping propagation\r\n    };\r\n\r\n    _This.$CreateCallback = function (object, method) {\r\n        // create callback args\r\n        var initialArgs = [].slice.call(arguments, 2);\r\n\r\n        // create closure to apply method\r\n        var callback = function () {\r\n            // concatenate new args, but make a copy of initialArgs first\r\n            var args = initialArgs.concat([].slice.call(arguments, 0));\r\n\r\n            return method.apply(object, args);\r\n        };\r\n\r\n        //$JssorDebug$.$LiveStamp(callback, \"callback_\" + ($Jssor$.$GetNow() & 0xFFFFFF));\r\n\r\n        return callback;\r\n    };\r\n\r\n    _This.$InnerText = function (elmt, text) {\r\n        if (text == undefined)\r\n            return elmt.textContent || elmt.innerText;\r\n\r\n        var textNode = document.createTextNode(text);\r\n        _This.$Empty(elmt);\r\n        elmt.appendChild(textNode);\r\n    };\r\n\r\n    _This.$InnerHtml = function (elmt, html) {\r\n        if (html == undefined)\r\n            return elmt.innerHTML;\r\n\r\n        elmt.innerHTML = html;\r\n    };\r\n\r\n    _This.$GetClientRect = function (elmt) {\r\n        var rect = elmt.getBoundingClientRect();\r\n\r\n        return { x: rect.left, y: rect.top, w: rect.right - rect.left, h: rect.bottom - rect.top };\r\n    };\r\n\r\n    _This.$ClearInnerHtml = function (elmt) {\r\n        elmt.innerHTML = \"\";\r\n    };\r\n\r\n    _This.$EncodeHtml = function (text) {\r\n        var div = _This.$CreateDiv();\r\n        _This.$InnerText(div, text);\r\n        return _This.$InnerHtml(div);\r\n    };\r\n\r\n    _This.$DecodeHtml = function (html) {\r\n        var div = _This.$CreateDiv();\r\n        _This.$InnerHtml(div, html);\r\n        return _This.$InnerText(div);\r\n    };\r\n\r\n    _This.$SelectElement = function (elmt) {\r\n        var userSelection;\r\n        if (window.getSelection) {\r\n            //W3C default\r\n            userSelection = window.getSelection();\r\n        }\r\n        var theRange = null;\r\n        if (document.createRange) {\r\n            theRange = document.createRange();\r\n            theRange.selectNode(elmt);\r\n        }\r\n        else {\r\n            theRange = document.body.createTextRange();\r\n            theRange.moveToElementText(elmt);\r\n            theRange.select();\r\n        }\r\n        //set user selection\r\n        if (userSelection)\r\n            userSelection.addRange(theRange);\r\n    };\r\n\r\n    _This.$DeselectElements = function () {\r\n        if (document.selection) {\r\n            document.selection.empty();\r\n        } else if (window.getSelection) {\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    };\r\n\r\n    _This.$Children = function (elmt, includeAll) {\r\n        var children = [];\r\n\r\n        for (var tmpEl = elmt.firstChild; tmpEl; tmpEl = tmpEl.nextSibling) {\r\n            if (includeAll || tmpEl.nodeType == 1) {\r\n                children.push(tmpEl);\r\n            }\r\n        }\r\n\r\n        return children;\r\n    };\r\n\r\n    function FindChild(elmt, attrValue, noDeep, attrName) {\r\n        attrName = attrName || \"u\";\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (AttributeEx(elmt, attrName) == attrValue)\r\n                    return elmt;\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChild(elmt, attrValue, noDeep, attrName);\r\n                    if (childRet)\r\n                        return childRet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$FindChild = FindChild;\r\n\r\n    function FindChildren(elmt, attrValue, noDeep, attrName) {\r\n        attrName = attrName || \"u\";\r\n\r\n        var ret = [];\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (AttributeEx(elmt, attrName) == attrValue)\r\n                    ret.push(elmt);\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildren(elmt, attrValue, noDeep, attrName);\r\n                    if (childRet.length)\r\n                        ret = ret.concat(childRet);\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _This.$FindChildren = FindChildren;\r\n\r\n    function FindChildByTag(elmt, tagName, noDeep) {\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (elmt.tagName == tagName)\r\n                    return elmt;\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildByTag(elmt, tagName, noDeep);\r\n                    if (childRet)\r\n                        return childRet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$FindChildByTag = FindChildByTag;\r\n\r\n    function FindChildrenByTag(elmt, tagName, noDeep) {\r\n        var ret = [];\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (!tagName || elmt.tagName == tagName)\r\n                    ret.push(elmt);\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildrenByTag(elmt, tagName, noDeep);\r\n                    if (childRet.length)\r\n                        ret = ret.concat(childRet);\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _This.$FindChildrenByTag = FindChildrenByTag;\r\n\r\n    _This.$GetElementsByTag = function (elmt, tagName) {\r\n        return elmt.getElementsByTagName(tagName);\r\n    };\r\n\r\n    //function Extend() {\r\n    //    var args = arguments;\r\n    //    var target;\r\n    //    var options;\r\n    //    var propName;\r\n    //    var propValue;\r\n    //    var targetPropValue;\r\n    //    var purpose = 7 & args[0];\r\n    //    var deep = 1 & purpose;\r\n    //    var unextend = 2 & purpose;\r\n    //    var i = purpose ? 2 : 1;\r\n    //    target = args[i - 1] || {};\r\n\r\n    //    for (; i < args.length; i++) {\r\n    //        // Only deal with non-null/undefined values\r\n    //        if (options = args[i]) {\r\n    //            // Extend the base object\r\n    //            for (propName in options) {\r\n    //                propValue = options[propName];\r\n\r\n    //                if (propValue !== undefined) {\r\n    //                    propValue = options[propName];\r\n\r\n    //                    if (unextend) {\r\n    //                        targetPropValue = target[propName];\r\n    //                        if (propValue === targetPropValue)\r\n    //                            delete target[propName];\r\n    //                        else if (deep && IsPlainObject(targetPropValue)) {\r\n    //                            Extend(purpose, targetPropValue, propValue);\r\n    //                        }\r\n    //                    }\r\n    //                    else {\r\n    //                        target[propName] = (deep && IsPlainObject(target[propName])) ? Extend(purpose | 4, {}, propValue) : propValue;\r\n    //                    }\r\n    //                }\r\n    //            }\r\n    //        }\r\n    //    }\r\n\r\n    //    // Return the modified object\r\n    //    return target;\r\n    //}\r\n\r\n    //function Unextend() {\r\n    //    var args = arguments;\r\n    //    var newArgs = [].slice.call(arguments);\r\n    //    var purpose = 1 & args[0];\r\n\r\n    //    purpose && newArgs.shift();\r\n    //    newArgs.unshift(purpose | 2);\r\n\r\n    //    return Extend.apply(null, newArgs);\r\n    //}\r\n\r\n    function Extend() {\r\n        var args = arguments;\r\n        var target;\r\n        var options;\r\n        var propName;\r\n        var propValue;\r\n        var deep = 1 & args[0];\r\n        var i = 1 + deep;\r\n        target = args[i - 1] || {};\r\n\r\n        for (; i < args.length; i++) {\r\n            // Only deal with non-null/undefined values\r\n            if (options = args[i]) {\r\n                // Extend the base object\r\n                for (propName in options) {\r\n                    propValue = options[propName];\r\n\r\n                    if (propValue !== undefined) {\r\n                        propValue = options[propName];\r\n                        target[propName] = (deep && IsPlainObject(target[propName])) ? Extend(deep, {}, propValue) : propValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    }\r\n\r\n    _This.$Extend = Extend;\r\n\r\n    function Unextend(target, option) {\r\n        $JssorDebug$.$Assert(option);\r\n\r\n        var unextended = {};\r\n        var name;\r\n        var targetProp;\r\n        var optionProp;\r\n\r\n        // Extend the base object\r\n        for (name in target) {\r\n            targetProp = target[name];\r\n            optionProp = option[name];\r\n\r\n            if (targetProp !== optionProp) {\r\n                var exclude;\r\n\r\n                if (IsPlainObject(targetProp) && IsPlainObject(optionProp)) {\r\n                    targetProp = Unextend(optionProp);\r\n                    exclude = !IsNotEmpty(targetProp);\r\n                }\r\n                \r\n                !exclude && (unextended[name] = targetProp);\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return unextended;\r\n    }\r\n\r\n    _This.$Unextend = Unextend;\r\n\r\n    _This.$IsFunction = function (obj) {\r\n        return Type(obj) == \"function\";\r\n    };\r\n\r\n    _This.$IsArray = function (obj) {\r\n        return Type(obj) == \"array\";\r\n    };\r\n\r\n    _This.$IsString = function (obj) {\r\n        return Type(obj) == \"string\";\r\n    };\r\n\r\n    _This.$IsNumeric = function (obj) {\r\n        return !isNaN(ParseFloat(obj)) && isFinite(obj);\r\n    };\r\n\r\n    _This.$Type = Type;\r\n\r\n    // args is for internal usage only\r\n    _This.$Each = Each;\r\n\r\n    _This.$IsNotEmpty = IsNotEmpty;\r\n\r\n    _This.$IsPlainObject = IsPlainObject;\r\n\r\n    function CreateElement(tagName) {\r\n        return document.createElement(tagName);\r\n    }\r\n\r\n    _This.$CreateElement = CreateElement;\r\n\r\n    _This.$CreateDiv = function () {\r\n        return CreateElement(\"DIV\");\r\n    };\r\n\r\n    _This.$CreateSpan = function () {\r\n        return CreateElement(\"SPAN\");\r\n    };\r\n\r\n    _This.$EmptyFunction = function () { };\r\n\r\n    function Attribute(elmt, name, value) {\r\n        if (value == undefined)\r\n            return elmt.getAttribute(name);\r\n\r\n        elmt.setAttribute(name, value);\r\n    }\r\n\r\n    function AttributeEx(elmt, name) {\r\n        return Attribute(elmt, name) || Attribute(elmt, \"data-\" + name);\r\n    }\r\n\r\n    _This.$Attribute = Attribute;\r\n    _This.$AttributeEx = AttributeEx;\r\n\r\n    function ClassName(elmt, className) {\r\n        if (className == undefined)\r\n            return elmt.className;\r\n\r\n        elmt.className = className;\r\n    }\r\n\r\n    _This.$ClassName = ClassName;\r\n\r\n    function ToHash(array) {\r\n        var hash = {};\r\n\r\n        Each(array, function (item) {\r\n            hash[item] = item;\r\n        });\r\n\r\n        return hash;\r\n    }\r\n\r\n    function Split(str, separator) {\r\n        return str.match(separator || REGEX_WHITESPACE_GLOBAL);\r\n    }\r\n\r\n    function StringToHashObject(str, regExp) {\r\n        return ToHash(Split(str || \"\", regExp));\r\n    }\r\n\r\n    _This.$ToHash = ToHash;\r\n    _This.$Split = Split;\r\n\r\n    function Join(separator, strings) {\r\n        ///\t<param name=\"separator\" type=\"String\">\r\n        ///\t</param>\r\n        ///\t<param name=\"strings\" type=\"Array\" value=\"['1']\">\r\n        ///\t</param>\r\n\r\n        var joined = \"\";\r\n\r\n        Each(strings, function (str) {\r\n            joined && (joined += separator);\r\n            joined += str;\r\n        });\r\n\r\n        return joined;\r\n    }\r\n\r\n    function ReplaceClass(elmt, oldClassName, newClassName) {\r\n        ClassName(elmt, Join(\" \", Extend(Unextend(StringToHashObject(ClassName(elmt)), StringToHashObject(oldClassName)), StringToHashObject(newClassName))));\r\n    }\r\n\r\n    _This.$Join = Join;\r\n\r\n    _This.$AddClass = function (elmt, className) {\r\n        ReplaceClass(elmt, null, className);\r\n    };\r\n\r\n    _This.$RemoveClass = ReplaceClass;\r\n\r\n    _This.$ReplaceClass = ReplaceClass;\r\n\r\n    _This.$ParentNode = function (elmt) {\r\n        return elmt.parentNode;\r\n    };\r\n\r\n    _This.$HideElement = function (elmt) {\r\n        _This.$CssDisplay(elmt, \"none\");\r\n    };\r\n\r\n    _This.$EnableElement = function (elmt, notEnable) {\r\n        if (notEnable) {\r\n            _This.$Attribute(elmt, \"disabled\", true);\r\n        }\r\n        else {\r\n            _This.$RemoveAttribute(elmt, \"disabled\");\r\n        }\r\n    };\r\n\r\n    _This.$HideElements = function (elmts) {\r\n        for (var i = 0; i < elmts.length; i++) {\r\n            _This.$HideElement(elmts[i]);\r\n        }\r\n    };\r\n\r\n    _This.$ShowElement = function (elmt, hide) {\r\n        _This.$CssDisplay(elmt, hide ? \"none\" : \"\");\r\n    };\r\n\r\n    _This.$ShowElements = function (elmts, hide) {\r\n        for (var i = 0; i < elmts.length; i++) {\r\n            _This.$ShowElement(elmts[i], hide);\r\n        }\r\n    };\r\n\r\n    _This.$RemoveAttribute = function (elmt, attrbuteName) {\r\n        elmt.removeAttribute(attrbuteName);\r\n    };\r\n\r\n    _This.$CanClearClip = function () {\r\n        return IsBrowserIE() && _BrowserRuntimeVersion < 10;\r\n    };\r\n\r\n    _This.$SetStyleClip = function (elmt, clip) {\r\n        if (clip) {\r\n            elmt.style.clip = \"rect(\" + Math.round(clip.$Top) + \"px \" + Math.round(clip.$Right) + \"px \" + Math.round(clip.$Bottom) + \"px \" + Math.round(clip.$Left) + \"px)\";\r\n        }\r\n        else {\r\n            var cssText = elmt.style.cssText;\r\n            var clipRegs = [\r\n                new RegExp(/[\\s]*clip: rect\\(.*?\\)[;]?/i),\r\n                new RegExp(/[\\s]*cliptop: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipright: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipbottom: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipleft: .*?[;]?/i)\r\n            ];\r\n\r\n            var newCssText = BuildNewCss(cssText, clipRegs, \"\");\r\n\r\n            $Jssor$.$CssCssText(elmt, newCssText);\r\n        }\r\n    };\r\n\r\n    _This.$GetNow = function () {\r\n        return new Date().getTime();\r\n    };\r\n\r\n    _This.$AppendChild = function (elmt, child) {\r\n        elmt.appendChild(child);\r\n    };\r\n\r\n    _This.$AppendChildren = function (elmt, children) {\r\n        Each(children, function (child) {\r\n            _This.$AppendChild(elmt, child);\r\n        });\r\n    };\r\n\r\n    _This.$InsertBefore = function (newNode, refNode, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tInsert a node before a reference node\r\n        ///\t</summary>\r\n        ///\t<param name=\"newNode\" type=\"HTMLElement\">\r\n        ///\t\tA new node to insert\r\n        ///\t</param>\r\n        ///\t<param name=\"refNode\" type=\"HTMLElement\">\r\n        ///\t\tThe reference node to insert a new node before\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to insert node to\r\n        ///\t</param>\r\n\r\n        (pNode || refNode.parentNode).insertBefore(newNode, refNode);\r\n    };\r\n\r\n    _This.$InsertAfter = function (newNode, refNode, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tInsert a node after a reference node\r\n        ///\t</summary>\r\n        ///\t<param name=\"newNode\" type=\"HTMLElement\">\r\n        ///\t\tA new node to insert\r\n        ///\t</param>\r\n        ///\t<param name=\"refNode\" type=\"HTMLElement\">\r\n        ///\t\tThe reference node to insert a new node after\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to insert node to\r\n        ///\t</param>\r\n\r\n        _This.$InsertBefore(newNode, refNode.nextSibling, pNode || refNode.parentNode);\r\n    };\r\n\r\n    _This.$InsertAdjacentHtml = function (elmt, where, html) {\r\n        elmt.insertAdjacentHTML(where, html);\r\n    };\r\n\r\n    _This.$RemoveElement = function (elmt, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tRemove element from parent node\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tThe element to remove\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to remove elment from\r\n        ///\t</param>\r\n        (pNode || elmt.parentNode).removeChild(elmt);\r\n    };\r\n\r\n    _This.$RemoveElements = function (elmts, pNode) {\r\n        Each(elmts, function (elmt) {\r\n            _This.$RemoveElement(elmt, pNode);\r\n        });\r\n    };\r\n\r\n    _This.$Empty = function (elmt) {\r\n        _This.$RemoveElements(_This.$Children(elmt, true), elmt);\r\n    };\r\n\r\n    _This.$ParseInt = function (str, radix) {\r\n        return parseInt(str, radix || 10);\r\n    };\r\n\r\n    var ParseFloat = parseFloat;\r\n\r\n    _This.$ParseFloat = ParseFloat;\r\n\r\n    _This.$IsChild = function (elmtA, elmtB) {\r\n        var body = document.body;\r\n\r\n        while (elmtB && elmtA !== elmtB && body !== elmtB) {\r\n            try {\r\n                elmtB = elmtB.parentNode;\r\n            } catch (e) {\r\n                // Firefox sometimes fires events for XUL elements, which throws\r\n                // a \"permission denied\" error. so this is not a child.\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return elmtA === elmtB;\r\n    };\r\n\r\n    function CloneNode(elmt, noDeep, keepId) {\r\n        var clone = elmt.cloneNode(!noDeep);\r\n        if (!keepId) {\r\n            _This.$RemoveAttribute(clone, \"id\");\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    _This.$CloneNode = CloneNode;\r\n\r\n    _This.$LoadImage = function (src, callback) {\r\n        var image = new Image();\r\n\r\n        function LoadImageCompleteHandler(event, abort) {\r\n            _This.$RemoveEvent(image, \"load\", LoadImageCompleteHandler);\r\n            _This.$RemoveEvent(image, \"abort\", ErrorOrAbortHandler);\r\n            _This.$RemoveEvent(image, \"error\", ErrorOrAbortHandler);\r\n\r\n            if (callback)\r\n                callback(image, abort);\r\n        }\r\n\r\n        function ErrorOrAbortHandler(event) {\r\n            LoadImageCompleteHandler(event, true);\r\n        }\r\n\r\n        if (IsBrowserOpera() && _BrowserRuntimeVersion < 11.6 || !src) {\r\n            LoadImageCompleteHandler(!src);\r\n        }\r\n        else {\r\n\r\n            _This.$AddEvent(image, \"load\", LoadImageCompleteHandler);\r\n            _This.$AddEvent(image, \"abort\", ErrorOrAbortHandler);\r\n            _This.$AddEvent(image, \"error\", ErrorOrAbortHandler);\r\n\r\n            image.src = src;\r\n        }\r\n    };\r\n\r\n    _This.$LoadImages = function (imageElmts, mainImageElmt, callback) {\r\n\r\n        var _ImageLoading = imageElmts.length + 1;\r\n\r\n        function LoadImageCompleteEventHandler(image, abort) {\r\n\r\n            _ImageLoading--;\r\n            if (mainImageElmt && image && image.src == mainImageElmt.src)\r\n                mainImageElmt = image;\r\n            !_ImageLoading && callback && callback(mainImageElmt);\r\n        }\r\n\r\n        Each(imageElmts, function (imageElmt) {\r\n            _This.$LoadImage(imageElmt.src, LoadImageCompleteEventHandler);\r\n        });\r\n\r\n        LoadImageCompleteEventHandler();\r\n    };\r\n\r\n    _This.$BuildElement = function (template, tagName, replacer, createCopy) {\r\n        if (createCopy)\r\n            template = CloneNode(template);\r\n\r\n        var templateHolders = FindChildren(template, tagName);\r\n        if (!templateHolders.length)\r\n            templateHolders = $Jssor$.$GetElementsByTag(template, tagName);\r\n\r\n        for (var j = templateHolders.length - 1; j > -1; j--) {\r\n            var templateHolder = templateHolders[j];\r\n            var replaceItem = CloneNode(replacer);\r\n            ClassName(replaceItem, ClassName(templateHolder));\r\n            $Jssor$.$CssCssText(replaceItem, templateHolder.style.cssText);\r\n\r\n            $Jssor$.$InsertBefore(replaceItem, templateHolder);\r\n            $Jssor$.$RemoveElement(templateHolder);\r\n        }\r\n\r\n        return template;\r\n    };\r\n\r\n    function JssorButtonEx(elmt) {\r\n        var _Self = this;\r\n\r\n        var _OriginClassName = \"\";\r\n        var _ToggleClassSuffixes = [\"av\", \"pv\", \"ds\", \"dn\"];\r\n        var _ToggleClasses = [];\r\n        var _ToggleClassName;\r\n\r\n        var _IsMouseDown = 0;   //class name 'dn'\r\n        var _IsSelected = 0;    //class name 1(active): 'av', 2(passive): 'pv'\r\n        var _IsDisabled = 0;    //class name 'ds'\r\n\r\n        function Highlight() {\r\n            ReplaceClass(elmt, _ToggleClassName, _ToggleClasses[_IsDisabled || _IsMouseDown || (_IsSelected & 2) || _IsSelected]);\r\n            $Jssor$.$Css(elmt, \"pointer-events\", _IsDisabled ? \"none\" : \"\");\r\n        }\r\n\r\n        function MouseUpOrCancelEventHandler(event) {\r\n            _IsMouseDown = 0;\r\n\r\n            Highlight();\r\n\r\n            _This.$RemoveEvent(document, \"mouseup\", MouseUpOrCancelEventHandler);\r\n            _This.$RemoveEvent(document, \"touchend\", MouseUpOrCancelEventHandler);\r\n            _This.$RemoveEvent(document, \"touchcancel\", MouseUpOrCancelEventHandler);\r\n        }\r\n\r\n        function MouseDownEventHandler(event) {\r\n            if (_IsDisabled) {\r\n                _This.$CancelEvent(event);\r\n            }\r\n            else {\r\n\r\n                _IsMouseDown = 4;\r\n\r\n                Highlight();\r\n\r\n                _This.$AddEvent(document, \"mouseup\", MouseUpOrCancelEventHandler);\r\n                _This.$AddEvent(document, \"touchend\", MouseUpOrCancelEventHandler);\r\n                _This.$AddEvent(document, \"touchcancel\", MouseUpOrCancelEventHandler);\r\n            }\r\n        }\r\n\r\n        _Self.$Selected = function (activate) {\r\n            if (activate != undefined) {\r\n                _IsSelected = (activate & 2) || (activate & 1);\r\n\r\n                Highlight();\r\n            }\r\n            else {\r\n                return _IsSelected;\r\n            }\r\n        };\r\n\r\n        _Self.$Enable = function (enable) {\r\n            if (enable == undefined) {\r\n                return !_IsDisabled;\r\n            }\r\n\r\n            _IsDisabled = enable ? 0 : 3;\r\n\r\n            Highlight();\r\n        };\r\n\r\n        //JssorButtonEx Constructor\r\n        {\r\n            elmt = _This.$GetElement(elmt);\r\n\r\n            var originalClassNameArray = $Jssor$.$Split(ClassName(elmt));\r\n            if (originalClassNameArray)\r\n                _OriginClassName = originalClassNameArray.shift();\r\n\r\n            Each(_ToggleClassSuffixes, function (toggleClassSuffix) {\r\n                _ToggleClasses.push(_OriginClassName +toggleClassSuffix);\r\n            });\r\n\r\n            _ToggleClassName = Join(\" \", _ToggleClasses);\r\n\r\n            _ToggleClasses.unshift(\"\");\r\n\r\n            _This.$AddEvent(elmt, \"mousedown\", MouseDownEventHandler);\r\n            _This.$AddEvent(elmt, \"touchstart\", MouseDownEventHandler);\r\n        }\r\n    }\r\n\r\n    _This.$Buttonize = function (elmt) {\r\n        return new JssorButtonEx(elmt);\r\n    };\r\n\r\n    _This.$Css = Css;\r\n    _This.$CssN = CssN;\r\n    _This.$CssP = CssP;\r\n\r\n    _This.$CssOverflow = CssProxy(\"overflow\");\r\n\r\n    _This.$CssTop = CssProxy(\"top\", 2);\r\n    _This.$CssLeft = CssProxy(\"left\", 2);\r\n    _This.$CssWidth = CssProxy(\"width\", 2);\r\n    _This.$CssHeight = CssProxy(\"height\", 2);\r\n    _This.$CssMarginLeft = CssProxy(\"marginLeft\", 2);\r\n    _This.$CssMarginTop = CssProxy(\"marginTop\", 2);\r\n    _This.$CssPosition = CssProxy(\"position\");\r\n    _This.$CssDisplay = CssProxy(\"display\");\r\n    _This.$CssZIndex = CssProxy(\"zIndex\", 1);\r\n    _This.$CssFloat = function (elmt, floatValue) {\r\n        return Css(elmt, IsBrowserIE() ? \"styleFloat\" : \"cssFloat\", floatValue);\r\n    };\r\n    _This.$CssOpacity = function (elmt, opacity, ie9EarlierForce) {\r\n        if (opacity != undefined) {\r\n            SetStyleOpacity(elmt, opacity, ie9EarlierForce);\r\n        }\r\n        else {\r\n            return GetStyleOpacity(elmt);\r\n        }\r\n    };\r\n\r\n    _This.$CssCssText = function (elmt, text) {\r\n        if (text != undefined) {\r\n            elmt.style.cssText = text;\r\n        }\r\n        else {\r\n            return elmt.style.cssText;\r\n        }\r\n    };\r\n\r\n    var _StyleGetter = {\r\n        $Opacity: _This.$CssOpacity,\r\n        $Top: _This.$CssTop,\r\n        $Left: _This.$CssLeft,\r\n        $Width: _This.$CssWidth,\r\n        $Height: _This.$CssHeight,\r\n        $Position: _This.$CssPosition,\r\n        $Display: _This.$CssDisplay,\r\n        $ZIndex: _This.$CssZIndex\r\n    };\r\n\r\n    var _StyleSetterReserved;\r\n\r\n    function StyleSetter() {\r\n        if (!_StyleSetterReserved) {\r\n            _StyleSetterReserved = Extend({\r\n                $MarginTop: _This.$CssMarginTop,\r\n                $MarginLeft: _This.$CssMarginLeft,\r\n                $Clip: _This.$SetStyleClip,\r\n                $Transform: _This.$SetStyleTransform\r\n            }, _StyleGetter);\r\n        }\r\n        return _StyleSetterReserved;\r\n    }\r\n\r\n    function StyleSetterEx() {\r\n        StyleSetter();\r\n\r\n        //For Compression Only\r\n        _StyleSetterReserved.$Transform = _StyleSetterReserved.$Transform;\r\n\r\n        return _StyleSetterReserved;\r\n    }\r\n\r\n    _This.$StyleSetter = StyleSetter;\r\n\r\n    _This.$StyleSetterEx = StyleSetterEx;\r\n\r\n    _This.$GetStyles = function (elmt, originStyles) {\r\n        StyleSetter();\r\n\r\n        var styles = {};\r\n\r\n        Each(originStyles, function (value, key) {\r\n            if (_StyleGetter[key]) {\r\n                styles[key] = _StyleGetter[key](elmt);\r\n            }\r\n        });\r\n\r\n        return styles;\r\n    };\r\n\r\n    _This.$SetStyles = function (elmt, styles) {\r\n        var styleSetter = StyleSetter();\r\n\r\n        Each(styles, function (value, key) {\r\n            styleSetter[key] && styleSetter[key](elmt, value);\r\n        });\r\n    };\r\n\r\n    _This.$SetStylesEx = function (elmt, styles) {\r\n        StyleSetterEx();\r\n\r\n        _This.$SetStyles(elmt, styles);\r\n    };\r\n\r\n    var $JssorMatrix$ = new function () {\r\n        var _ThisMatrix = this;\r\n\r\n        function Multiply(ma, mb) {\r\n            var acs = ma[0].length;\r\n            var rows = ma.length;\r\n            var cols = mb[0].length;\r\n\r\n            var matrix = [];\r\n\r\n            for (var r = 0; r < rows; r++) {\r\n                var row = matrix[r] = [];\r\n                for (var c = 0; c < cols; c++) {\r\n                    var unitValue = 0;\r\n\r\n                    for (var ac = 0; ac < acs; ac++) {\r\n                        unitValue += ma[r][ac] * mb[ac][c];\r\n                    }\r\n\r\n                    row[c] = unitValue;\r\n                }\r\n            }\r\n\r\n            return matrix;\r\n        }\r\n\r\n        _ThisMatrix.$ScaleX = function (matrix, sx) {\r\n            return _ThisMatrix.$ScaleXY(matrix, sx, 0);\r\n        };\r\n\r\n        _ThisMatrix.$ScaleY = function (matrix, sy) {\r\n            return _ThisMatrix.$ScaleXY(matrix, 0, sy);\r\n        };\r\n\r\n        _ThisMatrix.$ScaleXY = function (matrix, sx, sy) {\r\n            return Multiply(matrix, [[sx, 0], [0, sy]]);\r\n        };\r\n\r\n        _ThisMatrix.$TransformPoint = function (matrix, p) {\r\n            var pMatrix = Multiply(matrix, [[p.x], [p.y]]);\r\n\r\n            return Point(pMatrix[0][0], pMatrix[1][0]);\r\n        };\r\n    };\r\n\r\n    _This.$CreateMatrix = function (alpha, scaleX, scaleY) {\r\n        var cos = Math.cos(alpha);\r\n        var sin = Math.sin(alpha);\r\n        //var r11 = cos;\r\n        //var r21 = sin;\r\n        //var r12 = -sin;\r\n        //var r22 = cos;\r\n\r\n        //var m11 = cos * scaleX;\r\n        //var m12 = -sin * scaleY;\r\n        //var m21 = sin * scaleX;\r\n        //var m22 = cos * scaleY;\r\n\r\n        return [[cos * scaleX, -sin * scaleY], [sin * scaleX, cos * scaleY]];\r\n    };\r\n\r\n    _This.$GetMatrixOffset = function (matrix, width, height) {\r\n        var p1 = $JssorMatrix$.$TransformPoint(matrix, Point(-width / 2, -height / 2));\r\n        var p2 = $JssorMatrix$.$TransformPoint(matrix, Point(width / 2, -height / 2));\r\n        var p3 = $JssorMatrix$.$TransformPoint(matrix, Point(width / 2, height / 2));\r\n        var p4 = $JssorMatrix$.$TransformPoint(matrix, Point(-width / 2, height / 2));\r\n\r\n        return Point(Math.min(p1.x, p2.x, p3.x, p4.x) + width / 2, Math.min(p1.y, p2.y, p3.y, p4.y) + height / 2);\r\n    };\r\n\r\n    _This.$Cast = function (fromStyles, difStyles, interPosition, easings, durings, rounds, options) {\r\n\r\n        var currentStyles = difStyles;\r\n\r\n        if (fromStyles) {\r\n            currentStyles = {};\r\n\r\n            for (var key in difStyles) {\r\n\r\n                var round = rounds[key] || 1;\r\n                var during = durings[key] || [0, 1];\r\n                var propertyInterPosition = (interPosition - during[0]) / during[1];\r\n                propertyInterPosition = Math.min(Math.max(propertyInterPosition, 0), 1);\r\n                propertyInterPosition = propertyInterPosition * round;\r\n                var floorPosition = Math.floor(propertyInterPosition);\r\n                if (propertyInterPosition != floorPosition)\r\n                    propertyInterPosition -= floorPosition;\r\n\r\n                var easing = easings[key] || easings.$Default || $JssorEasing$.$EaseSwing;\r\n                var easingValue = easing(propertyInterPosition);\r\n                var currentPropertyValue;\r\n                var value = fromStyles[key];\r\n                var toValue = difStyles[key];\r\n                var difValue = difStyles[key];\r\n\r\n                if ($Jssor$.$IsNumeric(difValue)) {\r\n                    currentPropertyValue = value + difValue * easingValue;\r\n                }\r\n                else {\r\n                    currentPropertyValue = $Jssor$.$Extend({ $Offset: {} }, fromStyles[key]);\r\n\r\n                    $Jssor$.$Each(difValue.$Offset, function (rectX, n) {\r\n                        var offsetValue = rectX * easingValue;\r\n                        currentPropertyValue.$Offset[n] = offsetValue;\r\n                        currentPropertyValue[n] += offsetValue;\r\n                    });\r\n                }\r\n                currentStyles[key] = currentPropertyValue;\r\n            }\r\n\r\n            if (difStyles.$Zoom || difStyles.$Rotate) {\r\n                currentStyles.$Transform = { $Rotate: currentStyles.$Rotate || 0, $Scale: currentStyles.$Zoom, $OriginalWidth: options.$OriginalWidth, $OriginalHeight: options.$OriginalHeight };\r\n            }\r\n        }\r\n\r\n        if (difStyles.$Clip && options.$Move) {\r\n            var styleFrameNClipOffset = currentStyles.$Clip.$Offset;\r\n\r\n            var offsetY = (styleFrameNClipOffset.$Top || 0) + (styleFrameNClipOffset.$Bottom || 0);\r\n            var offsetX = (styleFrameNClipOffset.$Left || 0) + (styleFrameNClipOffset.$Right || 0);\r\n\r\n            currentStyles.$Left = (currentStyles.$Left || 0) + offsetX;\r\n            currentStyles.$Top = (currentStyles.$Top || 0) + offsetY;\r\n            currentStyles.$Clip.$Left -= offsetX;\r\n            currentStyles.$Clip.$Right -= offsetX;\r\n            currentStyles.$Clip.$Top -= offsetY;\r\n            currentStyles.$Clip.$Bottom -= offsetY;\r\n        }\r\n\r\n        if (currentStyles.$Clip && $Jssor$.$CanClearClip() && !currentStyles.$Clip.$Top && !currentStyles.$Clip.$Left && (currentStyles.$Clip.$Right == options.$OriginalWidth) && (currentStyles.$Clip.$Bottom == options.$OriginalHeight))\r\n            currentStyles.$Clip = null;\r\n\r\n        return currentStyles;\r\n    };\r\n};\r\n\r\n//$JssorObject$\r\nfunction $JssorObject$() {\r\n    var _ThisObject = this;\r\n    // Fields\r\n\r\n    var _Listeners = []; // dictionary of eventName --> array of handlers\r\n    var _Listenees = [];\r\n\r\n    // Private Methods\r\n    function AddListener(eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n\r\n            $Jssor$.$Each(_Listeners, function (listener) {\r\n                if (listener.$EventName == eventName && listener.$Handler === handler) {\r\n                    throw new Error(\"The handler listened to the event already, cannot listen to the same event of the same object with the same handler twice.\");\r\n                }\r\n            });\r\n        });\r\n\r\n        _Listeners.push({ $EventName: eventName, $Handler: handler });\r\n    }\r\n\r\n    function RemoveListener(eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n        });\r\n\r\n        $Jssor$.$Each(_Listeners, function (listener, index) {\r\n            if (listener.$EventName == eventName && listener.$Handler === handler) {\r\n                _Listeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    function ClearListeners() {\r\n        _Listeners = [];\r\n    }\r\n\r\n    function ClearListenees() {\r\n\r\n        $Jssor$.$Each(_Listenees, function (listenee) {\r\n            $Jssor$.$RemoveEvent(listenee.$Obj, listenee.$EventName, listenee.$Handler);\r\n        });\r\n\r\n        _Listenees = [];\r\n    }\r\n\r\n    //Protected Methods\r\n    _ThisObject.$Listen = function (obj, eventName, handler, useCapture) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!obj)\r\n                throw new Error(\"param 'obj' is null or empty.\");\r\n\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n\r\n            $Jssor$.$Each(_Listenees, function (listenee) {\r\n                if (listenee.$Obj === obj && listenee.$EventName == eventName && listenee.$Handler === handler) {\r\n                    throw new Error(\"The handler listened to the event already, cannot listen to the same event of the same object with the same handler twice.\");\r\n                }\r\n            });\r\n        });\r\n\r\n        $Jssor$.$AddEvent(obj, eventName, handler, useCapture);\r\n        _Listenees.push({ $Obj: obj, $EventName: eventName, $Handler: handler });\r\n    };\r\n\r\n    _ThisObject.$Unlisten = function (obj, eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!obj)\r\n                throw new Error(\"param 'obj' is null or empty.\");\r\n\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n        });\r\n\r\n        $Jssor$.$Each(_Listenees, function (listenee, index) {\r\n            if (listenee.$Obj === obj && listenee.$EventName == eventName && listenee.$Handler === handler) {\r\n                $Jssor$.$RemoveEvent(obj, eventName, handler);\r\n                _Listenees.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n\r\n    _ThisObject.$UnlistenAll = ClearListenees;\r\n\r\n    // Public Methods\r\n    _ThisObject.$On = _ThisObject.addEventListener = AddListener;\r\n\r\n    _ThisObject.$Off = _ThisObject.removeEventListener = RemoveListener;\r\n\r\n    _ThisObject.$TriggerEvent = function (eventName) {\r\n\r\n        var args = [].slice.call(arguments, 1);\r\n\r\n        $Jssor$.$Each(_Listeners, function (listener) {\r\n            listener.$EventName == eventName && listener.$Handler.apply(window, args);\r\n        });\r\n    };\r\n\r\n    _ThisObject.$Destroy = function () {\r\n        ClearListenees();\r\n        ClearListeners();\r\n\r\n        for (var name in _ThisObject)\r\n            delete _ThisObject[name];\r\n    };\r\n\r\n    $JssorDebug$.$C_AbstractClass(_ThisObject);\r\n};\r\n\r\nfunction $JssorAnimator$(delay, duration, options, elmt, fromStyles, difStyles) {\r\n    delay = delay || 0;\r\n\r\n    var _ThisAnimator = this;\r\n    var _AutoPlay;\r\n    var _Hiden;\r\n    var _CombineMode;\r\n    var _PlayToPosition;\r\n    var _PlayDirection;\r\n    var _NoStop;\r\n    var _TimeStampLastFrame = 0;\r\n\r\n    var _SubEasings;\r\n    var _SubRounds;\r\n    var _SubDurings;\r\n    var _Callback;\r\n\r\n    var _Shift = 0;\r\n    var _Position_Current = 0;\r\n    var _Position_Display = 0;\r\n    var _Hooked;\r\n\r\n    var _Position_InnerBegin = delay;\r\n    var _Position_InnerEnd = delay + duration;\r\n    var _Position_OuterBegin;\r\n    var _Position_OuterEnd;\r\n    var _LoopLength;\r\n\r\n    var _NestedAnimators = [];\r\n    var _StyleSetter;\r\n\r\n    function GetPositionRange(position, begin, end) {\r\n        var range = 0;\r\n\r\n        if (position < begin)\r\n            range = -1;\r\n\r\n        else if (position > end)\r\n            range = 1;\r\n\r\n        return range;\r\n    }\r\n\r\n    function GetInnerPositionRange(position) {\r\n        return GetPositionRange(position, _Position_InnerBegin, _Position_InnerEnd);\r\n    }\r\n\r\n    function GetOuterPositionRange(position) {\r\n        return GetPositionRange(position, _Position_OuterBegin, _Position_OuterEnd);\r\n    }\r\n\r\n    function Shift(offset) {\r\n        _Position_OuterBegin += offset;\r\n        _Position_OuterEnd += offset;\r\n        _Position_InnerBegin += offset;\r\n        _Position_InnerEnd += offset;\r\n\r\n        _Position_Current += offset;\r\n        _Position_Display += offset;\r\n\r\n        _Shift = offset;\r\n    }\r\n\r\n    function Locate(position, relative) {\r\n        var offset = position - _Position_OuterBegin + delay * relative;\r\n\r\n        Shift(offset);\r\n\r\n        //$JssorDebug$.$Execute(function () {\r\n        //    _ThisAnimator.$Position_InnerBegin = _Position_InnerBegin;\r\n        //    _ThisAnimator.$Position_InnerEnd = _Position_InnerEnd;\r\n        //    _ThisAnimator.$Position_OuterBegin = _Position_OuterBegin;\r\n        //    _ThisAnimator.$Position_OuterEnd = _Position_OuterEnd;\r\n        //});\r\n\r\n        return _Position_OuterEnd;\r\n    }\r\n\r\n    function GoToPosition(positionOuter, force) {\r\n        var trimedPositionOuter = positionOuter;\r\n\r\n        if (_LoopLength && (trimedPositionOuter >= _Position_OuterEnd || trimedPositionOuter <= _Position_OuterBegin)) {\r\n            trimedPositionOuter = ((trimedPositionOuter - _Position_OuterBegin) % _LoopLength + _LoopLength) % _LoopLength + _Position_OuterBegin;\r\n        }\r\n\r\n        if (!_Hooked || _NoStop || force || _Position_Current != trimedPositionOuter) {\r\n\r\n            var positionToDisplay = Math.min(trimedPositionOuter, _Position_OuterEnd);\r\n            positionToDisplay = Math.max(positionToDisplay, _Position_OuterBegin);\r\n\r\n            if (!_Hooked || _NoStop || force || positionToDisplay != _Position_Display) {\r\n\r\n                if (difStyles) {\r\n\r\n                    var interPosition = (positionToDisplay - _Position_InnerBegin) / (duration || 1);\r\n\r\n                    if (options.$Reverse)\r\n                        interPosition = 1 - interPosition;\r\n\r\n                    var currentStyles = $Jssor$.$Cast(fromStyles, difStyles, interPosition, _SubEasings, _SubDurings, _SubRounds, options);\r\n\r\n                    $Jssor$.$Each(currentStyles, function (value, key) {\r\n                        _StyleSetter[key] && _StyleSetter[key](elmt, value);\r\n                    });\r\n                }\r\n\r\n                _ThisAnimator.$OnInnerOffsetChange(_Position_Display - _Position_InnerBegin, positionToDisplay - _Position_InnerBegin);\r\n\r\n                _Position_Display = positionToDisplay;\r\n\r\n                $Jssor$.$Each(_NestedAnimators, function (animator, i) {\r\n                    var nestedAnimator = positionOuter < _Position_Current ? _NestedAnimators[_NestedAnimators.length - i - 1] : animator;\r\n                    nestedAnimator.$GoToPosition(_Position_Display - _Shift, force);\r\n                });\r\n\r\n                var positionOld = _Position_Current;\r\n                var positionNew = _Position_Display;\r\n\r\n                _Position_Current = trimedPositionOuter;\r\n                _Hooked = true;\r\n\r\n                _ThisAnimator.$OnPositionChange(positionOld, positionNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function Join(animator, combineMode, noExpand) {\r\n        ///\t<summary>\r\n        ///\t\tCombine another animator as nested animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        ///\t<param name=\"combineMode\" type=\"int\">\r\n        ///\t\t0: parallel - place the animator parallel to this animator.\r\n        ///\t\t1: chain - chain the animator at the _Position_InnerEnd of this animator.\r\n        ///\t</param>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (combineMode !== 0 && combineMode !== 1)\r\n                $JssorDebug$.$Fail(\"Argument out of range, the value of 'combineMode' should be either 0 or 1.\");\r\n        });\r\n\r\n        if (combineMode)\r\n            animator.$Locate(_Position_OuterEnd, 1);\r\n\r\n        if (!noExpand) {\r\n            _Position_OuterBegin = Math.min(_Position_OuterBegin, animator.$GetPosition_OuterBegin() + _Shift);\r\n            _Position_OuterEnd = Math.max(_Position_OuterEnd, animator.$GetPosition_OuterEnd() + _Shift);\r\n        }\r\n        _NestedAnimators.push(animator);\r\n    }\r\n\r\n    var RequestAnimationFrame = window.requestAnimationFrame\r\n    || window.webkitRequestAnimationFrame\r\n    || window.mozRequestAnimationFrame\r\n    || window.msRequestAnimationFrame;\r\n\r\n    if ($Jssor$.$IsBrowserSafari() && $Jssor$.$BrowserVersion() < 7) {\r\n        RequestAnimationFrame = null;\r\n\r\n        //$JssorDebug$.$Log(\"Custom animation frame for safari before 7.\");\r\n    }\r\n\r\n    RequestAnimationFrame = RequestAnimationFrame || function (callback) {\r\n        $Jssor$.$Delay(callback, options.$Interval);\r\n    };\r\n\r\n    function ShowFrame() {\r\n        if (_AutoPlay) {\r\n            var now = $Jssor$.$GetNow();\r\n            var timeOffset = Math.min(now - _TimeStampLastFrame, options.$IntervalMax);\r\n            var timePosition = _Position_Current + timeOffset * _PlayDirection;\r\n            _TimeStampLastFrame = now;\r\n\r\n            if (timePosition * _PlayDirection >= _PlayToPosition * _PlayDirection)\r\n                timePosition = _PlayToPosition;\r\n\r\n            GoToPosition(timePosition);\r\n\r\n            if (!_NoStop && timePosition * _PlayDirection >= _PlayToPosition * _PlayDirection) {\r\n                Stop(_Callback);\r\n            }\r\n            else {\r\n                RequestAnimationFrame(ShowFrame);\r\n            }\r\n        }\r\n    }\r\n\r\n    function PlayToPosition(toPosition, callback, noStop) {\r\n        if (!_AutoPlay) {\r\n            _AutoPlay = true;\r\n            _NoStop = noStop\r\n            _Callback = callback;\r\n            toPosition = Math.max(toPosition, _Position_OuterBegin);\r\n            toPosition = Math.min(toPosition, _Position_OuterEnd);\r\n            _PlayToPosition = toPosition;\r\n            _PlayDirection = _PlayToPosition < _Position_Current ? -1 : 1;\r\n            _ThisAnimator.$OnStart();\r\n            _TimeStampLastFrame = $Jssor$.$GetNow();\r\n            RequestAnimationFrame(ShowFrame);\r\n        }\r\n    }\r\n\r\n    function Stop(callback) {\r\n        if (_AutoPlay) {\r\n            _NoStop = _AutoPlay = _Callback = false;\r\n            _ThisAnimator.$OnStop();\r\n\r\n            if (callback)\r\n                callback();\r\n        }\r\n    }\r\n\r\n    _ThisAnimator.$Play = function (positionLength, callback, noStop) {\r\n        PlayToPosition(positionLength ? _Position_Current + positionLength : _Position_OuterEnd, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$PlayToPosition = PlayToPosition;\r\n\r\n    _ThisAnimator.$PlayToBegin = function (callback, noStop) {\r\n        PlayToPosition(_Position_OuterBegin, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$PlayToEnd = function (callback, noStop) {\r\n        PlayToPosition(_Position_OuterEnd, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$Stop = Stop;\r\n\r\n    _ThisAnimator.$Continue = function (toPosition) {\r\n        PlayToPosition(toPosition);\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition = function () {\r\n        return _Position_Current;\r\n    };\r\n\r\n    _ThisAnimator.$GetPlayToPosition = function () {\r\n        return _PlayToPosition;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_Display = function () {\r\n        return _Position_Display;\r\n    };\r\n\r\n    _ThisAnimator.$GoToPosition = GoToPosition;\r\n\r\n    _ThisAnimator.$GoToBegin = function () {\r\n        GoToPosition(_Position_OuterBegin, true);\r\n    };\r\n\r\n    _ThisAnimator.$GoToEnd = function () {\r\n        GoToPosition(_Position_OuterEnd, true);\r\n    };\r\n\r\n    _ThisAnimator.$Move = function (offset) {\r\n        GoToPosition(_Position_Current + offset);\r\n    };\r\n\r\n    _ThisAnimator.$CombineMode = function () {\r\n        return _CombineMode;\r\n    };\r\n\r\n    _ThisAnimator.$GetDuration = function () {\r\n        return duration;\r\n    };\r\n\r\n    _ThisAnimator.$IsPlaying = function () {\r\n        return _AutoPlay;\r\n    };\r\n\r\n    _ThisAnimator.$IsOnTheWay = function () {\r\n        return _Position_Current > _Position_InnerBegin && _Position_Current <= _Position_InnerEnd;\r\n    };\r\n\r\n    _ThisAnimator.$SetLoopLength = function (length) {\r\n        _LoopLength = length;\r\n    };\r\n\r\n    _ThisAnimator.$Locate = Locate;\r\n\r\n    _ThisAnimator.$Shift = Shift;\r\n\r\n    _ThisAnimator.$Join = Join;\r\n\r\n    _ThisAnimator.$Combine = function (animator) {\r\n        ///\t<summary>\r\n        ///\t\tCombine another animator parallel to this animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        Join(animator, 0);\r\n    };\r\n\r\n    _ThisAnimator.$Chain = function (animator) {\r\n        ///\t<summary>\r\n        ///\t\tChain another animator at the _Position_InnerEnd of this animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        Join(animator, 1);\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_InnerBegin = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_InnerBegin;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_InnerEnd = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_InnerEnd;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_OuterBegin = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_OuterBegin;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_OuterEnd = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_OuterEnd;\r\n    };\r\n\r\n    _ThisAnimator.$OnPositionChange = _ThisAnimator.$OnStart = _ThisAnimator.$OnStop = _ThisAnimator.$OnInnerOffsetChange = $Jssor$.$EmptyFunction;\r\n    _ThisAnimator.$Version = $Jssor$.$GetNow();\r\n\r\n    //Constructor  1\r\n    {\r\n        options = $Jssor$.$Extend({\r\n            $Interval: 16,\r\n            $IntervalMax: 50\r\n        }, options);\r\n\r\n        //Sodo statement, for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            options = $Jssor$.$Extend({\r\n                $LoopLength: undefined,\r\n                $Setter: undefined,\r\n                $Easing: undefined\r\n            }, options);\r\n        });\r\n\r\n        _LoopLength = options.$LoopLength;\r\n\r\n        _StyleSetter = $Jssor$.$Extend({}, $Jssor$.$StyleSetter(), options.$Setter);\r\n\r\n        _Position_OuterBegin = _Position_InnerBegin = delay;\r\n        _Position_OuterEnd = _Position_InnerEnd = delay + duration;\r\n\r\n        _SubRounds = options.$Round || {};\r\n        _SubDurings = options.$During || {};\r\n        _SubEasings = $Jssor$.$Extend({ $Default: $Jssor$.$IsFunction(options.$Easing) && options.$Easing || $JssorEasing$.$EaseSwing }, options.$Easing);\r\n    }\r\n};\r\n\r\nfunction $JssorPlayerClass$() {\r\n\r\n    var _ThisPlayer = this;\r\n    var _PlayerControllers = [];\r\n\r\n    function PlayerController(playerElement) {\r\n        var _SelfPlayerController = this;\r\n        var _PlayerInstance;\r\n        var _PlayerInstantces = [];\r\n\r\n        function OnPlayerInstanceDataAvailable(event) {\r\n            var srcElement = $Jssor$.$EvtSrc(event);\r\n            _PlayerInstance = srcElement.pInstance;\r\n\r\n            $Jssor$.$RemoveEvent(srcElement, \"dataavailable\", OnPlayerInstanceDataAvailable);\r\n            $Jssor$.$Each(_PlayerInstantces, function (playerInstance) {\r\n                if (playerInstance != _PlayerInstance) {\r\n                    playerInstance.$Remove();\r\n                }\r\n            });\r\n\r\n            playerElement.pTagName = _PlayerInstance.tagName;\r\n            _PlayerInstantces = null;\r\n        }\r\n\r\n        function HandlePlayerInstance(playerInstanceElement) {\r\n            var playerHandler;\r\n\r\n            if (!playerInstanceElement.pInstance) {\r\n                var playerHandlerAttribute = $Jssor$.$AttributeEx(playerInstanceElement, \"pHandler\");\r\n\r\n                if ($JssorPlayer$[playerHandlerAttribute]) {\r\n                    $Jssor$.$AddEvent(playerInstanceElement, \"dataavailable\", OnPlayerInstanceDataAvailable);\r\n                    playerHandler = new $JssorPlayer$[playerHandlerAttribute](playerElement, playerInstanceElement);\r\n                    _PlayerInstantces.push(playerHandler);\r\n\r\n                    $JssorDebug$.$Execute(function () {\r\n                        if ($Jssor$.$Type(playerHandler.$Remove) != \"function\") {\r\n                            $JssorDebug$.$Fail(\"'pRemove' interface not implemented for player handler '\" + playerHandlerAttribute + \"'.\");\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return playerHandler;\r\n        }\r\n\r\n        _SelfPlayerController.$InitPlayerController = function () {\r\n            if (!playerElement.pInstance && !HandlePlayerInstance(playerElement)) {\r\n\r\n                var playerInstanceElements = $Jssor$.$Children(playerElement);\r\n\r\n                $Jssor$.$Each(playerInstanceElements, function (playerInstanceElement) {\r\n                    HandlePlayerInstance(playerInstanceElement);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    _ThisPlayer.$EVT_SWITCH = 21;\r\n\r\n    _ThisPlayer.$FetchPlayers = function (elmt) {\r\n        elmt = elmt || document.body;\r\n\r\n        var playerElements = $Jssor$.$FindChildren(elmt, \"player\");\r\n\r\n        $Jssor$.$Each(playerElements, function (playerElement) {\r\n            if (!_PlayerControllers[playerElement.pId]) {\r\n                playerElement.pId = _PlayerControllers.length;\r\n                _PlayerControllers.push(new PlayerController(playerElement));\r\n            }\r\n            var playerController = _PlayerControllers[playerElement.pId];\r\n            playerController.$InitPlayerController();\r\n        });\r\n    };\r\n}\r\n\r\n/// <reference path=\"Jssor.js\" />\r\n\r\n/*\r\n* Jssor.Slider 19.0\r\n* http://www.jssor.com/\r\n*\r\n* Licensed under the MIT license:\r\n* http://www.opensource.org/licenses/MIT\r\n* \r\n* TERMS OF USE - Jssor.Slider\r\n* \r\n* Copyright 2014 Jssor\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining\r\n* a copy of this software and associated documentation files (the\r\n* \"Software\"), to deal in the Software without restriction, including\r\n* without limitation the rights to use, copy, modify, merge, publish,\r\n* distribute, sublicense, and/or sell copies of the Software, and to\r\n* permit persons to whom the Software is furnished to do so, subject to\r\n* the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n\r\nvar $JssorSlideshowFormations$ = window.$JssorSlideshowFormations$ = new function () {\r\n    var _This = this;\r\n\r\n    //Constants +++++++\r\n\r\n    var COLUMN_INCREASE = 0;\r\n    var COLUMN_DECREASE = 1;\r\n    var ROW_INCREASE = 2;\r\n    var ROW_DECREASE = 3;\r\n\r\n    var DIRECTION_HORIZONTAL = 0x0003;\r\n    var DIRECTION_VERTICAL = 0x000C;\r\n\r\n    var TO_LEFT = 0x0001;\r\n    var TO_RIGHT = 0x0002;\r\n    var TO_TOP = 0x0004;\r\n    var TO_BOTTOM = 0x0008;\r\n\r\n    var FROM_LEFT = 0x0100;\r\n    var FROM_TOP = 0x0200;\r\n    var FROM_RIGHT = 0x0400;\r\n    var FROM_BOTTOM = 0x0800;\r\n\r\n    var ASSEMBLY_BOTTOM_LEFT = FROM_BOTTOM + TO_LEFT;\r\n    var ASSEMBLY_BOTTOM_RIGHT = FROM_BOTTOM + TO_RIGHT;\r\n    var ASSEMBLY_TOP_LEFT = FROM_TOP + TO_LEFT;\r\n    var ASSEMBLY_TOP_RIGHT = FROM_TOP + TO_RIGHT;\r\n    var ASSEMBLY_LEFT_TOP = FROM_LEFT + TO_TOP;\r\n    var ASSEMBLY_LEFT_BOTTOM = FROM_LEFT + TO_BOTTOM;\r\n    var ASSEMBLY_RIGHT_TOP = FROM_RIGHT + TO_TOP;\r\n    var ASSEMBLY_RIGHT_BOTTOM = FROM_RIGHT + TO_BOTTOM;\r\n\r\n    //Constants -------\r\n\r\n    //Formation Definition +++++++\r\n    function isToLeft(roadValue) {\r\n        return (roadValue & TO_LEFT) == TO_LEFT;\r\n    }\r\n\r\n    function isToRight(roadValue) {\r\n        return (roadValue & TO_RIGHT) == TO_RIGHT;\r\n    }\r\n\r\n    function isToTop(roadValue) {\r\n        return (roadValue & TO_TOP) == TO_TOP;\r\n    }\r\n\r\n    function isToBottom(roadValue) {\r\n        return (roadValue & TO_BOTTOM) == TO_BOTTOM;\r\n    }\r\n\r\n    function PushFormationOrder(arr, order, formationItem) {\r\n        formationItem.push(order);\r\n        arr[order] = arr[order] || [];\r\n        arr[order].push(formationItem);\r\n    }\r\n\r\n    _This.$FormationStraight = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var order;\r\n        for (r = 0; r < rows; r++) {\r\n            for (col = 0; col < cols; col++) {\r\n                cr = r + ',' + col;\r\n                switch (formationDirection) {\r\n                    case ASSEMBLY_BOTTOM_LEFT:\r\n                        order = il - (col * rows + (rl - r));\r\n                        break;\r\n                    case ASSEMBLY_RIGHT_TOP:\r\n                        order = il - (r * cols + (cl - col));\r\n                        break;\r\n                    case ASSEMBLY_TOP_LEFT:\r\n                        order = il - (col * rows + r);\r\n                    case ASSEMBLY_LEFT_TOP:\r\n                        order = il - (r * cols + col);\r\n                        break;\r\n                    case ASSEMBLY_BOTTOM_RIGHT:\r\n                        order = col * rows + r;\r\n                        break;\r\n                    case ASSEMBLY_LEFT_BOTTOM:\r\n                        order = r * cols + (cl - col);\r\n                        break;\r\n                    case ASSEMBLY_TOP_RIGHT:\r\n                        order = col * rows + (rl - r);\r\n                        break;\r\n                    default:\r\n                        order = r * cols + col;\r\n                        break; //ASSEMBLY_RIGHT_BOTTOM\r\n                }\r\n                PushFormationOrder(a, order, [r, col]);\r\n            }\r\n        }\r\n\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationSwirl = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var hit = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var courses;\r\n        var course = 0;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_RIGHT_TOP:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_LEFT:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_TOP:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_RIGHT:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE];\r\n                break;\r\n            default:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE];\r\n                break; //ASSEMBLY_RIGHT_BOTTOM\r\n        }\r\n        i = 0;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (col >= 0 && col < cols && r >= 0 && r < rows && !hit[cr]) {\r\n                //a[cr] = i++;\r\n                hit[cr] = true;\r\n                PushFormationOrder(a, i++, [r, col]);\r\n            }\r\n            else {\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r--;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r++;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            switch (courses[course % courses.length]) {\r\n                case COLUMN_INCREASE:\r\n                    col++;\r\n                    break;\r\n                case ROW_INCREASE:\r\n                    r++;\r\n                    break;\r\n                case COLUMN_DECREASE:\r\n                    col--;\r\n                    break;\r\n                case ROW_DECREASE:\r\n                    r--;\r\n                    break;\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationZigZag = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var courses;\r\n        var course = 0;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_RIGHT_TOP:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_LEFT:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_TOP:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_RIGHT:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE, COLUMN_INCREASE];\r\n                break;\r\n            default:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE, ROW_INCREASE];\r\n                break; //ASSEMBLY_RIGHT_BOTTOM\r\n        }\r\n        i = 0;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (col >= 0 && col < cols && r >= 0 && r < rows && typeof (a[cr]) == 'undefined') {\r\n                PushFormationOrder(a, i++, [r, col]);\r\n                //a[cr] = i++;\r\n                switch (courses[course % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r++;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r--;\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r--;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r++;\r\n                        break;\r\n                }\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r++;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r--;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationStraightStairs = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n            case ASSEMBLY_TOP_RIGHT:\r\n            case ASSEMBLY_TOP_LEFT:\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                var C = 0;\r\n                var R = 0;\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n            case ASSEMBLY_RIGHT_TOP:\r\n            case ASSEMBLY_LEFT_TOP:\r\n            case ASSEMBLY_RIGHT_BOTTOM:\r\n                var C = cl;\r\n                var R = 0;\r\n                break;\r\n            default:\r\n                formationDirection = ASSEMBLY_RIGHT_BOTTOM;\r\n                var C = cl;\r\n                var R = 0;\r\n                break;\r\n        }\r\n        col = C;\r\n        r = R;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (isToTop(formationDirection) || isToRight(formationDirection)) {\r\n                PushFormationOrder(a, il - i++, [r, col]);\r\n                //a[cr] = il - i++;\r\n            }\r\n            else {\r\n                PushFormationOrder(a, i++, [r, col]);\r\n                //a[cr] = i++;\r\n            }\r\n            switch (formationDirection) {\r\n                case ASSEMBLY_BOTTOM_LEFT:\r\n                case ASSEMBLY_TOP_RIGHT:\r\n                    col--;\r\n                    r++;\r\n                    break;\r\n                case ASSEMBLY_TOP_LEFT:\r\n                case ASSEMBLY_BOTTOM_RIGHT:\r\n                    col++;\r\n                    r--;\r\n                    break;\r\n                case ASSEMBLY_LEFT_BOTTOM:\r\n                case ASSEMBLY_RIGHT_TOP:\r\n                    col--;\r\n                    r--;\r\n                    break;\r\n                case ASSEMBLY_RIGHT_BOTTOM:\r\n                case ASSEMBLY_LEFT_TOP:\r\n                default:\r\n                    col++;\r\n                    r++;\r\n                    break;\r\n            }\r\n            if (col < 0 || r < 0 || col > cl || r > rl) {\r\n                switch (formationDirection) {\r\n                    case ASSEMBLY_BOTTOM_LEFT:\r\n                    case ASSEMBLY_TOP_RIGHT:\r\n                        C++;\r\n                        break;\r\n                    case ASSEMBLY_LEFT_BOTTOM:\r\n                    case ASSEMBLY_RIGHT_TOP:\r\n                    case ASSEMBLY_TOP_LEFT:\r\n                    case ASSEMBLY_BOTTOM_RIGHT:\r\n                        R++;\r\n                        break;\r\n                    case ASSEMBLY_RIGHT_BOTTOM:\r\n                    case ASSEMBLY_LEFT_TOP:\r\n                    default:\r\n                        C--;\r\n                        break;\r\n                }\r\n                if (C < 0 || R < 0 || C > cl || R > rl) {\r\n                    switch (formationDirection) {\r\n                        case ASSEMBLY_BOTTOM_LEFT:\r\n                        case ASSEMBLY_TOP_RIGHT:\r\n                            C = cl;\r\n                            R++;\r\n                            break;\r\n                        case ASSEMBLY_TOP_LEFT:\r\n                        case ASSEMBLY_BOTTOM_RIGHT:\r\n                            R = rl;\r\n                            C++;\r\n                            break;\r\n                        case ASSEMBLY_LEFT_BOTTOM:\r\n                        case ASSEMBLY_RIGHT_TOP: R = rl; C--;\r\n                            break;\r\n                        case ASSEMBLY_RIGHT_BOTTOM:\r\n                        case ASSEMBLY_LEFT_TOP:\r\n                        default:\r\n                            C = 0;\r\n                            R++;\r\n                            break;\r\n                    }\r\n                    if (R > rl)\r\n                        R = rl;\r\n                    else if (R < 0)\r\n                        R = 0;\r\n                    else if (C > cl)\r\n                        C = cl;\r\n                    else if (C < 0)\r\n                        C = 0;\r\n                }\r\n                r = R;\r\n                col = C;\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationSquare = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var dc;\r\n        var dr;\r\n        var cr;\r\n        dc = cols < rows ? (rows - cols) / 2 : 0;\r\n        dr = cols > rows ? (cols - rows) / 2 : 0;\r\n        cr = Math.round(Math.max(cols / 2, rows / 2)) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, cr - Math.min(col + 1 + dc, r + 1 + dr, cols - col + dc, rows - r + dr), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRectangle = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var cr;\r\n        cr = Math.round(Math.min(cols / 2, rows / 2)) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, cr - Math.min(col + 1, r + 1, cols - col, rows - r), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRandom = function (transition) {\r\n        var a = [];\r\n        var r, col, i;\r\n        for (r = 0; r < transition.$Rows; r++) {\r\n            for (col = 0; col < transition.$Cols; col++)\r\n                PushFormationOrder(a, Math.ceil(100000 * Math.random()) % 13, [r, col]);\r\n        }\r\n\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationCircle = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(Math.sqrt(Math.pow(col - hc, 2) + Math.pow(r - hr, 2))), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationCross = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(Math.min(Math.abs(col - hc), Math.abs(r - hr))), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRectangleCross = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        var cr = Math.max(hc, hr) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(cr - Math.max(hc - Math.abs(col - hc), hr - Math.abs(r - hr))) - 1, [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n};\r\n\r\nvar $JssorSlideshowRunner$ = window.$JssorSlideshowRunner$ = function (slideContainer, slideContainerWidth, slideContainerHeight, slideshowOptions, isTouchDevice) {\r\n\r\n    var _SelfSlideshowRunner = this;\r\n\r\n    //var _State = 0; //-1 fullfill, 0 clean, 1 initializing, 2 stay, 3 playing\r\n    var _EndTime;\r\n\r\n    var _SliderFrameCount;\r\n\r\n    var _SlideshowPlayerBelow;\r\n    var _SlideshowPlayerAbove;\r\n\r\n    var _PrevItem;\r\n    var _SlideItem;\r\n\r\n    var _TransitionIndex = 0;\r\n    var _TransitionsOrder = slideshowOptions.$TransitionsOrder;\r\n\r\n    var _SlideshowTransition;\r\n\r\n    var _SlideshowPerformance = 8;\r\n\r\n    //#region Private Methods\r\n    function EnsureTransitionInstance(options, slideshowInterval) {\r\n\r\n        var slideshowTransition = {\r\n            $Interval: slideshowInterval,  //Delay to play next frame\r\n            $Duration: 1, //Duration to finish the entire transition\r\n            $Delay: 0,  //Delay to assembly blocks\r\n            $Cols: 1,   //Number of columns\r\n            $Rows: 1,   //Number of rows\r\n            $Opacity: 0,   //Fade block or not\r\n            $Zoom: 0,   //Zoom block or not\r\n            $Clip: 0,   //Clip block or not\r\n            $Move: false,   //Move block or not\r\n            $SlideOut: false,   //Slide the previous slide out to display next slide instead\r\n            //$FlyDirection: 0,   //Specify fly transform with direction\r\n            $Reverse: false,    //Reverse the assembly or not\r\n            $Formation: $JssorSlideshowFormations$.$FormationRandom,    //Shape that assembly blocks as\r\n            $Assembly: 0x0408,   //The way to assembly blocks ASSEMBLY_RIGHT_BOTTOM\r\n            $ChessMode: { $Column: 0, $Row: 0 },    //Chess move or fly direction\r\n            $Easing: $JssorEasing$.$EaseSwing,  //Specify variation of speed during transition\r\n            $Round: {},\r\n            $Blocks: [],\r\n            $During: {}\r\n        };\r\n\r\n        $Jssor$.$Extend(slideshowTransition, options);\r\n\r\n        slideshowTransition.$Count = slideshowTransition.$Cols * slideshowTransition.$Rows;\r\n        if ($Jssor$.$IsFunction(slideshowTransition.$Easing))\r\n            slideshowTransition.$Easing = { $Default: slideshowTransition.$Easing };\r\n\r\n        slideshowTransition.$FramesCount = Math.ceil(slideshowTransition.$Duration / slideshowTransition.$Interval);\r\n\r\n        slideshowTransition.$GetBlocks = function (width, height) {\r\n            width /= slideshowTransition.$Cols;\r\n            height /= slideshowTransition.$Rows;\r\n            var wh = width + 'x' + height;\r\n            if (!slideshowTransition.$Blocks[wh]) {\r\n                slideshowTransition.$Blocks[wh] = { $Width: width, $Height: height };\r\n                for (var col = 0; col < slideshowTransition.$Cols; col++) {\r\n                    for (var r = 0; r < slideshowTransition.$Rows; r++)\r\n                        slideshowTransition.$Blocks[wh][r + ',' + col] = { $Top: r * height, $Right: col * width + width, $Bottom: r * height + height, $Left: col * width };\r\n                }\r\n            }\r\n\r\n            return slideshowTransition.$Blocks[wh];\r\n        };\r\n\r\n        if (slideshowTransition.$Brother) {\r\n            slideshowTransition.$Brother = EnsureTransitionInstance(slideshowTransition.$Brother, slideshowInterval);\r\n            slideshowTransition.$SlideOut = true;\r\n        }\r\n\r\n        return slideshowTransition;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Private Classes\r\n    function JssorSlideshowPlayer(slideContainer, slideElement, slideTransition, beginTime, slideContainerWidth, slideContainerHeight) {\r\n        var _Self = this;\r\n\r\n        var _Block;\r\n        var _StartStylesArr = {};\r\n        var _AnimationStylesArrs = {};\r\n        var _AnimationBlockItems = [];\r\n        var _StyleStart;\r\n        var _StyleEnd;\r\n        var _StyleDif;\r\n        var _ChessModeColumn = slideTransition.$ChessMode.$Column || 0;\r\n        var _ChessModeRow = slideTransition.$ChessMode.$Row || 0;\r\n\r\n        var _Blocks = slideTransition.$GetBlocks(slideContainerWidth, slideContainerHeight);\r\n        var _FormationInstance = GetFormation(slideTransition);\r\n        var _MaxOrder = _FormationInstance.length - 1;\r\n        var _Period = slideTransition.$Duration + slideTransition.$Delay * _MaxOrder;\r\n        var _EndTime = beginTime + _Period;\r\n\r\n        var _SlideOut = slideTransition.$SlideOut;\r\n        var _IsIn;\r\n\r\n        //_EndTime += $Jssor$.$IsBrowserChrome() ? 260 : 50;\r\n        _EndTime += 50;\r\n\r\n        //#region Private Methods\r\n\r\n        function GetFormation(transition) {\r\n\r\n            var formationInstance = transition.$Formation(transition);\r\n\r\n            return transition.$Reverse ? formationInstance.reverse() : formationInstance;\r\n\r\n        }\r\n        //#endregion\r\n\r\n        _Self.$EndTime = _EndTime;\r\n\r\n        _Self.$ShowFrame = function (time) {\r\n            time -= beginTime;\r\n\r\n            var isIn = time < _Period;\r\n\r\n            if (isIn || _IsIn) {\r\n                _IsIn = isIn;\r\n\r\n                if (!_SlideOut)\r\n                    time = _Period - time;\r\n\r\n                var frameIndex = Math.ceil(time / slideTransition.$Interval);\r\n\r\n                $Jssor$.$Each(_AnimationStylesArrs, function (value, index) {\r\n\r\n                    var itemFrameIndex = Math.max(frameIndex, value.$Min);\r\n                    itemFrameIndex = Math.min(itemFrameIndex, value.length - 1);\r\n\r\n                    if (value.$LastFrameIndex != itemFrameIndex) {\r\n                        if (!value.$LastFrameIndex && !_SlideOut) {\r\n                            $Jssor$.$ShowElement(_AnimationBlockItems[index]);\r\n                        }\r\n                        else if (itemFrameIndex == value.$Max && _SlideOut) {\r\n                            $Jssor$.$HideElement(_AnimationBlockItems[index]);\r\n                        }\r\n                        value.$LastFrameIndex = itemFrameIndex;\r\n                        $Jssor$.$SetStylesEx(_AnimationBlockItems[index], value[itemFrameIndex]);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        //constructor\r\n        {\r\n            slideElement = $Jssor$.$CloneNode(slideElement);\r\n            //$Jssor$.$RemoveAttribute(slideElement, \"id\");\r\n            if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                var hasImage = !slideElement[\"no-image\"];\r\n                var slideChildElements = $Jssor$.$FindChildrenByTag(slideElement);\r\n                $Jssor$.$Each(slideChildElements, function (slideChildElement) {\r\n                    if (hasImage || slideChildElement[\"jssor-slider\"])\r\n                        $Jssor$.$CssOpacity(slideChildElement, $Jssor$.$CssOpacity(slideChildElement), true);\r\n                });\r\n            }\r\n\r\n            $Jssor$.$Each(_FormationInstance, function (formationItems, order) {\r\n                $Jssor$.$Each(formationItems, function (formationItem) {\r\n                    var row = formationItem[0];\r\n                    var col = formationItem[1];\r\n                    {\r\n                        var columnRow = row + ',' + col;\r\n\r\n                        var chessHorizontal = false;\r\n                        var chessVertical = false;\r\n                        var chessRotate = false;\r\n\r\n                        if (_ChessModeColumn && col % 2) {\r\n                            if (_ChessModeColumn & 3/*$JssorDirection$.$IsHorizontal(_ChessModeColumn)*/) {\r\n                                chessHorizontal = !chessHorizontal;\r\n                            }\r\n                            if (_ChessModeColumn & 12/*$JssorDirection$.$IsVertical(_ChessModeColumn)*/) {\r\n                                chessVertical = !chessVertical;\r\n                            }\r\n\r\n                            if (_ChessModeColumn & 16)\r\n                                chessRotate = !chessRotate;\r\n                        }\r\n\r\n                        if (_ChessModeRow && row % 2) {\r\n                            if (_ChessModeRow & 3/*$JssorDirection$.$IsHorizontal(_ChessModeRow)*/) {\r\n                                chessHorizontal = !chessHorizontal;\r\n                            }\r\n                            if (_ChessModeRow & 12/*$JssorDirection$.$IsVertical(_ChessModeRow)*/) {\r\n                                chessVertical = !chessVertical;\r\n                            }\r\n                            if (_ChessModeRow & 16)\r\n                                chessRotate = !chessRotate;\r\n                        }\r\n\r\n                        slideTransition.$Top = slideTransition.$Top || (slideTransition.$Clip & 4);\r\n                        slideTransition.$Bottom = slideTransition.$Bottom || (slideTransition.$Clip & 8);\r\n                        slideTransition.$Left = slideTransition.$Left || (slideTransition.$Clip & 1);\r\n                        slideTransition.$Right = slideTransition.$Right || (slideTransition.$Clip & 2);\r\n\r\n                        var topBenchmark = chessVertical ? slideTransition.$Bottom : slideTransition.$Top;\r\n                        var bottomBenchmark = chessVertical ? slideTransition.$Top : slideTransition.$Bottom;\r\n                        var leftBenchmark = chessHorizontal ? slideTransition.$Right : slideTransition.$Left;\r\n                        var rightBenchmark = chessHorizontal ? slideTransition.$Left : slideTransition.$Right;\r\n\r\n                        slideTransition.$Clip = topBenchmark || bottomBenchmark || leftBenchmark || rightBenchmark;\r\n\r\n                        _StyleDif = {};\r\n                        _StyleEnd = { $Top: 0, $Left: 0, $Opacity: 1, $Width: slideContainerWidth, $Height: slideContainerHeight };\r\n                        _StyleStart = $Jssor$.$Extend({}, _StyleEnd);\r\n                        _Block = $Jssor$.$Extend({}, _Blocks[columnRow]);\r\n\r\n                        if (slideTransition.$Opacity) {\r\n                            _StyleEnd.$Opacity = 2 - slideTransition.$Opacity;\r\n                        }\r\n\r\n                        if (slideTransition.$ZIndex) {\r\n                            _StyleEnd.$ZIndex = slideTransition.$ZIndex;\r\n                            _StyleStart.$ZIndex = 0;\r\n                        }\r\n\r\n                        var allowClip = slideTransition.$Cols * slideTransition.$Rows > 1 || slideTransition.$Clip;\r\n\r\n                        if (slideTransition.$Zoom || slideTransition.$Rotate) {\r\n                            var allowRotate = true;\r\n                            if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                                if (slideTransition.$Cols * slideTransition.$Rows > 1)\r\n                                    allowRotate = false;\r\n                                else\r\n                                    allowClip = false;\r\n                            }\r\n\r\n                            if (allowRotate) {\r\n                                _StyleEnd.$Zoom = slideTransition.$Zoom ? slideTransition.$Zoom - 1 : 1;\r\n                                _StyleStart.$Zoom = 1;\r\n\r\n                                if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera())\r\n                                    _StyleEnd.$Zoom = Math.min(_StyleEnd.$Zoom, 2);\r\n\r\n                                var rotate = slideTransition.$Rotate;\r\n\r\n                                _StyleEnd.$Rotate = rotate * 360 * ((chessRotate) ? -1 : 1);\r\n                                _StyleStart.$Rotate = 0;\r\n                            }\r\n                        }\r\n\r\n                        if (allowClip) {\r\n                            if (slideTransition.$Clip) {\r\n                                var clipScale = slideTransition.$ScaleClip || 1;\r\n                                var blockOffset = _Block.$Offset = {};\r\n                                if (topBenchmark && bottomBenchmark) {\r\n                                    blockOffset.$Top = _Blocks.$Height / 2 * clipScale;\r\n                                    blockOffset.$Bottom = -blockOffset.$Top;\r\n                                }\r\n                                else if (topBenchmark) {\r\n                                    blockOffset.$Bottom = -_Blocks.$Height * clipScale;\r\n                                }\r\n                                else if (bottomBenchmark) {\r\n                                    blockOffset.$Top = _Blocks.$Height * clipScale;\r\n                                }\r\n\r\n                                if (leftBenchmark && rightBenchmark) {\r\n                                    blockOffset.$Left = _Blocks.$Width / 2 * clipScale;\r\n                                    blockOffset.$Right = -blockOffset.$Left;\r\n                                }\r\n                                else if (leftBenchmark) {\r\n                                    blockOffset.$Right = -_Blocks.$Width * clipScale;\r\n                                }\r\n                                else if (rightBenchmark) {\r\n                                    blockOffset.$Left = _Blocks.$Width * clipScale;\r\n                                }\r\n                            }\r\n\r\n                            _StyleDif.$Clip = _Block;\r\n                            _StyleStart.$Clip = _Blocks[columnRow];\r\n                        }\r\n\r\n                        //fly\r\n                        {\r\n                            var chessHor = chessHorizontal ? 1 : -1;\r\n                            var chessVer = chessVertical ? 1 : -1;\r\n\r\n                            if (slideTransition.x)\r\n                                _StyleEnd.$Left += slideContainerWidth * slideTransition.x * chessHor;\r\n\r\n                            if (slideTransition.y)\r\n                                _StyleEnd.$Top += slideContainerHeight * slideTransition.y * chessVer;\r\n                        }\r\n\r\n                        $Jssor$.$Each(_StyleEnd, function (propertyEnd, property) {\r\n                            if ($Jssor$.$IsNumeric(propertyEnd)) {\r\n                                if (propertyEnd != _StyleStart[property]) {\r\n                                    _StyleDif[property] = propertyEnd - _StyleStart[property];\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        _StartStylesArr[columnRow] = _SlideOut ? _StyleStart : _StyleEnd;\r\n\r\n                        var animationStylesArr = [];\r\n                        var framesCount = slideTransition.$FramesCount;\r\n                        var virtualFrameCount = Math.round(order * slideTransition.$Delay / slideTransition.$Interval);\r\n                        _AnimationStylesArrs[columnRow] = new Array(virtualFrameCount);\r\n                        _AnimationStylesArrs[columnRow].$Min = virtualFrameCount;\r\n                        _AnimationStylesArrs[columnRow].$Max = virtualFrameCount + framesCount - 1;\r\n\r\n                        for (var frameN = 0; frameN <= framesCount; frameN++) {\r\n                            var styleFrameN = $Jssor$.$Cast(_StyleStart, _StyleDif, frameN / framesCount, slideTransition.$Easing, slideTransition.$During, slideTransition.$Round, { $Move: slideTransition.$Move, $OriginalWidth: slideContainerWidth, $OriginalHeight: slideContainerHeight })\r\n\r\n                            styleFrameN.$ZIndex = styleFrameN.$ZIndex || 1;\r\n\r\n                            _AnimationStylesArrs[columnRow].push(styleFrameN);\r\n                        }\r\n\r\n                    } //for\r\n                });\r\n            });\r\n\r\n            _FormationInstance.reverse();\r\n            $Jssor$.$Each(_FormationInstance, function (formationItems) {\r\n                $Jssor$.$Each(formationItems, function (formationItem) {\r\n                    var row = formationItem[0];\r\n                    var col = formationItem[1];\r\n\r\n                    var columnRow = row + ',' + col;\r\n\r\n                    var image = slideElement;\r\n                    if (col || row)\r\n                        image = $Jssor$.$CloneNode(slideElement);\r\n\r\n                    $Jssor$.$SetStyles(image, _StartStylesArr[columnRow]);\r\n                    $Jssor$.$CssOverflow(image, \"hidden\");\r\n\r\n                    $Jssor$.$CssPosition(image, \"absolute\");\r\n                    slideContainer.$AddClipElement(image);\r\n                    _AnimationBlockItems[columnRow] = image;\r\n                    $Jssor$.$ShowElement(image, !_SlideOut);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function SlideshowProcessor() {\r\n        var _SelfSlideshowProcessor = this;\r\n        var _CurrentTime = 0;\r\n\r\n        $JssorAnimator$.call(_SelfSlideshowProcessor, 0, _EndTime);\r\n\r\n        _SelfSlideshowProcessor.$OnPositionChange = function (oldPosition, newPosition) {\r\n            if ((newPosition - _CurrentTime) > _SlideshowPerformance) {\r\n                _CurrentTime = newPosition;\r\n\r\n                _SlideshowPlayerAbove && _SlideshowPlayerAbove.$ShowFrame(newPosition);\r\n                _SlideshowPlayerBelow && _SlideshowPlayerBelow.$ShowFrame(newPosition);\r\n            }\r\n        };\r\n\r\n        _SelfSlideshowProcessor.$Transition = _SlideshowTransition;\r\n    }\r\n    //#endregion\r\n\r\n    //member functions\r\n    _SelfSlideshowRunner.$GetTransition = function (slideCount) {\r\n        var n = 0;\r\n\r\n        var transitions = slideshowOptions.$Transitions;\r\n\r\n        var transitionCount = transitions.length;\r\n\r\n        if (_TransitionsOrder) { /*Sequence*/\r\n            //if (transitionCount > slideCount && ($Jssor$.$IsBrowserChrome() || $Jssor$.$IsBrowserSafari() || $Jssor$.$IsBrowserFireFox())) {\r\n            //    transitionCount -= transitionCount % slideCount;\r\n            //}\r\n            n = _TransitionIndex++ % transitionCount;\r\n        }\r\n        else { /*Random*/\r\n            n = Math.floor(Math.random() * transitionCount);\r\n        }\r\n\r\n        transitions[n] && (transitions[n].$Index = n);\r\n\r\n        return transitions[n];\r\n    };\r\n\r\n    _SelfSlideshowRunner.$Initialize = function (slideIndex, prevIndex, slideItem, prevItem, slideshowTransition) {\r\n        $JssorDebug$.$Execute(function () {\r\n            if (_SlideshowPlayerBelow) {\r\n                $JssorDebug$.$Fail(\"slideshow runner has not been cleared.\");\r\n            }\r\n        });\r\n\r\n        _SlideshowTransition = slideshowTransition;\r\n\r\n        slideshowTransition = EnsureTransitionInstance(slideshowTransition, _SlideshowPerformance);\r\n\r\n        _SlideItem = slideItem;\r\n        _PrevItem = prevItem;\r\n\r\n        var prevSlideElement = prevItem.$Item;\r\n        var currentSlideElement = slideItem.$Item;\r\n        prevSlideElement[\"no-image\"] = !prevItem.$Image;\r\n        currentSlideElement[\"no-image\"] = !slideItem.$Image;\r\n\r\n        var slideElementAbove = prevSlideElement;\r\n        var slideElementBelow = currentSlideElement;\r\n\r\n        var slideTransitionAbove = slideshowTransition;\r\n        var slideTransitionBelow = slideshowTransition.$Brother || EnsureTransitionInstance({}, _SlideshowPerformance);\r\n\r\n        if (!slideshowTransition.$SlideOut) {\r\n            slideElementAbove = currentSlideElement;\r\n            slideElementBelow = prevSlideElement;\r\n        }\r\n\r\n        var shift = slideTransitionBelow.$Shift || 0;\r\n\r\n        _SlideshowPlayerBelow = new JssorSlideshowPlayer(slideContainer, slideElementBelow, slideTransitionBelow, Math.max(shift - slideTransitionBelow.$Interval, 0), slideContainerWidth, slideContainerHeight);\r\n        _SlideshowPlayerAbove = new JssorSlideshowPlayer(slideContainer, slideElementAbove, slideTransitionAbove, Math.max(slideTransitionBelow.$Interval - shift, 0), slideContainerWidth, slideContainerHeight);\r\n\r\n        _SlideshowPlayerBelow.$ShowFrame(0);\r\n        _SlideshowPlayerAbove.$ShowFrame(0);\r\n\r\n        _EndTime = Math.max(_SlideshowPlayerBelow.$EndTime, _SlideshowPlayerAbove.$EndTime);\r\n\r\n        _SelfSlideshowRunner.$Index = slideIndex;\r\n    };\r\n\r\n    _SelfSlideshowRunner.$Clear = function () {\r\n        slideContainer.$Clear();\r\n        _SlideshowPlayerBelow = null;\r\n        _SlideshowPlayerAbove = null;\r\n    };\r\n\r\n    _SelfSlideshowRunner.$GetProcessor = function () {\r\n        var slideshowProcessor = null;\r\n\r\n        if (_SlideshowPlayerAbove)\r\n            slideshowProcessor = new SlideshowProcessor();\r\n\r\n        return slideshowProcessor;\r\n    };\r\n\r\n    //Constructor\r\n    {\r\n        if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera() || (isTouchDevice && $Jssor$.$WebKitVersion() < 537)) {\r\n            _SlideshowPerformance = 16;\r\n        }\r\n\r\n        $JssorObject$.call(_SelfSlideshowRunner);\r\n        $JssorAnimator$.call(_SelfSlideshowRunner, -10000000, 10000000);\r\n    }\r\n};\r\n\r\nvar $JssorSlider$ = window.$JssorSlider$ = function (elmt, options) {\r\n    var _SelfSlider = this;\r\n\r\n    //#region Private Classes\r\n    //Conveyor\r\n    function Conveyor() {\r\n        var _SelfConveyor = this;\r\n        $JssorAnimator$.call(_SelfConveyor, -100000000, 200000000);\r\n\r\n        _SelfConveyor.$GetCurrentSlideInfo = function () {\r\n            var positionDisplay = _SelfConveyor.$GetPosition_Display();\r\n            var virtualIndex = Math.floor(positionDisplay);\r\n            var slideIndex = GetRealIndex(virtualIndex);\r\n            var slidePosition = positionDisplay - Math.floor(positionDisplay);\r\n\r\n            return { $Index: slideIndex, $VirtualIndex: virtualIndex, $Position: slidePosition };\r\n        };\r\n\r\n        _SelfConveyor.$OnPositionChange = function (oldPosition, newPosition) {\r\n\r\n            var index = Math.floor(newPosition);\r\n            if (index != newPosition && newPosition > oldPosition)\r\n                index++;\r\n\r\n            ResetNavigator(index, true);\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_POSITION_CHANGE, GetRealIndex(newPosition), GetRealIndex(oldPosition), newPosition, oldPosition);\r\n        };\r\n    }\r\n    //Conveyor\r\n\r\n    //Carousel\r\n    function Carousel() {\r\n        var _SelfCarousel = this;\r\n\r\n        $JssorAnimator$.call(_SelfCarousel, 0, 0, { $LoopLength: _SlideCount });\r\n\r\n        //Carousel Constructor\r\n        {\r\n            $Jssor$.$Each(_SlideItems, function (slideItem) {\r\n                (_Loop & 1) && slideItem.$SetLoopLength(_SlideCount);\r\n                _SelfCarousel.$Chain(slideItem);\r\n                slideItem.$Shift(_ParkingPosition / _StepLength);\r\n            });\r\n        }\r\n    }\r\n    //Carousel\r\n\r\n    //Slideshow\r\n    function Slideshow() {\r\n        var _SelfSlideshow = this;\r\n        var _Wrapper = _SlideContainer.$Elmt;\r\n\r\n        $JssorAnimator$.call(_SelfSlideshow, -1, 2, { $Easing: $JssorEasing$.$EaseLinear, $Setter: { $Position: SetPosition }, $LoopLength: _SlideCount }, _Wrapper, { $Position: 1 }, { $Position: -2 });\r\n\r\n        _SelfSlideshow.$Wrapper = _Wrapper;\r\n\r\n        //Slideshow Constructor\r\n        {\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_SlideContainer.$Elmt, \"debug-id\", \"slide_container\");\r\n            });\r\n        }\r\n    }\r\n    //Slideshow\r\n\r\n    //CarouselPlayer\r\n    function CarouselPlayer(carousel, slideshow) {\r\n        var _SelfCarouselPlayer = this;\r\n        var _FromPosition;\r\n        var _ToPosition;\r\n        var _Duration;\r\n        var _StandBy;\r\n        var _StandByPosition;\r\n\r\n        $JssorAnimator$.call(_SelfCarouselPlayer, -100000000, 200000000, { $IntervalMax: 100 });\r\n\r\n        _SelfCarouselPlayer.$OnStart = function () {\r\n            _IsSliding = true;\r\n            _LoadingTicket = null;\r\n\r\n            //EVT_SWIPE_START\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SWIPE_START, GetRealIndex(_Conveyor.$GetPosition()), _Conveyor.$GetPosition());\r\n        };\r\n\r\n        _SelfCarouselPlayer.$OnStop = function () {\r\n\r\n            _IsSliding = false;\r\n            _StandBy = false;\r\n\r\n            var currentSlideInfo = _Conveyor.$GetCurrentSlideInfo();\r\n\r\n            //EVT_SWIPE_END\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SWIPE_END, GetRealIndex(_Conveyor.$GetPosition()), _Conveyor.$GetPosition());\r\n\r\n            if (!currentSlideInfo.$Position) {\r\n                OnPark(currentSlideInfo.$VirtualIndex, _CurrentSlideIndex);\r\n            }\r\n        };\r\n\r\n        _SelfCarouselPlayer.$OnPositionChange = function (oldPosition, newPosition) {\r\n\r\n            var toPosition;\r\n\r\n            if (_StandBy)\r\n                toPosition = _StandByPosition;\r\n            else {\r\n                toPosition = _ToPosition;\r\n\r\n                if (_Duration) {\r\n                    var interPosition = newPosition / _Duration;\r\n                    toPosition = _Options.$SlideEasing(interPosition) * (_ToPosition - _FromPosition) + _FromPosition;\r\n                }\r\n            }\r\n\r\n            _Conveyor.$GoToPosition(toPosition);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$PlayCarousel = function (fromPosition, toPosition, duration, callback) {\r\n            $JssorDebug$.$Execute(function () {\r\n                if (_SelfCarouselPlayer.$IsPlaying())\r\n                    $JssorDebug$.$Fail(\"The carousel is already playing.\");\r\n            });\r\n\r\n            _FromPosition = fromPosition;\r\n            _ToPosition = toPosition;\r\n            _Duration = duration;\r\n\r\n            _Conveyor.$GoToPosition(fromPosition);\r\n            _SelfCarouselPlayer.$GoToPosition(0);\r\n\r\n            _SelfCarouselPlayer.$PlayToPosition(duration, callback);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$StandBy = function (standByPosition) {\r\n            _StandBy = true;\r\n            _StandByPosition = standByPosition;\r\n            _SelfCarouselPlayer.$Play(standByPosition, null, true);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$SetStandByPosition = function (standByPosition) {\r\n            _StandByPosition = standByPosition;\r\n        };\r\n\r\n        _SelfCarouselPlayer.$MoveCarouselTo = function (position) {\r\n            _Conveyor.$GoToPosition(position);\r\n        };\r\n\r\n        //CarouselPlayer Constructor\r\n        {\r\n            _Conveyor = new Conveyor();\r\n\r\n            _Conveyor.$Combine(carousel);\r\n            _Conveyor.$Combine(slideshow);\r\n        }\r\n    }\r\n    //CarouselPlayer\r\n\r\n    //SlideContainer\r\n    function SlideContainer() {\r\n        var _Self = this;\r\n        var elmt = CreatePanel();\r\n\r\n        $Jssor$.$CssZIndex(elmt, 0);\r\n        $Jssor$.$Css(elmt, \"pointerEvents\", \"none\");\r\n\r\n        _Self.$Elmt = elmt;\r\n\r\n        _Self.$AddClipElement = function (clipElement) {\r\n            $Jssor$.$AppendChild(elmt, clipElement);\r\n            $Jssor$.$ShowElement(elmt);\r\n        };\r\n\r\n        _Self.$Clear = function () {\r\n            $Jssor$.$HideElement(elmt);\r\n            $Jssor$.$Empty(elmt);\r\n        };\r\n    }\r\n    //SlideContainer\r\n\r\n    //SlideItem\r\n    function SlideItem(slideElmt, slideIndex) {\r\n\r\n        var _SelfSlideItem = this;\r\n\r\n        var _CaptionSliderIn;\r\n        var _CaptionSliderOut;\r\n        var _CaptionSliderCurrent;\r\n        var _IsCaptionSliderPlayingWhenDragStart;\r\n\r\n        var _Wrapper;\r\n        var _BaseElement = slideElmt;\r\n\r\n        var _LoadingScreen;\r\n\r\n        var _ImageItem;\r\n        var _ImageElmts = [];\r\n        var _LinkItemOrigin;\r\n        var _LinkItem;\r\n        var _ImageLoading;\r\n        var _ImageLoaded;\r\n        var _ImageLazyLoading;\r\n        var _ContentRefreshed;\r\n\r\n        var _Processor;\r\n\r\n        var _PlayerInstanceElement;\r\n        var _PlayerInstance;\r\n\r\n        var _SequenceNumber;    //for debug only\r\n\r\n        $JssorAnimator$.call(_SelfSlideItem, -_DisplayPieces, _DisplayPieces + 1, { $SlideItemAnimator: true });\r\n\r\n        function ResetCaptionSlider(fresh) {\r\n            _CaptionSliderOut && _CaptionSliderOut.$Revert();\r\n            _CaptionSliderIn && _CaptionSliderIn.$Revert();\r\n\r\n            RefreshContent(slideElmt, fresh);\r\n            _ContentRefreshed = true;\r\n\r\n            _CaptionSliderIn = new _CaptionSliderOptions.$Class(slideElmt, _CaptionSliderOptions, 1);\r\n            $JssorDebug$.$LiveStamp(_CaptionSliderIn, \"caption_slider_\" + _CaptionSliderCount + \"_in\");\r\n            _CaptionSliderOut = new _CaptionSliderOptions.$Class(slideElmt, _CaptionSliderOptions);\r\n            $JssorDebug$.$LiveStamp(_CaptionSliderOut, \"caption_slider_\" + _CaptionSliderCount + \"_out\");\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                _CaptionSliderCount++;\r\n            });\r\n\r\n            _CaptionSliderOut.$GoToPosition(0);\r\n            _CaptionSliderIn.$GoToPosition(0);\r\n        }\r\n\r\n        function EnsureCaptionSliderVersion() {\r\n            if (_CaptionSliderIn.$Version < _CaptionSliderOptions.$Version) {\r\n                ResetCaptionSlider();\r\n            }\r\n        }\r\n\r\n        //event handling begin\r\n        function LoadImageCompleteEventHandler(completeCallback, loadingScreen, image) {\r\n            if (!_ImageLoaded) {\r\n                _ImageLoaded = true;\r\n\r\n                if (_ImageItem && image) {\r\n                    var imageWidth = image.width;\r\n                    var imageHeight = image.height;\r\n                    var fillWidth = imageWidth;\r\n                    var fillHeight = imageHeight;\r\n\r\n                    if (imageWidth && imageHeight && _Options.$FillMode) {\r\n\r\n                        //0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0\r\n                        if (_Options.$FillMode & 3 && (!(_Options.$FillMode & 4) || imageWidth > _SlideWidth || imageHeight > _SlideHeight)) {\r\n                            var fitHeight = false;\r\n                            var ratio = _SlideWidth / _SlideHeight * imageHeight / imageWidth;\r\n\r\n                            if (_Options.$FillMode & 1) {\r\n                                fitHeight = (ratio > 1);\r\n                            }\r\n                            else if (_Options.$FillMode & 2) {\r\n                                fitHeight = (ratio < 1);\r\n                            }\r\n                            fillWidth = fitHeight ? imageWidth * _SlideHeight / imageHeight : _SlideWidth;\r\n                            fillHeight = fitHeight ? _SlideHeight : imageHeight * _SlideWidth / imageWidth;\r\n                        }\r\n\r\n                        $Jssor$.$CssWidth(_ImageItem, fillWidth);\r\n                        $Jssor$.$CssHeight(_ImageItem, fillHeight);\r\n                        $Jssor$.$CssTop(_ImageItem, (_SlideHeight - fillHeight) / 2);\r\n                        $Jssor$.$CssLeft(_ImageItem, (_SlideWidth - fillWidth) / 2);\r\n                    }\r\n\r\n                    $Jssor$.$CssPosition(_ImageItem, \"absolute\");\r\n\r\n                    _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_LOAD_END, slideIndex);\r\n                }\r\n            }\r\n\r\n            $Jssor$.$HideElement(loadingScreen);\r\n            completeCallback && completeCallback(_SelfSlideItem);\r\n        }\r\n\r\n        function LoadSlideshowImageCompleteEventHandler(nextIndex, nextItem, slideshowTransition, loadingTicket) {\r\n            if (loadingTicket == _LoadingTicket && _CurrentSlideIndex == slideIndex && _AutoPlay) {\r\n                if (!_Frozen) {\r\n                    var nextRealIndex = GetRealIndex(nextIndex);\r\n                    _SlideshowRunner.$Initialize(nextRealIndex, slideIndex, nextItem, _SelfSlideItem, slideshowTransition);\r\n                    nextItem.$HideContentForSlideshow();\r\n                    _Slideshow.$Locate(nextRealIndex, 1);\r\n                    _Slideshow.$GoToPosition(nextRealIndex);\r\n                    _CarouselPlayer.$PlayCarousel(nextIndex, nextIndex, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        function SlideReadyEventHandler(loadingTicket) {\r\n            if (loadingTicket == _LoadingTicket && _CurrentSlideIndex == slideIndex) {\r\n\r\n                if (!_Processor) {\r\n                    var slideshowProcessor = null;\r\n                    if (_SlideshowRunner) {\r\n                        if (_SlideshowRunner.$Index == slideIndex)\r\n                            slideshowProcessor = _SlideshowRunner.$GetProcessor();\r\n                        else\r\n                            _SlideshowRunner.$Clear();\r\n                    }\r\n\r\n                    EnsureCaptionSliderVersion();\r\n\r\n                    _Processor = new Processor(slideElmt, slideIndex, slideshowProcessor, _SelfSlideItem.$GetCaptionSliderIn(), _SelfSlideItem.$GetCaptionSliderOut());\r\n                    _Processor.$SetPlayer(_PlayerInstance);\r\n                }\r\n\r\n                !_Processor.$IsPlaying() && _Processor.$Replay();\r\n            }\r\n        }\r\n\r\n        function ParkEventHandler(currentIndex, previousIndex, manualActivate) {\r\n            if (currentIndex == slideIndex) {\r\n\r\n                if (currentIndex != previousIndex)\r\n                    _SlideItems[previousIndex] && _SlideItems[previousIndex].$ParkOut();\r\n                else\r\n                    !manualActivate && _Processor && _Processor.$AdjustIdleOnPark();\r\n\r\n                _PlayerInstance && _PlayerInstance.$Enable();\r\n\r\n                //park in\r\n                var loadingTicket = _LoadingTicket = $Jssor$.$GetNow();\r\n                _SelfSlideItem.$LoadImage($Jssor$.$CreateCallback(null, SlideReadyEventHandler, loadingTicket));\r\n            }\r\n            else {\r\n                var distance = Math.abs(slideIndex - currentIndex);\r\n                var loadRange = _DisplayPieces + _Options.$LazyLoading - 1;\r\n                if (!_ImageLazyLoading || distance <= loadRange) {\r\n                    _SelfSlideItem.$LoadImage();\r\n                }\r\n            }\r\n        }\r\n\r\n        function SwipeStartEventHandler() {\r\n            if (_CurrentSlideIndex == slideIndex && _Processor) {\r\n                _Processor.$Stop();\r\n                _PlayerInstance && _PlayerInstance.$Quit();\r\n                _PlayerInstance && _PlayerInstance.$Disable();\r\n                _Processor.$OpenSlideshowPanel();\r\n            }\r\n        }\r\n\r\n        function FreezeEventHandler() {\r\n            if (_CurrentSlideIndex == slideIndex && _Processor) {\r\n                _Processor.$Stop();\r\n            }\r\n        }\r\n\r\n        function ContentClickEventHandler(event) {\r\n            if (_LastDragSucceded) {\r\n                $Jssor$.$StopEvent(event);\r\n\r\n                var checkElement = $Jssor$.$EvtSrc(event);\r\n                while (checkElement && slideElmt !== checkElement) {\r\n                    if (checkElement.tagName == \"A\") {\r\n                        $Jssor$.$CancelEvent(event);\r\n                    }\r\n                    try {\r\n                        checkElement = checkElement.parentNode;\r\n                    } catch (e) {\r\n                        // Firefox sometimes fires events for XUL elements, which throws\r\n                        // a \"permission denied\" error. so this is not a child.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function SlideClickEventHandler(event) {\r\n            if (!_LastDragSucceded) {\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_CLICK, slideIndex, event);\r\n            }\r\n        }\r\n\r\n        function PlayerAvailableEventHandler() {\r\n            _PlayerInstance = _PlayerInstanceElement.pInstance;\r\n            _Processor && _Processor.$SetPlayer(_PlayerInstance);\r\n        }\r\n\r\n        _SelfSlideItem.$LoadImage = function (completeCallback, loadingScreen) {\r\n            loadingScreen = loadingScreen || _LoadingScreen;\r\n\r\n            if (_ImageElmts.length && !_ImageLoaded) {\r\n\r\n                $Jssor$.$ShowElement(loadingScreen);\r\n\r\n                if (!_ImageLoading) {\r\n                    _ImageLoading = true;\r\n                    _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_LOAD_START, slideIndex);\r\n\r\n                    $Jssor$.$Each(_ImageElmts, function (imageElmt) {\r\n\r\n                        if (!$Jssor$.$Attribute(imageElmt, \"src\")) {\r\n                            imageElmt.src = $Jssor$.$AttributeEx(imageElmt, \"src2\");\r\n                            $Jssor$.$CssDisplay(imageElmt, imageElmt[\"display-origin\"]);\r\n                        }\r\n                    });\r\n                }\r\n                $Jssor$.$LoadImages(_ImageElmts, _ImageItem, $Jssor$.$CreateCallback(null, LoadImageCompleteEventHandler, completeCallback, loadingScreen));\r\n            }\r\n            else {\r\n                LoadImageCompleteEventHandler(completeCallback, loadingScreen);\r\n            }\r\n        };\r\n\r\n        _SelfSlideItem.$GoForNextSlide = function () {\r\n\r\n            var index = slideIndex;\r\n            if (_Options.$AutoPlaySteps < 0)\r\n                index -= _SlideCount;\r\n\r\n            var nextIndex = index + _Options.$AutoPlaySteps * _PlayReverse;\r\n\r\n            if (_Loop & 2) {\r\n                //Rewind\r\n                nextIndex = GetRealIndex(nextIndex);\r\n            }\r\n            if (!(_Loop & 1)) {\r\n                //Stop at threshold\r\n                nextIndex = Math.max(0, Math.min(nextIndex, _SlideCount - _DisplayPieces));\r\n            }\r\n\r\n            if (nextIndex != slideIndex) {\r\n                if (_SlideshowRunner) {\r\n                    var slideshowTransition = _SlideshowRunner.$GetTransition(_SlideCount);\r\n\r\n                    if (slideshowTransition) {\r\n                        var loadingTicket = _LoadingTicket = $Jssor$.$GetNow();\r\n\r\n                        var nextItem = _SlideItems[GetRealIndex(nextIndex)];\r\n                        return nextItem.$LoadImage($Jssor$.$CreateCallback(null, LoadSlideshowImageCompleteEventHandler, nextIndex, nextItem, slideshowTransition, loadingTicket), _LoadingScreen);\r\n                    }\r\n                }\r\n\r\n                PlayTo(nextIndex);\r\n            }\r\n        };\r\n\r\n        _SelfSlideItem.$TryActivate = function () {\r\n            ParkEventHandler(slideIndex, slideIndex, true);\r\n        };\r\n\r\n        _SelfSlideItem.$ParkOut = function () {\r\n            //park out\r\n            _PlayerInstance && _PlayerInstance.$Quit();\r\n            _PlayerInstance && _PlayerInstance.$Disable();\r\n            _SelfSlideItem.$UnhideContentForSlideshow();\r\n            _Processor && _Processor.$Abort();\r\n            _Processor = null;\r\n            ResetCaptionSlider();\r\n        };\r\n\r\n        //for debug only\r\n        _SelfSlideItem.$StampSlideItemElements = function (stamp) {\r\n            stamp = _SequenceNumber + \"_\" + stamp;\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (_ImageItem)\r\n                    $Jssor$.$Attribute(_ImageItem, \"debug-id\", stamp + \"_slide_item_image_id\");\r\n\r\n                $Jssor$.$Attribute(slideElmt, \"debug-id\", stamp + \"_slide_item_item_id\");\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_Wrapper, \"debug-id\", stamp + \"_slide_item_wrapper_id\");\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_LoadingScreen, \"debug-id\", stamp + \"_loading_container_id\");\r\n            });\r\n        };\r\n\r\n        _SelfSlideItem.$HideContentForSlideshow = function () {\r\n            $Jssor$.$HideElement(slideElmt);\r\n        };\r\n\r\n        _SelfSlideItem.$UnhideContentForSlideshow = function () {\r\n            $Jssor$.$ShowElement(slideElmt);\r\n        };\r\n\r\n        _SelfSlideItem.$EnablePlayer = function () {\r\n            _PlayerInstance && _PlayerInstance.$Enable();\r\n        };\r\n\r\n        function RefreshContent(elmt, fresh, level) {\r\n            $JssorDebug$.$Execute(function () {\r\n                if ($Jssor$.$Attribute(elmt, \"jssor-slider\"))\r\n                    $JssorDebug$.$Log(\"Child slider found.\");\r\n            });\r\n\r\n            if ($Jssor$.$Attribute(elmt, \"jssor-slider\"))\r\n                return;\r\n\r\n            level = level || 0;\r\n\r\n            if (!_ContentRefreshed) {\r\n                if (elmt.tagName == \"IMG\") {\r\n                    _ImageElmts.push(elmt);\r\n\r\n                    if (!$Jssor$.$Attribute(elmt, \"src\")) {\r\n                        _ImageLazyLoading = true;\r\n                        elmt[\"display-origin\"] = $Jssor$.$CssDisplay(elmt);\r\n                        $Jssor$.$HideElement(elmt);\r\n                    }\r\n                }\r\n                if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                    $Jssor$.$CssZIndex(elmt, ($Jssor$.$CssZIndex(elmt) || 0) + 1);\r\n                }\r\n                if (_Options.$HWA && $Jssor$.$WebKitVersion()) {\r\n                    if ($Jssor$.$WebKitVersion() < 534 || (!_SlideshowEnabled && !$Jssor$.$IsBrowserChrome())) {\r\n                        $Jssor$.$EnableHWA(elmt);\r\n                    }\r\n                }\r\n            }\r\n\r\n            var childElements = $Jssor$.$Children(elmt);\r\n\r\n            $Jssor$.$Each(childElements, function (childElement, i) {\r\n\r\n                var childTagName = childElement.tagName;\r\n                var uAttribute = $Jssor$.$AttributeEx(childElement, \"u\");\r\n                if (uAttribute == \"player\" && !_PlayerInstanceElement) {\r\n                    _PlayerInstanceElement = childElement;\r\n                    if (_PlayerInstanceElement.pInstance) {\r\n                        PlayerAvailableEventHandler();\r\n                    }\r\n                    else {\r\n                        $Jssor$.$AddEvent(_PlayerInstanceElement, \"dataavailable\", PlayerAvailableEventHandler);\r\n                    }\r\n                }\r\n\r\n                if (uAttribute == \"caption\") {\r\n                    if (!$Jssor$.$IsBrowserIE() && !fresh) {\r\n\r\n                        //if (childTagName == \"A\") {\r\n                        //    $Jssor$.$RemoveEvent(childElement, \"click\", ContentClickEventHandler);\r\n                        //    $Jssor$.$Attribute(childElement, \"jssor-content\", null);\r\n                        //}\r\n\r\n                        var captionElement = $Jssor$.$CloneNode(childElement, false, true);\r\n                        $Jssor$.$InsertBefore(captionElement, childElement, elmt);\r\n                        $Jssor$.$RemoveElement(childElement, elmt);\r\n                        childElement = captionElement;\r\n\r\n                        fresh = true;\r\n                    }\r\n                }\r\n                else if (!_ContentRefreshed && !level && !_ImageItem) {\r\n\r\n                    if (childTagName == \"A\") {\r\n                        if ($Jssor$.$AttributeEx(childElement, \"u\") == \"image\") {\r\n                            _ImageItem = $Jssor$.$FindChildByTag(childElement, \"IMG\");\r\n\r\n                            $JssorDebug$.$Execute(function () {\r\n                                if (!_ImageItem) {\r\n                                    $JssorDebug$.$Error(\"slide html code definition error, no 'IMG' found in a 'image with link' slide.\\r\\n\" + elmt.outerHTML);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            _ImageItem = $Jssor$.$FindChild(childElement, \"image\", true);\r\n                        }\r\n\r\n                        if (_ImageItem) {\r\n                            _LinkItemOrigin = childElement;\r\n                            $Jssor$.$SetStyles(_LinkItemOrigin, _StyleDef);\r\n\r\n                            _LinkItem = $Jssor$.$CloneNode(_LinkItemOrigin, true);\r\n                            //$Jssor$.$AddEvent(_LinkItem, \"click\", ContentClickEventHandler);\r\n\r\n                            $Jssor$.$CssDisplay(_LinkItem, \"block\");\r\n                            $Jssor$.$SetStyles(_LinkItem, _StyleDef);\r\n                            $Jssor$.$CssOpacity(_LinkItem, 0);\r\n                            $Jssor$.$Css(_LinkItem, \"backgroundColor\", \"#000\");\r\n                        }\r\n                    }\r\n                    else if (childTagName == \"IMG\" && $Jssor$.$AttributeEx(childElement, \"u\") == \"image\") {\r\n                        _ImageItem = childElement;\r\n                    }\r\n\r\n                    if (_ImageItem) {\r\n                        _ImageItem.border = 0;\r\n                        $Jssor$.$SetStyles(_ImageItem, _StyleDef);\r\n                    }\r\n                }\r\n\r\n                //if (!$Jssor$.$Attribute(childElement, \"jssor-content\")) {\r\n                //    //cancel click event on <A> element when a drag of slide succeeded\r\n                //    $Jssor$.$AddEvent(childElement, \"click\", ContentClickEventHandler);\r\n                //    $Jssor$.$Attribute(childElement, \"jssor-content\", true);\r\n                //}\r\n\r\n                RefreshContent(childElement, fresh, level +1);\r\n            });\r\n        }\r\n\r\n        _SelfSlideItem.$OnInnerOffsetChange = function (oldOffset, newOffset) {\r\n            var slidePosition = _DisplayPieces - newOffset;\r\n\r\n            SetPosition(_Wrapper, slidePosition);\r\n\r\n            //following lines are for future usage, not ready yet\r\n            //if (!_IsDragging || !_IsCaptionSliderPlayingWhenDragStart) {\r\n            //    var _DealWithParallax;\r\n            //    if (IsCurrentSlideIndex(slideIndex)) {\r\n            //        if (_CaptionSliderOptions.$PlayOutMode == 2)\r\n            //            _DealWithParallax = true;\r\n            //    }\r\n            //    else {\r\n            //        if (!_CaptionSliderOptions.$PlayInMode) {\r\n            //            //PlayInMode: 0 none\r\n            //            _CaptionSliderIn.$GoToEnd();\r\n            //        }\r\n            //        //else if (_CaptionSliderOptions.$PlayInMode == 1) {\r\n            //        //    //PlayInMode: 1 chain\r\n            //        //    _CaptionSliderIn.$GoToPosition(0);\r\n            //        //}\r\n            //        else if (_CaptionSliderOptions.$PlayInMode == 2) {\r\n            //            //PlayInMode: 2 parallel\r\n            //            _DealWithParallax = true;\r\n            //        }\r\n            //    }\r\n\r\n            //    if (_DealWithParallax) {\r\n            //        _CaptionSliderIn.$GoToPosition((_CaptionSliderIn.$GetPosition_OuterEnd() - _CaptionSliderIn.$GetPosition_OuterBegin()) * Math.abs(newOffset - 1) * .8 + _CaptionSliderIn.$GetPosition_OuterBegin());\r\n            //    }\r\n            //}\r\n        };\r\n\r\n        _SelfSlideItem.$GetCaptionSliderIn = function () {\r\n            return _CaptionSliderIn;\r\n        };\r\n\r\n        _SelfSlideItem.$GetCaptionSliderOut = function () {\r\n            return _CaptionSliderOut;\r\n        };\r\n\r\n        _SelfSlideItem.$Index = slideIndex;\r\n\r\n        $JssorObject$.call(_SelfSlideItem);\r\n\r\n        //SlideItem Constructor\r\n        {\r\n\r\n            var thumb = $Jssor$.$FindChild(slideElmt, \"thumb\", true);\r\n            if (thumb) {\r\n                _SelfSlideItem.$Thumb = $Jssor$.$CloneNode(thumb);\r\n                $Jssor$.$RemoveAttribute(thumb, \"id\");\r\n                $Jssor$.$HideElement(thumb);\r\n            }\r\n            $Jssor$.$ShowElement(slideElmt);\r\n\r\n            _LoadingScreen = $Jssor$.$CloneNode(_LoadingContainer);\r\n            $Jssor$.$CssZIndex(_LoadingScreen, 1000);\r\n\r\n            //cancel click event on <A> element when a drag of slide succeeded\r\n            $Jssor$.$AddEvent(slideElmt, \"click\", SlideClickEventHandler);\r\n\r\n            ResetCaptionSlider(true);\r\n\r\n            _SelfSlideItem.$Image = _ImageItem;\r\n            _SelfSlideItem.$Link = _LinkItem;\r\n\r\n            _SelfSlideItem.$Item = slideElmt;\r\n\r\n            _SelfSlideItem.$Wrapper = _Wrapper = slideElmt;\r\n            $Jssor$.$AppendChild(_Wrapper, _LoadingScreen);\r\n\r\n            _SelfSlider.$On(203, ParkEventHandler);\r\n            _SelfSlider.$On(28, FreezeEventHandler);\r\n            _SelfSlider.$On(24, SwipeStartEventHandler);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                _SequenceNumber = _SlideItemCreatedCount++;\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_Wrapper, \"debug-id\", \"slide-\" + slideIndex);\r\n            });\r\n        }\r\n    }\r\n    //SlideItem\r\n\r\n    //Processor\r\n    function Processor(slideElmt, slideIndex, slideshowProcessor, captionSliderIn, captionSliderOut) {\r\n\r\n        var _SelfProcessor = this;\r\n\r\n        var _ProgressBegin = 0;\r\n        var _SlideshowBegin = 0;\r\n        var _SlideshowEnd;\r\n        var _CaptionInBegin;\r\n        var _IdleBegin;\r\n        var _IdleEnd;\r\n        var _ProgressEnd;\r\n\r\n        var _IsSlideshowRunning;\r\n        var _IsRollingBack;\r\n\r\n        var _PlayerInstance;\r\n        var _IsPlayerOnService;\r\n\r\n        var slideItem = _SlideItems[slideIndex];\r\n\r\n        $JssorAnimator$.call(_SelfProcessor, 0, 0);\r\n\r\n        function UpdateLink() {\r\n\r\n            $Jssor$.$Empty(_LinkContainer);\r\n\r\n            if (_ShowLink && _IsSlideshowRunning && slideItem.$Link) {\r\n                $Jssor$.$AppendChild(_LinkContainer, slideItem.$Link);\r\n            }\r\n\r\n            $Jssor$.$ShowElement(_LinkContainer, !_IsSlideshowRunning && slideItem.$Image);\r\n        }\r\n\r\n        function ProcessCompleteEventHandler() {\r\n\r\n            if (_IsRollingBack) {\r\n                _IsRollingBack = false;\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_ROLLBACK_END, slideIndex, _IdleEnd, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n                _SelfProcessor.$GoToPosition(_IdleBegin);\r\n            }\r\n\r\n            _SelfProcessor.$Replay();\r\n        }\r\n\r\n        function PlayerSwitchEventHandler(isOnService) {\r\n            _IsPlayerOnService = isOnService;\r\n\r\n            _SelfProcessor.$Stop();\r\n            _SelfProcessor.$Replay();\r\n        }\r\n\r\n        _SelfProcessor.$Replay = function () {\r\n\r\n            var currentPosition = _SelfProcessor.$GetPosition_Display();\r\n\r\n            if (!_IsDragging && !_IsSliding && !_IsPlayerOnService && _CurrentSlideIndex == slideIndex) {\r\n\r\n                if (!currentPosition) {\r\n                    if (_SlideshowEnd && !_IsSlideshowRunning) {\r\n                        _IsSlideshowRunning = true;\r\n\r\n                        _SelfProcessor.$OpenSlideshowPanel(true);\r\n\r\n                        _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SLIDESHOW_START, slideIndex, _ProgressBegin, _SlideshowBegin, _SlideshowEnd, _ProgressEnd);\r\n                    }\r\n\r\n                    UpdateLink();\r\n                }\r\n\r\n                var toPosition;\r\n                var stateEvent = $JssorSlider$.$EVT_STATE_CHANGE;\r\n\r\n                if (currentPosition != _ProgressEnd) {\r\n                    if (currentPosition == _IdleEnd) {\r\n                        toPosition = _ProgressEnd;\r\n                    }\r\n                    else if (currentPosition == _IdleBegin) {\r\n                        toPosition = _IdleEnd;\r\n                    }\r\n                    else if (!currentPosition) {\r\n                        toPosition = _IdleBegin;\r\n                    }\r\n                    else if (currentPosition > _IdleEnd) {\r\n                        _IsRollingBack = true;\r\n                        toPosition = _IdleEnd;\r\n                        stateEvent = $JssorSlider$.$EVT_ROLLBACK_START;\r\n                    }\r\n                    else {\r\n                        //continue from break (by drag or lock)\r\n                        toPosition = _SelfProcessor.$GetPlayToPosition();\r\n                    }\r\n                }\r\n\r\n                _SelfSlider.$TriggerEvent(stateEvent, slideIndex, currentPosition, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n\r\n                var allowAutoPlay = _AutoPlay && (!_HoverToPause || _NotOnHover);\r\n\r\n                if (currentPosition == _ProgressEnd) {\r\n                    (_IdleEnd != _ProgressEnd && !(_HoverToPause & 12) || allowAutoPlay) && slideItem.$GoForNextSlide();\r\n                }\r\n                else if (allowAutoPlay || currentPosition != _IdleEnd) {\r\n                    _SelfProcessor.$PlayToPosition(toPosition, ProcessCompleteEventHandler);\r\n                }\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$AdjustIdleOnPark = function () {\r\n            if (_IdleEnd == _ProgressEnd && _IdleEnd == _SelfProcessor.$GetPosition_Display())\r\n                _SelfProcessor.$GoToPosition(_IdleBegin);\r\n        };\r\n\r\n        _SelfProcessor.$Abort = function () {\r\n            _SlideshowRunner && _SlideshowRunner.$Index == slideIndex && _SlideshowRunner.$Clear();\r\n\r\n            var currentPosition = _SelfProcessor.$GetPosition_Display();\r\n            if (currentPosition < _ProgressEnd) {\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_STATE_CHANGE, slideIndex, -currentPosition - 1, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$OpenSlideshowPanel = function (open) {\r\n            if (slideshowProcessor) {\r\n                $Jssor$.$CssOverflow(_SlideshowPanel, open && slideshowProcessor.$Transition.$Outside ? \"\" : \"hidden\");\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$OnInnerOffsetChange = function (oldPosition, newPosition) {\r\n\r\n            if (_IsSlideshowRunning && newPosition >= _SlideshowEnd) {\r\n                _IsSlideshowRunning = false;\r\n                UpdateLink();\r\n                slideItem.$UnhideContentForSlideshow();\r\n                _SlideshowRunner.$Clear();\r\n\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SLIDESHOW_END, slideIndex, _ProgressBegin, _SlideshowBegin, _SlideshowEnd, _ProgressEnd);\r\n            }\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_PROGRESS_CHANGE, slideIndex, newPosition, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n        };\r\n\r\n        _SelfProcessor.$SetPlayer = function (playerInstance) {\r\n            if (playerInstance && !_PlayerInstance) {\r\n                _PlayerInstance = playerInstance;\r\n\r\n                playerInstance.$On($JssorPlayer$.$EVT_SWITCH, PlayerSwitchEventHandler);\r\n            }\r\n        };\r\n\r\n        //Processor Constructor\r\n        {\r\n            if (slideshowProcessor) {\r\n                _SelfProcessor.$Chain(slideshowProcessor);\r\n            }\r\n\r\n            _SlideshowEnd = _SelfProcessor.$GetPosition_OuterEnd();\r\n            _CaptionInBegin = _SelfProcessor.$GetPosition_OuterEnd();\r\n            _SelfProcessor.$Chain(captionSliderIn);\r\n            _IdleBegin = captionSliderIn.$GetPosition_OuterEnd();\r\n            _IdleEnd = _IdleBegin + ($Jssor$.$ParseFloat($Jssor$.$AttributeEx(slideElmt, \"idle\")) || _AutoPlayInterval);\r\n\r\n            captionSliderOut.$Shift(_IdleEnd);\r\n            _SelfProcessor.$Combine(captionSliderOut);\r\n            _ProgressEnd = _SelfProcessor.$GetPosition_OuterEnd();\r\n        }\r\n    }\r\n    //Processor\r\n    //#endregion\r\n\r\n    function SetPosition(elmt, position) {\r\n        var orientation = _DragOrientation > 0 ? _DragOrientation : _PlayOrientation;\r\n        var x = _StepLengthX * position * (orientation & 1);\r\n        var y = _StepLengthY * position * ((orientation >> 1) & 1);\r\n\r\n        x = Math.round(x);\r\n        y = Math.round(y);\r\n\r\n        $Jssor$.$CssLeft(elmt, x);\r\n        $Jssor$.$CssTop(elmt, y);\r\n    }\r\n\r\n    //#region Event handling begin\r\n\r\n    function RecordFreezePoint() {\r\n        _CarouselPlaying_OnFreeze = _IsSliding;\r\n        _PlayToPosition_OnFreeze = _CarouselPlayer.$GetPlayToPosition();\r\n        _Position_OnFreeze = _Conveyor.$GetPosition();\r\n    }\r\n\r\n    function Freeze() {\r\n        RecordFreezePoint();\r\n\r\n        if (_IsDragging || !_NotOnHover && (_HoverToPause & 12)) {\r\n            _CarouselPlayer.$Stop();\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_FREEZE);\r\n        }\r\n    }\r\n\r\n    function Unfreeze(byDrag) {\r\n\r\n        if (!_IsDragging && (_NotOnHover || !(_HoverToPause & 12)) && !_CarouselPlayer.$IsPlaying()) {\r\n\r\n            var currentPosition = _Conveyor.$GetPosition();\r\n            var toPosition = Math.ceil(_Position_OnFreeze);\r\n\r\n            if (byDrag && Math.abs(_DragOffsetTotal) >= _Options.$MinDragOffsetToSlide) {\r\n                toPosition = Math.ceil(currentPosition);\r\n                toPosition += _DragIndexAdjust;\r\n            }\r\n\r\n            if (!(_Loop & 1)) {\r\n                toPosition = Math.min(_SlideCount - _DisplayPieces, Math.max(toPosition, 0));\r\n            }\r\n\r\n            var t = Math.abs(toPosition - currentPosition);\r\n            t = 1 - Math.pow(1 - t, 5);\r\n\r\n            if (!_LastDragSucceded && _CarouselPlaying_OnFreeze) {\r\n                _CarouselPlayer.$Continue(_PlayToPosition_OnFreeze);\r\n            }\r\n            else if (currentPosition == toPosition) {\r\n                _CurrentSlideItem.$EnablePlayer();\r\n                _CurrentSlideItem.$TryActivate();\r\n            }\r\n            else {\r\n\r\n                _CarouselPlayer.$PlayCarousel(currentPosition, toPosition, t * _SlideDuration);\r\n            }\r\n        }\r\n    }\r\n\r\n    function PreventDragSelectionEvent(event) {\r\n        if (!$Jssor$.$AttributeEx($Jssor$.$EvtSrc(event), \"nodrag\")) {\r\n            $Jssor$.$CancelEvent(event);\r\n        }\r\n    }\r\n\r\n    function OnTouchStart(event) {\r\n        OnDragStart(event, 1);\r\n    }\r\n\r\n    function OnDragStart(event, touch) {\r\n        event = $Jssor$.$GetEvent(event);\r\n        var eventSrc = $Jssor$.$EvtSrc(event);\r\n\r\n        if (!_DragOrientationRegistered && !$Jssor$.$AttributeEx(eventSrc, \"nodrag\") && RegisterDrag() && (!touch || event.touches.length == 1)) {\r\n            _IsDragging = true;\r\n            _DragInvalid = false;\r\n            _LoadingTicket = null;\r\n\r\n            $Jssor$.$AddEvent(document, touch ? \"touchmove\" : \"mousemove\", OnDragMove);\r\n\r\n            _LastTimeMoveByDrag = $Jssor$.$GetNow() - 50;\r\n\r\n            _LastDragSucceded = 0;\r\n            Freeze();\r\n\r\n            if (!_CarouselPlaying_OnFreeze)\r\n                _DragOrientation = 0;\r\n\r\n            if (touch) {\r\n                var touchPoint = event.touches[0];\r\n                _DragStartMouseX = touchPoint.clientX;\r\n                _DragStartMouseY = touchPoint.clientY;\r\n            }\r\n            else {\r\n                var mousePoint = $Jssor$.$MousePosition(event);\r\n\r\n                _DragStartMouseX = mousePoint.x;\r\n                _DragStartMouseY = mousePoint.y;\r\n            }\r\n\r\n            _DragOffsetTotal = 0;\r\n            _DragOffsetLastTime = 0;\r\n            _DragIndexAdjust = 0;\r\n\r\n            //Trigger EVT_DRAGSTART\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_DRAG_START, GetRealIndex(_Position_OnFreeze), _Position_OnFreeze, event);\r\n        }\r\n    }\r\n\r\n    function OnDragMove(event) {\r\n        if (_IsDragging) {\r\n            event = $Jssor$.$GetEvent(event);\r\n\r\n            var actionPoint;\r\n\r\n            if (event.type != \"mousemove\") {\r\n                var touch = event.touches[0];\r\n                actionPoint = { x: touch.clientX, y: touch.clientY };\r\n            }\r\n            else {\r\n                actionPoint = $Jssor$.$MousePosition(event);\r\n            }\r\n\r\n            if (actionPoint) {\r\n                var distanceX = actionPoint.x - _DragStartMouseX;\r\n                var distanceY = actionPoint.y - _DragStartMouseY;\r\n\r\n\r\n                if (Math.floor(_Position_OnFreeze) != _Position_OnFreeze)\r\n                    _DragOrientation = _DragOrientation || (_PlayOrientation & _DragOrientationRegistered);\r\n\r\n                if ((distanceX || distanceY) && !_DragOrientation) {\r\n                    if (_DragOrientationRegistered == 3) {\r\n                        if (Math.abs(distanceY) > Math.abs(distanceX)) {\r\n                            _DragOrientation = 2;\r\n                        }\r\n                        else\r\n                            _DragOrientation = 1;\r\n                    }\r\n                    else {\r\n                        _DragOrientation = _DragOrientationRegistered;\r\n                    }\r\n\r\n                    if (_IsTouchDevice && _DragOrientation == 1 && Math.abs(distanceY) - Math.abs(distanceX) > 3) {\r\n                        _DragInvalid = true;\r\n                    }\r\n                }\r\n\r\n                if (_DragOrientation) {\r\n                    var distance = distanceY;\r\n                    var stepLength = _StepLengthY;\r\n\r\n                    if (_DragOrientation == 1) {\r\n                        distance = distanceX;\r\n                        stepLength = _StepLengthX;\r\n                    }\r\n\r\n                    if (!(_Loop & 1)) {\r\n                        if (distance > 0) {\r\n                            var normalDistance = stepLength * _CurrentSlideIndex;\r\n                            var sqrtDistance = distance - normalDistance;\r\n                            if (sqrtDistance > 0) {\r\n                                distance = normalDistance + Math.sqrt(sqrtDistance) * 5;\r\n                            }\r\n                        }\r\n\r\n                        if (distance < 0) {\r\n                            var normalDistance = stepLength * (_SlideCount - _DisplayPieces - _CurrentSlideIndex);\r\n                            var sqrtDistance = -distance - normalDistance;\r\n\r\n                            if (sqrtDistance > 0) {\r\n                                distance = -normalDistance - Math.sqrt(sqrtDistance) * 5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_DragOffsetTotal - _DragOffsetLastTime < -2) {\r\n                        _DragIndexAdjust = 0;\r\n                    }\r\n                    else if (_DragOffsetTotal - _DragOffsetLastTime > 2) {\r\n                        _DragIndexAdjust = -1;\r\n                    }\r\n\r\n                    _DragOffsetLastTime = _DragOffsetTotal;\r\n                    _DragOffsetTotal = distance;\r\n                    _PositionToGoByDrag = _Position_OnFreeze - _DragOffsetTotal / stepLength / (_ScaleRatio || 1);\r\n\r\n                    if (_DragOffsetTotal && _DragOrientation && !_DragInvalid) {\r\n                        $Jssor$.$CancelEvent(event);\r\n                        if (!_IsSliding) {\r\n                            _CarouselPlayer.$StandBy(_PositionToGoByDrag);\r\n                        }\r\n                        else\r\n                            _CarouselPlayer.$SetStandByPosition(_PositionToGoByDrag);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function OnDragEnd() {\r\n        UnregisterDrag();\r\n\r\n        if (_IsDragging) {\r\n\r\n            _IsDragging = false;\r\n\r\n            _LastTimeMoveByDrag = $Jssor$.$GetNow();\r\n\r\n            $Jssor$.$RemoveEvent(document, \"mousemove\", OnDragMove);\r\n            $Jssor$.$RemoveEvent(document, \"touchmove\", OnDragMove);\r\n\r\n            _LastDragSucceded = _DragOffsetTotal;\r\n\r\n            _CarouselPlayer.$Stop();\r\n\r\n            var currentPosition = _Conveyor.$GetPosition();\r\n\r\n            //Trigger EVT_DRAG_END\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_DRAG_END, GetRealIndex(currentPosition), currentPosition, GetRealIndex(_Position_OnFreeze), _Position_OnFreeze);\r\n\r\n            (_HoverToPause & 12) && RecordFreezePoint();\r\n\r\n            Unfreeze(true);\r\n        }\r\n    }\r\n\r\n    function SlidesClickEventHandler(event) {\r\n        if (_LastDragSucceded) {\r\n            $Jssor$.$StopEvent(event);\r\n\r\n            var checkElement = $Jssor$.$EvtSrc(event);\r\n            while (checkElement && _SlidesContainer !== checkElement) {\r\n                if (checkElement.tagName == \"A\") {\r\n                    $Jssor$.$CancelEvent(event);\r\n                }\r\n                try {\r\n                    checkElement = checkElement.parentNode;\r\n                } catch (e) {\r\n                    // Firefox sometimes fires events for XUL elements, which throws\r\n                    // a \"permission denied\" error. so this is not a child.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    function SetCurrentSlideIndex(index) {\r\n        _PrevSlideItem = _SlideItems[_CurrentSlideIndex];\r\n        _PreviousSlideIndex = _CurrentSlideIndex;\r\n        _CurrentSlideIndex = GetRealIndex(index);\r\n        _CurrentSlideItem = _SlideItems[_CurrentSlideIndex];\r\n        ResetNavigator(index);\r\n        return _CurrentSlideIndex;\r\n    }\r\n\r\n    function OnPark(slideIndex, prevIndex) {\r\n        _DragOrientation = 0;\r\n\r\n        SetCurrentSlideIndex(slideIndex);\r\n\r\n        //Trigger EVT_PARK\r\n        _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_PARK, GetRealIndex(slideIndex), prevIndex);\r\n    }\r\n\r\n    function ResetNavigator(index, temp) {\r\n        _TempSlideIndex = index;\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$SetCurrentIndex(GetRealIndex(index), index, temp);\r\n        });\r\n    }\r\n\r\n    function RegisterDrag() {\r\n        var dragRegistry = $JssorSlider$.$DragRegistry || 0;\r\n        var dragOrientation = _DragEnabled;\r\n        if (_IsTouchDevice)\r\n            (dragOrientation & 1) && (dragOrientation &= 1);\r\n        $JssorSlider$.$DragRegistry |= dragOrientation;\r\n\r\n        return (_DragOrientationRegistered = dragOrientation & ~dragRegistry);\r\n    }\r\n\r\n    function UnregisterDrag() {\r\n        if (_DragOrientationRegistered) {\r\n            $JssorSlider$.$DragRegistry &= ~_DragEnabled;\r\n            _DragOrientationRegistered = 0;\r\n        }\r\n    }\r\n\r\n    function CreatePanel() {\r\n        var div = $Jssor$.$CreateDiv();\r\n\r\n        $Jssor$.$SetStyles(div, _StyleDef);\r\n        $Jssor$.$CssPosition(div, \"absolute\");\r\n\r\n        return div;\r\n    }\r\n\r\n    function GetRealIndex(index) {\r\n        return (index % _SlideCount + _SlideCount) % _SlideCount;\r\n    }\r\n\r\n    function IsCurrentSlideIndex(index) {\r\n        return GetRealIndex(index) == _CurrentSlideIndex;\r\n    }\r\n\r\n    function IsPreviousSlideIndex(index) {\r\n        return GetRealIndex(index) == _PreviousSlideIndex;\r\n    }\r\n\r\n    //Navigation Request Handler\r\n    function NavigationClickHandler(index, relative) {\r\n        var toIndex = index;\r\n\r\n        if (relative) {\r\n            if (!_Loop) {\r\n                //Stop at threshold\r\n                toIndex = Math.min(Math.max(toIndex + _TempSlideIndex, 0), _SlideCount - _DisplayPieces);\r\n                relative = false;\r\n            }\r\n            else if (_Loop & 2) {\r\n                //Rewind\r\n                toIndex = GetRealIndex(toIndex + _TempSlideIndex);\r\n                relative = false;\r\n            }\r\n        }\r\n        else if (_Loop) {\r\n            toIndex = _SelfSlider.$GetVirtualIndex(toIndex);\r\n        }\r\n\r\n        PlayTo(toIndex, _Options.$SlideDuration, relative);\r\n    }\r\n\r\n    function ShowNavigators() {\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Show(navigator.$Options.$ChanceToShow <= _NotOnHover);\r\n        });\r\n    }\r\n\r\n    function MainContainerMouseLeaveEventHandler() {\r\n        if (!_NotOnHover) {\r\n\r\n            //$JssorDebug$.$Log(\"mouseleave\");\r\n\r\n            _NotOnHover = 1;\r\n\r\n            ShowNavigators();\r\n\r\n            if (!_IsDragging) {\r\n                (_HoverToPause & 12) && Unfreeze();\r\n                (_HoverToPause & 3) && _SlideItems[_CurrentSlideIndex].$TryActivate();\r\n            }\r\n        }\r\n    }\r\n\r\n    function MainContainerMouseEnterEventHandler() {\r\n\r\n        if (_NotOnHover) {\r\n\r\n            //$JssorDebug$.$Log(\"mouseenter\");\r\n\r\n            _NotOnHover = 0;\r\n\r\n            ShowNavigators();\r\n\r\n            _IsDragging || !(_HoverToPause & 12) || Freeze();\r\n        }\r\n    }\r\n\r\n    function AdjustSlidesContainerSize() {\r\n        _StyleDef = { $Width: _SlideWidth, $Height: _SlideHeight, $Top: 0, $Left: 0 };\r\n\r\n        $Jssor$.$Each(_SlideElmts, function (slideElmt, i) {\r\n\r\n            $Jssor$.$SetStyles(slideElmt, _StyleDef);\r\n            $Jssor$.$CssPosition(slideElmt, \"absolute\");\r\n            $Jssor$.$CssOverflow(slideElmt, \"hidden\");\r\n\r\n            $Jssor$.$HideElement(slideElmt);\r\n        });\r\n\r\n        $Jssor$.$SetStyles(_LoadingContainer, _StyleDef);\r\n    }\r\n\r\n    function PlayToOffset(offset, slideDuration) {\r\n        PlayTo(offset, slideDuration, true);\r\n    }\r\n\r\n    function PlayTo(slideIndex, slideDuration, relative) {\r\n        /// <summary>\r\n        ///     PlayTo( slideIndex [, slideDuration] ); //Play slider to position 'slideIndex' within a period calculated base on 'slideDuration'.\r\n        /// </summary>\r\n        /// <param name=\"slideIndex\" type=\"Number\">\r\n        ///     slide slideIndex or position will be playing to\r\n        /// </param>\r\n        /// <param name=\"slideDuration\" type=\"Number\" optional=\"true\">\r\n        ///     base slide duration in milliseconds to calculate the whole duration to complete this play request.\r\n        ///     default value is '$SlideDuration' value which is specified when initialize the slider.\r\n        /// </param>\r\n        /// http://msdn.microsoft.com/en-us/library/vstudio/bb385682.aspx\r\n        /// http://msdn.microsoft.com/en-us/library/vstudio/hh542720.aspx\r\n        if (_CarouselEnabled && (!_IsDragging && (_NotOnHover || !(_HoverToPause & 12)) || _Options.$NaviQuitDrag)) {\r\n            _IsSliding = true;\r\n            _IsDragging = false;\r\n            _CarouselPlayer.$Stop();\r\n\r\n            {\r\n                //Slide Duration\r\n                if (slideDuration == undefined)\r\n                    slideDuration = _SlideDuration;\r\n\r\n                var positionDisplay = _Carousel.$GetPosition_Display();\r\n                var positionTo = slideIndex;\r\n                if (relative) {\r\n                    positionTo = positionDisplay + slideIndex;\r\n                    if (slideIndex > 0)\r\n                        positionTo = Math.ceil(positionTo);\r\n                    else\r\n                        positionTo = Math.floor(positionTo);\r\n                }\r\n\r\n                if (_Loop & 2) {\r\n                    //Rewind\r\n                    positionTo = GetRealIndex(positionTo);\r\n                }\r\n                if (!(_Loop & 1)) {\r\n                    //Stop at threshold\r\n                    positionTo = Math.max(0, Math.min(positionTo, _SlideCount - _DisplayPieces));\r\n                }\r\n\r\n                var positionOffset = (positionTo - positionDisplay) % _SlideCount;\r\n                positionTo = positionDisplay + positionOffset;\r\n\r\n                var duration = positionDisplay == positionTo ? 0 : slideDuration * Math.abs(positionOffset);\r\n                duration = Math.min(duration, slideDuration * _DisplayPieces * 1.5);\r\n\r\n                _CarouselPlayer.$PlayCarousel(positionDisplay, positionTo, duration || 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    //private functions\r\n\r\n    //member functions\r\n\r\n    _SelfSlider.$PlayTo = PlayTo;\r\n\r\n    _SelfSlider.$GoTo = function (slideIndex) {\r\n        /// <summary>\r\n        ///     instance.$GoTo( slideIndex );   //Go to the specifed slide immediately with no play.\r\n        /// </summary>\r\n        //PlayTo(slideIndex, 1);\r\n        _Conveyor.$GoToPosition(slideIndex);\r\n    };\r\n\r\n    _SelfSlider.$Next = function () {\r\n        /// <summary>\r\n        ///     instance.$Next();   //Play the slider to next slide.\r\n        /// </summary>\r\n        PlayToOffset(1);\r\n    };\r\n\r\n    _SelfSlider.$Prev = function () {\r\n        /// <summary>\r\n        ///     instance.$Prev();   //Play the slider to previous slide.\r\n        /// </summary>\r\n        PlayToOffset(-1);\r\n    };\r\n\r\n    _SelfSlider.$Pause = function () {\r\n        /// <summary>\r\n        ///     instance.$Pause();   //Pause the slider, prevent it from auto playing.\r\n        /// </summary>\r\n        _AutoPlay = false;\r\n    };\r\n\r\n    _SelfSlider.$Play = function () {\r\n        /// <summary>\r\n        ///     instance.$Play();   //Start auto play if the slider is currently paused.\r\n        /// </summary>\r\n        if (!_AutoPlay) {\r\n            _AutoPlay = true;\r\n            _SlideItems[_CurrentSlideIndex] && _SlideItems[_CurrentSlideIndex].$TryActivate();\r\n        }\r\n    };\r\n\r\n    _SelfSlider.$SetSlideshowTransitions = function (transitions) {\r\n        /// <summary>\r\n        ///     instance.$SetSlideshowTransitions( transitions );   //Reset slideshow transitions for the slider.\r\n        /// </summary>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!transitions || !transitions.length) {\r\n                $JssorDebug$.$Error(\"Can not set slideshow transitions, no transitions specified.\");\r\n            }\r\n        });\r\n\r\n        //$Jssor$.$TranslateTransitions(transitions);    //for old transition compatibility\r\n        _Options.$SlideshowOptions.$Transitions = transitions;\r\n    };\r\n\r\n    _SelfSlider.$SetCaptionTransitions = function (transitions) {\r\n        /// <summary>\r\n        ///     instance.$SetCaptionTransitions( transitions );   //Reset caption transitions for the slider.\r\n        /// </summary>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!transitions || !transitions.length) {\r\n                $JssorDebug$.$Error(\"Can not set caption transitions, no transitions specified\");\r\n            }\r\n        });\r\n\r\n        //$Jssor$.$TranslateTransitions(transitions);    //for old transition compatibility\r\n        _CaptionSliderOptions.$CaptionTransitions = transitions;\r\n        _CaptionSliderOptions.$Version = $Jssor$.$GetNow();\r\n    };\r\n\r\n    _SelfSlider.$SlidesCount = function () {\r\n        /// <summary>\r\n        ///     instance.$SlidesCount();   //Retrieve slides count of the slider.\r\n        /// </summary>\r\n        return _SlideElmts.length;\r\n    };\r\n\r\n    _SelfSlider.$CurrentIndex = function () {\r\n        /// <summary>\r\n        ///     instance.$CurrentIndex();   //Retrieve current slide index of the slider.\r\n        /// </summary>\r\n        return _CurrentSlideIndex;\r\n    };\r\n\r\n    _SelfSlider.$IsAutoPlaying = function () {\r\n        /// <summary>\r\n        ///     instance.$IsAutoPlaying();   //Retrieve auto play status of the slider.\r\n        /// </summary>\r\n        return _AutoPlay;\r\n    };\r\n\r\n    _SelfSlider.$IsDragging = function () {\r\n        /// <summary>\r\n        ///     instance.$IsDragging();   //Retrieve drag status of the slider.\r\n        /// </summary>\r\n        return _IsDragging;\r\n    };\r\n\r\n    _SelfSlider.$IsSliding = function () {\r\n        /// <summary>\r\n        ///     instance.$IsSliding();   //Retrieve right<-->left sliding status of the slider.\r\n        /// </summary>\r\n        return _IsSliding;\r\n    };\r\n\r\n    _SelfSlider.$IsMouseOver = function () {\r\n        /// <summary>\r\n        ///     instance.$IsMouseOver();   //Retrieve mouse over status of the slider.\r\n        /// </summary>\r\n        return !_NotOnHover;\r\n    };\r\n\r\n    _SelfSlider.$LastDragSucceded = function () {\r\n        /// <summary>\r\n        ///     instance.$IsLastDragSucceded();   //Retrieve last drag succeded status, returns 0 if failed, returns drag offset if succeded\r\n        /// </summary>\r\n        return _LastDragSucceded;\r\n    };\r\n\r\n    function OriginalWidth() {\r\n        /// <summary>\r\n        ///     instance.$OriginalWidth();   //Retrieve original width of the slider.\r\n        /// </summary>\r\n        return $Jssor$.$CssWidth(_ScaleWrapper || elmt);\r\n    }\r\n\r\n    function OriginalHeight() {\r\n        /// <summary>\r\n        ///     instance.$OriginalHeight();   //Retrieve original height of the slider.\r\n        /// </summary>\r\n        return $Jssor$.$CssHeight(_ScaleWrapper || elmt);\r\n    }\r\n\r\n    _SelfSlider.$OriginalWidth = _SelfSlider.$GetOriginalWidth = OriginalWidth;\r\n\r\n    _SelfSlider.$OriginalHeight = _SelfSlider.$GetOriginalHeight = OriginalHeight;\r\n\r\n    function Scale(dimension, isHeight) {\r\n        /// <summary>\r\n        ///     instance.$ScaleWidth();   //Retrieve scaled dimension the slider currently displays.\r\n        ///     instance.$ScaleWidth( dimension );   //Scale the slider to new width and keep aspect ratio.\r\n        /// </summary>\r\n\r\n        if (dimension == undefined)\r\n            return $Jssor$.$CssWidth(elmt);\r\n\r\n        if (!_ScaleWrapper) {\r\n            $JssorDebug$.$Execute(function () {\r\n                var originalWidthStr = $Jssor$.$Css(elmt, \"width\");\r\n                var originalHeightStr = $Jssor$.$Css(elmt, \"height\");\r\n                var originalWidth = $Jssor$.$CssP(elmt, \"width\");\r\n                var originalHeight = $Jssor$.$CssP(elmt, \"height\");\r\n\r\n                if (!originalWidthStr || originalWidthStr.indexOf(\"px\") == -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not specified. Please specify 'width' in pixel. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (!originalHeightStr || originalHeightStr.indexOf(\"px\") == -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not specified. Please specify 'height' in pixel. e.g. 'height: 300px;'\");\r\n                }\r\n\r\n                if (originalWidthStr.indexOf('%') != -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not valid. Please specify 'width' in pixel. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (originalHeightStr.indexOf('%') != -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not valid. Please specify 'height' in pixel. e.g. 'height: 300px;'\");\r\n                }\r\n\r\n                if (!originalWidth) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not valid. 'width' of 'outer container' should be positive number. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (!originalHeight) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not valid. 'height' of 'outer container' should be positive number. e.g. 'height: 300px;'\");\r\n                }\r\n            });\r\n\r\n            var innerWrapper = $Jssor$.$CreateDiv(document);\r\n            $Jssor$.$ClassName(innerWrapper, $Jssor$.$ClassName(elmt));\r\n            $Jssor$.$CssCssText(innerWrapper, $Jssor$.$CssCssText(elmt));\r\n            $Jssor$.$CssDisplay(innerWrapper, \"block\");\r\n\r\n            $Jssor$.$CssPosition(innerWrapper, \"relative\");\r\n            $Jssor$.$CssTop(innerWrapper, 0);\r\n            $Jssor$.$CssLeft(innerWrapper, 0);\r\n            $Jssor$.$CssOverflow(innerWrapper, \"visible\");\r\n\r\n            _ScaleWrapper = $Jssor$.$CreateDiv(document);\r\n\r\n            $Jssor$.$CssPosition(_ScaleWrapper, \"absolute\");\r\n            $Jssor$.$CssTop(_ScaleWrapper, 0);\r\n            $Jssor$.$CssLeft(_ScaleWrapper, 0);\r\n            $Jssor$.$CssWidth(_ScaleWrapper, $Jssor$.$CssWidth(elmt));\r\n            $Jssor$.$CssHeight(_ScaleWrapper, $Jssor$.$CssHeight(elmt));\r\n            $Jssor$.$SetStyleTransformOrigin(_ScaleWrapper, \"0 0\");\r\n\r\n            $Jssor$.$AppendChild(_ScaleWrapper, innerWrapper);\r\n\r\n            var children = $Jssor$.$Children(elmt);\r\n            $Jssor$.$AppendChild(elmt, _ScaleWrapper);\r\n\r\n            $Jssor$.$Css(elmt, \"backgroundImage\", \"\");\r\n\r\n            //var noMoveElmts = {\r\n            //    \"navigator\": _BulletNavigatorOptions && _BulletNavigatorOptions.$Scale == false,\r\n            //    \"arrowleft\": _ArrowNavigatorOptions && _ArrowNavigatorOptions.$Scale == false,\r\n            //    \"arrowright\": _ArrowNavigatorOptions && _ArrowNavigatorOptions.$Scale == false,\r\n            //    \"thumbnavigator\": _ThumbnailNavigatorOptions && _ThumbnailNavigatorOptions.$Scale == false,\r\n            //    \"thumbwrapper\": _ThumbnailNavigatorOptions && _ThumbnailNavigatorOptions.$Scale == false\r\n            //};\r\n\r\n            $Jssor$.$Each(children, function (child) {\r\n                $Jssor$.$AppendChild($Jssor$.$AttributeEx(child, \"noscale\") ? elmt : innerWrapper, child);\r\n                //$Jssor$.$AppendChild(noMoveElmts[$Jssor$.$AttributeEx(child, \"u\")] ? elmt : innerWrapper, child);\r\n            });\r\n        }\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!dimension || dimension < 0) {\r\n                $JssorDebug$.$Fail(\"'$ScaleWidth' error, 'dimension' should be positive value.\");\r\n            }\r\n        });\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_InitialScrollWidth) {\r\n                _InitialScrollWidth = _SelfSlider.$Elmt.scrollWidth;\r\n            }\r\n        });\r\n\r\n        _ScaleRatio = dimension / (isHeight ? $Jssor$.$CssHeight : $Jssor$.$CssWidth)(_ScaleWrapper);\r\n        $Jssor$.$CssScale(_ScaleWrapper, _ScaleRatio);\r\n\r\n        var scaleWidth = isHeight ? (_ScaleRatio * OriginalWidth()) : dimension;\r\n        var scaleHeight = isHeight ? dimension : (_ScaleRatio * OriginalHeight());\r\n\r\n        $Jssor$.$CssWidth(elmt, scaleWidth);\r\n        $Jssor$.$CssHeight(elmt, scaleHeight);\r\n\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Relocate(scaleWidth, scaleHeight);\r\n        });\r\n    }\r\n\r\n    _SelfSlider.$ScaleHeight = _SelfSlider.$GetScaleHeight = function (height) {\r\n        /// <summary>\r\n        ///     instance.$ScaleHeight();   //Retrieve scaled height the slider currently displays.\r\n        ///     instance.$ScaleHeight( dimension );   //Scale the slider to new height and keep aspect ratio.\r\n        /// </summary>\r\n\r\n        if (height == undefined)\r\n            return $Jssor$.$CssHeight(elmt);\r\n\r\n        Scale(height, true);\r\n    };\r\n\r\n    _SelfSlider.$ScaleWidth = _SelfSlider.$SetScaleWidth = _SelfSlider.$GetScaleWidth = Scale;\r\n\r\n    _SelfSlider.$GetVirtualIndex = function (index) {\r\n        var parkingIndex = Math.ceil(GetRealIndex(_ParkingPosition / _StepLength));\r\n        var displayIndex = GetRealIndex(index - _TempSlideIndex + parkingIndex);\r\n\r\n        if (displayIndex > _DisplayPieces) {\r\n            if (index - _TempSlideIndex > _SlideCount / 2)\r\n                index -= _SlideCount;\r\n            else if (index - _TempSlideIndex <= -_SlideCount / 2)\r\n                index += _SlideCount;\r\n        }\r\n        else {\r\n            index = _TempSlideIndex + displayIndex - parkingIndex;\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    //member functions\r\n\r\n    $JssorObject$.call(_SelfSlider);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        var outerContainerElmt = $Jssor$.$GetElement(elmt);\r\n        if (!outerContainerElmt)\r\n            $JssorDebug$.$Fail(\"Outer container '\" + elmt + \"' not found.\");\r\n    });\r\n\r\n    //initialize member variables\r\n    _SelfSlider.$Elmt = elmt = $Jssor$.$GetElement(elmt);\r\n    //initialize member variables\r\n\r\n    var _InitialScrollWidth;    //for debug only\r\n    var _CaptionSliderCount = 1;    //for debug only\r\n\r\n    var _Options = $Jssor$.$Extend({\r\n        $FillMode: 0,                   //[Optional] The way to fill image in slide, 0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0\r\n        $LazyLoading: 1,                //[Optional] For image with  lazy loading format (<IMG src2=\"url\" .../>), by default it will be loaded only when the slide comes.\r\n        //But an integer value (maybe 0, 1, 2 or 3) indicates that how far of nearby slides should be loaded immediately as well, default value is 1.\r\n        $StartIndex: 0,                 //[Optional] Index of slide to display when initialize, default value is 0\r\n        $AutoPlay: false,               //[Optional] Whether to auto play, default value is false\r\n        $Loop: 1,                       //[Optional] Enable loop(circular) of carousel or not, 0: stop, 1: loop, 2 rewind, default value is 1\r\n        $HWA: true,                     //[Optional] Enable hardware acceleration or not, default value is true\r\n        $NaviQuitDrag: true,\r\n        $AutoPlaySteps: 1,              //[Optional] Steps to go of every play (this options applys only when slideshow disabled), default value is 1\r\n        $AutoPlayInterval: 3000,        //[Optional] Interval to play next slide since the previous stopped if a slideshow is auto playing, default value is 3000\r\n        $PauseOnHover: 1,               //[Optional] Whether to pause when mouse over if a slider is auto playing, 0 no pause, 1 pause for desktop, 2 pause for touch device, 3 pause for desktop and touch device, 4 freeze for desktop, 8 freeze for touch device, 12 freeze for desktop and touch device, default value is 1\r\n\r\n        $SlideDuration: 500,            //[Optional] Specifies default duration (swipe) for slide in milliseconds, default value is 400\r\n        $SlideEasing: $JssorEasing$.$EaseOutQuad,   //[Optional] Specifies easing for right to left animation, default value is $JssorEasing$.$EaseOutQuad\r\n        $MinDragOffsetToSlide: 20,      //[Optional] Minimum drag offset that trigger slide, default value is 20\r\n        $SlideSpacing: 0,               //[Optional] Space between each slide in pixels, default value is 0\r\n        $DisplayPieces: 1,              //[Optional] Number of pieces to display (the slideshow would be disabled if the value is set to greater than 1), default value is 1\r\n        $ParkingPosition: 0,            //[Optional] The offset position to park slide (this options applys only when slideshow disabled), default value is 0.\r\n        $UISearchMode: 1,               //[Optional] The way (0 parellel, 1 recursive, default value is recursive) to search UI components (slides container, loading screen, navigator container, arrow navigator container, thumbnail navigator container etc.\r\n        $PlayOrientation: 1,            //[Optional] Orientation to play slide (for auto play, navigation), 1 horizental, 2 vertical, 5 horizental reverse, 6 vertical reverse, default value is 1\r\n        $DragOrientation: 1             //[Optional] Orientation to drag slide, 0 no drag, 1 horizental, 2 vertical, 3 both, default value is 1 (Note that the $DragOrientation should be the same as $PlayOrientation when $DisplayPieces is greater than 1, or parking position is not 0)\r\n\r\n    }, options);\r\n\r\n    //going to use $Idle instead of $AutoPlayInterval\r\n    if (_Options.$Idle != undefined)\r\n        _Options.$AutoPlayInterval = _Options.$Idle;\r\n\r\n    //going to use $Cols instead of $DisplayPieces\r\n    if (_Options.$Cols != undefined)\r\n        _Options.$DisplayPieces = _Options.$Cols;\r\n\r\n    //Sodo statement for development time intellisence only\r\n    $JssorDebug$.$Execute(function () {\r\n        _Options = $Jssor$.$Extend({\r\n            $ArrowKeyNavigation: undefined,\r\n            $SlideWidth: undefined,\r\n            $SlideHeight: undefined,\r\n            $SlideshowOptions: undefined,\r\n            $CaptionSliderOptions: undefined,\r\n            $BulletNavigatorOptions: undefined,\r\n            $ArrowNavigatorOptions: undefined,\r\n            $ThumbnailNavigatorOptions: undefined\r\n        },\r\n        _Options);\r\n    });\r\n\r\n    var _PlayOrientation = _Options.$PlayOrientation & 3;\r\n    var _PlayReverse = (_Options.$PlayOrientation & 4) / -4 || 1;\r\n\r\n    var _SlideshowOptions = _Options.$SlideshowOptions;\r\n    var _CaptionSliderOptions = $Jssor$.$Extend({ $Class: $JssorCaptionSliderBase$, $PlayInMode: 1, $PlayOutMode: 1 }, _Options.$CaptionSliderOptions);\r\n    //$Jssor$.$TranslateTransitions(_CaptionSliderOptions.$CaptionTransitions); //for old transition compatibility\r\n    var _BulletNavigatorOptions = _Options.$BulletNavigatorOptions;\r\n    var _ArrowNavigatorOptions = _Options.$ArrowNavigatorOptions;\r\n    var _ThumbnailNavigatorOptions = _Options.$ThumbnailNavigatorOptions;\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_SlideshowOptions && !_SlideshowOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $SlideshowOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_Options.$CaptionSliderOptions && !_Options.$CaptionSliderOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $CaptionSliderOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_BulletNavigatorOptions && !_BulletNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $BulletNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_ArrowNavigatorOptions && !_ArrowNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $ArrowNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_ThumbnailNavigatorOptions && !_ThumbnailNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $ThumbnailNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    var _UISearchNoDeep = !_Options.$UISearchMode;\r\n    var _ScaleWrapper;\r\n    var _SlidesContainer = $Jssor$.$FindChild(elmt, \"slides\", _UISearchNoDeep);\r\n    var _LoadingContainer = $Jssor$.$FindChild(elmt, \"loading\", _UISearchNoDeep) || $Jssor$.$CreateDiv(document);\r\n\r\n    var _BulletNavigatorContainer = $Jssor$.$FindChild(elmt, \"navigator\", _UISearchNoDeep);\r\n\r\n    var _ArrowLeft = $Jssor$.$FindChild(elmt, \"arrowleft\", _UISearchNoDeep);\r\n    var _ArrowRight = $Jssor$.$FindChild(elmt, \"arrowright\", _UISearchNoDeep);\r\n\r\n    var _ThumbnailNavigatorContainer = $Jssor$.$FindChild(elmt, \"thumbnavigator\", _UISearchNoDeep);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        //if (_BulletNavigatorOptions && !_BulletNavigatorContainer) {\r\n        //    throw new Error(\"$BulletNavigatorOptions specified but bullet navigator container (<div u=\\\"navigator\\\" ...) not defined.\");\r\n        //}\r\n        if (_BulletNavigatorContainer && !_BulletNavigatorOptions) {\r\n            throw new Error(\"Bullet navigator container defined but $BulletNavigatorOptions not specified.\");\r\n        }\r\n\r\n        //if (_ArrowNavigatorOptions) {\r\n        //    if (!_ArrowLeft) {\r\n        //        throw new Error(\"$ArrowNavigatorOptions specified, but arrowleft (<span u=\\\"arrowleft\\\" ...) not defined.\");\r\n        //    }\r\n\r\n        //    if (!_ArrowRight) {\r\n        //        throw new Error(\"$ArrowNavigatorOptions specified, but arrowright (<span u=\\\"arrowright\\\" ...) not defined.\");\r\n        //    }\r\n        //}\r\n\r\n        if ((_ArrowLeft || _ArrowRight) && !_ArrowNavigatorOptions) {\r\n            throw new Error(\"arrowleft or arrowright defined, but $ArrowNavigatorOptions not specified.\");\r\n        }\r\n\r\n        //if (_ThumbnailNavigatorOptions && !_ThumbnailNavigatorContainer) {\r\n        //    throw new Error(\"$ThumbnailNavigatorOptions specified, but thumbnail navigator container (<div u=\\\"thumbnavigator\\\" ...) not defined.\");\r\n        //}\r\n\r\n        if (_ThumbnailNavigatorContainer && !_ThumbnailNavigatorOptions) {\r\n            throw new Error(\"Thumbnail navigator container defined, but $ThumbnailNavigatorOptions not specified.\");\r\n        }\r\n    });\r\n\r\n    var _SlidesContainerWidth = $Jssor$.$CssWidth(_SlidesContainer);\r\n    var _SlidesContainerHeight = $Jssor$.$CssHeight(_SlidesContainer);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (isNaN(_SlidesContainerWidth))\r\n            $JssorDebug$.$Fail(\"Width of slides container wrong specification, it should be specified in pixel (like style='width: 600px;').\");\r\n\r\n        if (_SlidesContainerWidth == undefined)\r\n            $JssorDebug$.$Fail(\"Width of slides container not specified, it should be specified in pixel (like style='width: 600px;').\");\r\n\r\n        if (isNaN(_SlidesContainerHeight))\r\n            $JssorDebug$.$Fail(\"Height of slides container wrong specification, it should be specified in pixel (like style='height: 300px;').\");\r\n\r\n        if (_SlidesContainerHeight == undefined)\r\n            $JssorDebug$.$Fail(\"Height of slides container not specified, it should be specified in pixel (like style='height: 300px;').\");\r\n\r\n        var slidesContainerOverflow = $Jssor$.$CssOverflow(_SlidesContainer);\r\n        var slidesContainerOverflowX = $Jssor$.$Css(_SlidesContainer, \"overflowX\");\r\n        var slidesContainerOverflowY = $Jssor$.$Css(_SlidesContainer, \"overflowY\");\r\n        if (slidesContainerOverflow != \"hidden\" && (slidesContainerOverflowX != \"hidden\" || slidesContainerOverflowY != \"hidden\"))\r\n            $JssorDebug$.$Fail(\"Overflow of slides container wrong specification, it should be specified as 'hidden' (style='overflow:hidden;').\");\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!$Jssor$.$IsNumeric(_Options.$DisplayPieces))\r\n            $JssorDebug$.$Fail(\"Option $DisplayPieces error, it should be a numeric value and greater than or equal to 1.\");\r\n\r\n        if (_Options.$DisplayPieces < 1)\r\n            $JssorDebug$.$Fail(\"Option $DisplayPieces error, it should be greater than or equal to 1.\");\r\n\r\n        if (_Options.$DisplayPieces > 1 && _Options.$DragOrientation && _Options.$DragOrientation != _PlayOrientation)\r\n            $JssorDebug$.$Fail(\"Option $DragOrientation error, it should be 0 or the same of $PlayOrientation when $DisplayPieces is greater than 1.\");\r\n\r\n        if (!$Jssor$.$IsNumeric(_Options.$ParkingPosition))\r\n            $JssorDebug$.$Fail(\"Option $ParkingPosition error, it should be a numeric value.\");\r\n\r\n        if (_Options.$ParkingPosition && _Options.$DragOrientation && _Options.$DragOrientation != _PlayOrientation)\r\n            $JssorDebug$.$Fail(\"Option $DragOrientation error, it should be 0 or the same of $PlayOrientation when $ParkingPosition is not equal to 0.\");\r\n    });\r\n\r\n    var _StyleDef;\r\n\r\n    var _SlideElmts = [];\r\n\r\n    {\r\n        var slideElmts = $Jssor$.$Children(_SlidesContainer);\r\n        $Jssor$.$Each(slideElmts, function (slideElmt) {\r\n            if (slideElmt.tagName == \"DIV\" && !$Jssor$.$AttributeEx(slideElmt, \"u\")) {\r\n                _SlideElmts.push(slideElmt);\r\n            }\r\n            else if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                $Jssor$.$CssZIndex(slideElmt, ($Jssor$.$CssZIndex(slideElmt) || 0) + 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_SlideElmts.length < 1) {\r\n            $JssorDebug$.$Error(\"Slides html code definition error, there must be at least 1 slide to initialize a slider.\");\r\n        }\r\n    });\r\n\r\n    var _SlideItemCreatedCount = 0; //for debug only\r\n    var _SlideItemReleasedCount = 0;    //for debug only\r\n\r\n    var _PreviousSlideIndex;\r\n    var _CurrentSlideIndex = -1;\r\n    var _TempSlideIndex;\r\n    var _PrevSlideItem;\r\n    var _CurrentSlideItem;\r\n    var _SlideCount = _SlideElmts.length;\r\n\r\n    var _SlideWidth = _Options.$SlideWidth || _SlidesContainerWidth;\r\n    var _SlideHeight = _Options.$SlideHeight || _SlidesContainerHeight;\r\n\r\n    var _SlideSpacing = _Options.$SlideSpacing;\r\n    var _StepLengthX = _SlideWidth + _SlideSpacing;\r\n    var _StepLengthY = _SlideHeight + _SlideSpacing;\r\n    var _StepLength = (_PlayOrientation & 1) ? _StepLengthX : _StepLengthY;\r\n    var _DisplayPieces = Math.min(_Options.$DisplayPieces, _SlideCount);\r\n\r\n    var _SlideshowPanel;\r\n    var _CurrentBoardIndex = 0;\r\n    var _DragOrientation;\r\n    var _DragOrientationRegistered;\r\n    var _DragInvalid;\r\n\r\n    var _Navigators = [];\r\n    var _BulletNavigator;\r\n    var _ArrowNavigator;\r\n    var _ThumbnailNavigator;\r\n\r\n    var _ShowLink;\r\n\r\n    var _Frozen;\r\n    var _AutoPlay;\r\n    var _AutoPlaySteps = _Options.$AutoPlaySteps;\r\n    var _HoverToPause = _Options.$PauseOnHover;\r\n    var _AutoPlayInterval = _Options.$AutoPlayInterval;\r\n    var _SlideDuration = _Options.$SlideDuration;\r\n\r\n    var _SlideshowRunnerClass;\r\n    var _TransitionsOrder;\r\n\r\n    var _SlideshowEnabled;\r\n    var _ParkingPosition;\r\n    var _CarouselEnabled = _DisplayPieces < _SlideCount;\r\n    var _Loop = _CarouselEnabled ? _Options.$Loop : 0;\r\n\r\n    var _DragEnabled;\r\n    var _LastDragSucceded;\r\n\r\n    var _NotOnHover = 1;   //0 Hovering, 1 Not hovering\r\n\r\n    //Variable Definition\r\n    var _IsSliding;\r\n    var _IsDragging;\r\n    var _LoadingTicket;\r\n\r\n    //The X position of mouse/touch when a drag start\r\n    var _DragStartMouseX = 0;\r\n    //The Y position of mouse/touch when a drag start\r\n    var _DragStartMouseY = 0;\r\n    var _DragOffsetTotal;\r\n    var _DragOffsetLastTime;\r\n    var _DragIndexAdjust;\r\n\r\n    var _Carousel;\r\n    var _Conveyor;\r\n    var _Slideshow;\r\n    var _CarouselPlayer;\r\n    var _SlideContainer = new SlideContainer();\r\n    var _ScaleRatio;\r\n\r\n    //$JssorSlider$ Constructor\r\n    {\r\n        _AutoPlay = _Options.$AutoPlay;\r\n        _SelfSlider.$Options = options;\r\n\r\n        AdjustSlidesContainerSize();\r\n\r\n        $Jssor$.$Attribute(elmt, \"jssor-slider\", true);\r\n\r\n        $Jssor$.$CssZIndex(_SlidesContainer, $Jssor$.$CssZIndex(_SlidesContainer) || 0);\r\n        $Jssor$.$CssPosition(_SlidesContainer, \"absolute\");\r\n        _SlideshowPanel = $Jssor$.$CloneNode(_SlidesContainer, true);\r\n        $Jssor$.$InsertBefore(_SlideshowPanel, _SlidesContainer);\r\n\r\n        if (_SlideshowOptions) {\r\n            _ShowLink = _SlideshowOptions.$ShowLink;\r\n            _SlideshowRunnerClass = _SlideshowOptions.$Class;\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (!_SlideshowOptions.$Transitions || !_SlideshowOptions.$Transitions.length) {\r\n                    $JssorDebug$.$Error(\"Invalid '$SlideshowOptions', no '$Transitions' specified.\");\r\n                }\r\n            });\r\n\r\n            _SlideshowEnabled = _DisplayPieces == 1 && _SlideCount > 1 && _SlideshowRunnerClass && (!$Jssor$.$IsBrowserIE() || $Jssor$.$BrowserVersion() >= 8);\r\n        }\r\n\r\n        _ParkingPosition = (_SlideshowEnabled || _DisplayPieces >= _SlideCount || !(_Loop & 1)) ? 0 : _Options.$ParkingPosition;\r\n\r\n        _DragEnabled = ((_DisplayPieces > 1 || _ParkingPosition) ? _PlayOrientation : -1) & _Options.$DragOrientation;\r\n\r\n        //SlideBoard\r\n        var _SlideboardElmt = _SlidesContainer;\r\n        var _SlideItems = [];\r\n\r\n        var _SlideshowRunner;\r\n        var _LinkContainer;\r\n\r\n        var _Device = $Jssor$.$Device();\r\n        var _IsTouchDevice = _Device.$Touchable;\r\n\r\n        var _LastTimeMoveByDrag;\r\n        var _Position_OnFreeze;\r\n        var _CarouselPlaying_OnFreeze;\r\n        var _PlayToPosition_OnFreeze;\r\n        var _PositionToGoByDrag;\r\n\r\n        //SlideBoard Constructor\r\n        {\r\n            if (_Device.$TouchActionAttr) {\r\n                $Jssor$.$Css(_SlideboardElmt, _Device.$TouchActionAttr, [null, \"pan-y\", \"pan-x\", \"none\"][_DragEnabled] || \"\");\r\n            }\r\n\r\n            _Slideshow = new Slideshow();\r\n\r\n            if (_SlideshowEnabled)\r\n                _SlideshowRunner = new _SlideshowRunnerClass(_SlideContainer, _SlideWidth, _SlideHeight, _SlideshowOptions, _IsTouchDevice);\r\n\r\n            $Jssor$.$AppendChild(_SlideshowPanel, _Slideshow.$Wrapper);\r\n            $Jssor$.$CssOverflow(_SlidesContainer, \"hidden\");\r\n\r\n            //link container\r\n            {\r\n                _LinkContainer = CreatePanel();\r\n                $Jssor$.$Css(_LinkContainer, \"backgroundColor\", \"#000\");\r\n                $Jssor$.$CssOpacity(_LinkContainer, 0);\r\n                $Jssor$.$InsertBefore(_LinkContainer, _SlideboardElmt.firstChild, _SlideboardElmt);\r\n            }\r\n\r\n            for (var i = 0; i < _SlideElmts.length; i++) {\r\n                var slideElmt = _SlideElmts[i];\r\n                var slideItem = new SlideItem(slideElmt, i);\r\n                _SlideItems.push(slideItem);\r\n            }\r\n\r\n            $Jssor$.$HideElement(_LoadingContainer);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_LoadingContainer, \"debug-id\", \"loading-container\");\r\n            });\r\n\r\n            _Carousel = new Carousel();\r\n            _CarouselPlayer = new CarouselPlayer(_Carousel, _Slideshow);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_SlideboardElmt, \"debug-id\", \"slide-board\");\r\n            });\r\n\r\n            if (_DragEnabled) {\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"mousedown\", OnDragStart);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"touchstart\", OnTouchStart);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"dragstart\", PreventDragSelectionEvent);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"selectstart\", PreventDragSelectionEvent);\r\n                $Jssor$.$AddEvent(document, \"mouseup\", OnDragEnd);\r\n                $Jssor$.$AddEvent(document, \"touchend\", OnDragEnd);\r\n                $Jssor$.$AddEvent(document, \"touchcancel\", OnDragEnd);\r\n                $Jssor$.$AddEvent(window, \"blur\", OnDragEnd);\r\n            }\r\n        }\r\n        //SlideBoard\r\n\r\n        _HoverToPause &= (_IsTouchDevice ? 10 : 5);\r\n\r\n        //Bullet Navigator\r\n        if (_BulletNavigatorContainer && _BulletNavigatorOptions) {\r\n            _BulletNavigator = new _BulletNavigatorOptions.$Class(_BulletNavigatorContainer, _BulletNavigatorOptions, OriginalWidth(), OriginalHeight());\r\n            _Navigators.push(_BulletNavigator);\r\n        }\r\n\r\n        //Arrow Navigator\r\n        if (_ArrowNavigatorOptions && _ArrowLeft && _ArrowRight) {\r\n            _ArrowNavigatorOptions.$Loop = _Loop;\r\n            _ArrowNavigatorOptions.$DisplayPieces = _DisplayPieces;\r\n            _ArrowNavigator = new _ArrowNavigatorOptions.$Class(_ArrowLeft, _ArrowRight, _ArrowNavigatorOptions, OriginalWidth(), OriginalHeight());\r\n            _Navigators.push(_ArrowNavigator);\r\n        }\r\n\r\n        //Thumbnail Navigator\r\n        if (_ThumbnailNavigatorContainer && _ThumbnailNavigatorOptions) {\r\n            _ThumbnailNavigatorOptions.$StartIndex = _Options.$StartIndex;\r\n            _ThumbnailNavigator = new _ThumbnailNavigatorOptions.$Class(_ThumbnailNavigatorContainer, _ThumbnailNavigatorOptions);\r\n            _Navigators.push(_ThumbnailNavigator);\r\n        }\r\n\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Reset(_SlideCount, _SlideItems, _LoadingContainer);\r\n            navigator.$On($JssorNavigatorEvents$.$NAVIGATIONREQUEST, NavigationClickHandler);\r\n        });\r\n\r\n        Scale(OriginalWidth());\r\n\r\n        $Jssor$.$AddEvent(_SlidesContainer, \"click\", SlidesClickEventHandler);\r\n        $Jssor$.$AddEvent(elmt, \"mouseout\", $Jssor$.$MouseOverOutFilter(MainContainerMouseLeaveEventHandler, elmt));\r\n        $Jssor$.$AddEvent(elmt, \"mouseover\", $Jssor$.$MouseOverOutFilter(MainContainerMouseEnterEventHandler, elmt));\r\n\r\n        ShowNavigators();\r\n\r\n        //Keyboard Navigation\r\n        if (_Options.$ArrowKeyNavigation) {\r\n            $Jssor$.$AddEvent(document, \"keydown\", function (e) {\r\n                if (e.keyCode == 37/*$JssorKeyCode$.$LEFT*/) {\r\n                    //Arrow Left\r\n                    PlayToOffset(-1);\r\n                }\r\n                else if (e.keyCode == 39/*$JssorKeyCode$.$RIGHT*/) {\r\n                    //Arrow Right\r\n                    PlayToOffset(1);\r\n                }\r\n            });\r\n        }\r\n\r\n        var startPosition = _Options.$StartIndex;\r\n        if (!(_Loop & 1)) {\r\n            startPosition = Math.max(0, Math.min(startPosition, _SlideCount - _DisplayPieces));\r\n        }\r\n        _CarouselPlayer.$PlayCarousel(startPosition, startPosition, 0);\r\n    }\r\n};\r\nvar $JssorSlideo$ = window.$JssorSlideo$ = $JssorSlider$;\r\n\r\n$JssorSlider$.$EVT_CLICK = 21;\r\n$JssorSlider$.$EVT_DRAG_START = 22;\r\n$JssorSlider$.$EVT_DRAG_END = 23;\r\n$JssorSlider$.$EVT_SWIPE_START = 24;\r\n$JssorSlider$.$EVT_SWIPE_END = 25;\r\n\r\n$JssorSlider$.$EVT_LOAD_START = 26;\r\n$JssorSlider$.$EVT_LOAD_END = 27;\r\n$JssorSlider$.$EVT_FREEZE = 28;\r\n\r\n$JssorSlider$.$EVT_POSITION_CHANGE = 202;\r\n$JssorSlider$.$EVT_PARK = 203;\r\n\r\n$JssorSlider$.$EVT_SLIDESHOW_START = 206;\r\n$JssorSlider$.$EVT_SLIDESHOW_END = 207;\r\n\r\n$JssorSlider$.$EVT_PROGRESS_CHANGE = 208;\r\n$JssorSlider$.$EVT_STATE_CHANGE = 209;\r\n$JssorSlider$.$EVT_ROLLBACK_START = 210;\r\n$JssorSlider$.$EVT_ROLLBACK_END = 211;\r\n\r\n//(function ($) {\r\n//    jQuery.fn.jssorSlider = function (options) {\r\n//        return this.each(function () {\r\n//            return $(this).data('jssorSlider') || $(this).data('jssorSlider', new $JssorSlider$(this, options));\r\n//        });\r\n//    };\r\n//})(jQuery);\r\n\r\n//window.jQuery && (jQuery.fn.jssorSlider = function (options) {\r\n//    return this.each(function () {\r\n//        return jQuery(this).data('jssorSlider') || jQuery(this).data('jssorSlider', new $JssorSlider$(this, options));\r\n//    });\r\n//});\r\n\r\n//$JssorBulletNavigator$\r\nvar $JssorNavigatorEvents$ = {\r\n    $NAVIGATIONREQUEST: 1,\r\n    $INDEXCHANGE: 2,\r\n    $RESET: 3\r\n};\r\n\r\nvar $JssorBulletNavigator$ = window.$JssorBulletNavigator$ = function (elmt, options, containerWidth, containerHeight) {\r\n    var self = this;\r\n    $JssorObject$.call(self);\r\n\r\n    elmt = $Jssor$.$GetElement(elmt);\r\n\r\n    var _Count;\r\n    var _Length;\r\n    var _Width;\r\n    var _Height;\r\n    var _CurrentIndex;\r\n    var _CurrentInnerIndex = 0;\r\n    var _Options;\r\n    var _Steps;\r\n    var _Lanes;\r\n    var _SpacingX;\r\n    var _SpacingY;\r\n    var _Orientation;\r\n    var _ItemPrototype;\r\n    var _PrototypeWidth;\r\n    var _PrototypeHeight;\r\n\r\n    var _ButtonElements = [];\r\n    var _Buttons = [];\r\n\r\n    function Highlight(index) {\r\n        if (index != -1)\r\n            _Buttons[index].$Selected(index == _CurrentInnerIndex);\r\n    }\r\n\r\n    function OnNavigationRequest(index) {\r\n        self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, index * _Steps);\r\n    }\r\n\r\n    self.$Elmt = elmt;\r\n    self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    self.$SetCurrentIndex = function (index) {\r\n        if (index != _CurrentIndex) {\r\n            var lastInnerIndex = _CurrentInnerIndex;\r\n            var innerIndex = Math.floor(index / _Steps);\r\n            _CurrentInnerIndex = innerIndex;\r\n            _CurrentIndex = index;\r\n\r\n            Highlight(lastInnerIndex);\r\n            Highlight(innerIndex);\r\n\r\n            //self.$TriggerEvent($JssorNavigatorEvents$.$INDEXCHANGE, index);\r\n        }\r\n    };\r\n\r\n    self.$Show = function (hide) {\r\n        $Jssor$.$ShowElement(elmt, hide);\r\n    };\r\n\r\n    var _Located;\r\n    self.$Relocate = function (containerWidth, containerHeight) {\r\n        if (!_Located || _Options.$Scale == false) {\r\n            var containerWidth = $Jssor$.$ParentNode(elmt).clientWidth;\r\n            var containerHeight = $Jssor$.$ParentNode(elmt).clientHeight;\r\n\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(elmt, (containerWidth - _Width) / 2);\r\n            }\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(elmt, (containerHeight - _Height) / 2);\r\n            }\r\n\r\n            _Located = true;\r\n        }\r\n    };\r\n\r\n    var _Initialized;\r\n    self.$Reset = function (length) {\r\n        if (!_Initialized) {\r\n            _Length = length;\r\n            _Count = Math.ceil(length / _Steps);\r\n            _CurrentInnerIndex = 0;\r\n\r\n            var itemOffsetX = _PrototypeWidth + _SpacingX;\r\n            var itemOffsetY = _PrototypeHeight + _SpacingY;\r\n\r\n            var maxIndex = Math.ceil(_Count / _Lanes) - 1;\r\n\r\n            _Width = _PrototypeWidth + itemOffsetX * (!_Orientation ? maxIndex : _Lanes - 1);\r\n            _Height = _PrototypeHeight + itemOffsetY * (_Orientation ? maxIndex : _Lanes - 1);\r\n\r\n            $Jssor$.$CssWidth(elmt, _Width);\r\n            $Jssor$.$CssHeight(elmt, _Height);\r\n\r\n            for (var buttonIndex = 0; buttonIndex < _Count; buttonIndex++) {\r\n\r\n                var numberDiv = $Jssor$.$CreateSpan();\r\n                $Jssor$.$InnerText(numberDiv, buttonIndex + 1);\r\n\r\n                var div = $Jssor$.$BuildElement(_ItemPrototype, \"numbertemplate\", numberDiv, true);\r\n                $Jssor$.$CssPosition(div, \"absolute\");\r\n\r\n                var columnIndex = buttonIndex % (maxIndex + 1);\r\n                $Jssor$.$CssLeft(div, !_Orientation ? itemOffsetX * columnIndex : buttonIndex % _Lanes * itemOffsetX);\r\n                $Jssor$.$CssTop(div, _Orientation ? itemOffsetY * columnIndex : Math.floor(buttonIndex / (maxIndex + 1)) * itemOffsetY);\r\n\r\n                $Jssor$.$AppendChild(elmt, div);\r\n                _ButtonElements[buttonIndex] = div;\r\n\r\n                if (_Options.$ActionMode & 1)\r\n                    $Jssor$.$AddEvent(div, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, buttonIndex));\r\n\r\n                if (_Options.$ActionMode & 2)\r\n                    $Jssor$.$AddEvent(div, \"mouseover\", $Jssor$.$MouseOverOutFilter($Jssor$.$CreateCallback(null, OnNavigationRequest, buttonIndex), div));\r\n\r\n                _Buttons[buttonIndex] = $Jssor$.$Buttonize(div);\r\n            }\r\n\r\n            //self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n            _Initialized = true;\r\n        }\r\n    };\r\n\r\n    //JssorBulletNavigator Constructor\r\n    {\r\n        self.$Options = _Options = $Jssor$.$Extend({\r\n            $SpacingX: 0,\r\n            $SpacingY: 0,\r\n            $Orientation: 1,\r\n            $ActionMode: 1\r\n        }, options);\r\n\r\n        //Sodo statement for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            _Options = $Jssor$.$Extend({\r\n                $Steps: undefined,\r\n                $Lanes: undefined\r\n            }, _Options);\r\n        });\r\n\r\n        _ItemPrototype = $Jssor$.$FindChild(elmt, \"prototype\");\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_ItemPrototype)\r\n                $JssorDebug$.$Fail(\"Navigator item prototype not defined.\");\r\n\r\n            if (isNaN($Jssor$.$CssWidth(_ItemPrototype))) {\r\n                $JssorDebug$.$Fail(\"Width of 'navigator item prototype' not specified.\");\r\n            }\r\n\r\n            if (isNaN($Jssor$.$CssHeight(_ItemPrototype))) {\r\n                $JssorDebug$.$Fail(\"Height of 'navigator item prototype' not specified.\");\r\n            }\r\n        });\r\n\r\n        _PrototypeWidth = $Jssor$.$CssWidth(_ItemPrototype);\r\n        _PrototypeHeight = $Jssor$.$CssHeight(_ItemPrototype);\r\n\r\n        $Jssor$.$RemoveElement(_ItemPrototype, elmt);\r\n\r\n        _Steps = _Options.$Steps || 1;\r\n        _Lanes = _Options.$Lanes || 1;\r\n        _SpacingX = _Options.$SpacingX;\r\n        _SpacingY = _Options.$SpacingY;\r\n        _Orientation = _Options.$Orientation - 1;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(elmt, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\nvar $JssorArrowNavigator$ = window.$JssorArrowNavigator$ = function (arrowLeft, arrowRight, options, containerWidth, containerHeight) {\r\n    var self = this;\r\n    $JssorObject$.call(self);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n\r\n        if (!arrowLeft)\r\n            $JssorDebug$.$Fail(\"Option '$ArrowNavigatorOptions' spepcified, but UI 'arrowleft' not defined. Define 'arrowleft' to enable direct navigation, or remove option '$ArrowNavigatorOptions' to disable direct navigation.\");\r\n\r\n        if (!arrowRight)\r\n            $JssorDebug$.$Fail(\"Option '$ArrowNavigatorOptions' spepcified, but UI 'arrowright' not defined. Define 'arrowright' to enable direct navigation, or remove option '$ArrowNavigatorOptions' to disable direct navigation.\");\r\n\r\n        if (isNaN($Jssor$.$CssWidth(arrowLeft))) {\r\n            $JssorDebug$.$Fail(\"Width of 'arrow left' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssWidth(arrowRight))) {\r\n            $JssorDebug$.$Fail(\"Width of 'arrow right' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssHeight(arrowLeft))) {\r\n            $JssorDebug$.$Fail(\"Height of 'arrow left' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssHeight(arrowRight))) {\r\n            $JssorDebug$.$Fail(\"Height of 'arrow right' not specified.\");\r\n        }\r\n    });\r\n\r\n    var _Hide;\r\n    var _Length;\r\n    var _CurrentIndex;\r\n    var _Options;\r\n    var _Steps;\r\n    var _ArrowWidth = $Jssor$.$CssWidth(arrowLeft);\r\n    var _ArrowHeight = $Jssor$.$CssHeight(arrowLeft);\r\n\r\n    function OnNavigationRequest(steps) {\r\n        self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, steps, true);\r\n    }\r\n\r\n    function ShowArrows(hide) {\r\n        $Jssor$.$ShowElement(arrowLeft, hide || !options.$Loop && _CurrentIndex == 0);\r\n        $Jssor$.$ShowElement(arrowRight, hide || !options.$Loop && _CurrentIndex >= _Length - options.$DisplayPieces);\r\n\r\n        _Hide = hide;\r\n    }\r\n\r\n    self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    self.$SetCurrentIndex = function (index, virtualIndex, temp) {\r\n        if (temp) {\r\n            _CurrentIndex = virtualIndex;\r\n        }\r\n        else {\r\n            _CurrentIndex = index;\r\n\r\n            ShowArrows(_Hide);\r\n        }\r\n        //self.$TriggerEvent($JssorNavigatorEvents$.$INDEXCHANGE, index);\r\n    };\r\n\r\n    self.$Show = ShowArrows;\r\n\r\n    var _Located;\r\n    self.$Relocate = function (conainerWidth, containerHeight) {\r\n        if (!_Located || _Options.$Scale == false) {\r\n\r\n            var containerWidth = $Jssor$.$ParentNode(arrowLeft).clientWidth;\r\n            var containerHeight = $Jssor$.$ParentNode(arrowLeft).clientHeight;\r\n\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(arrowLeft, (containerWidth - _ArrowWidth) / 2);\r\n                $Jssor$.$CssLeft(arrowRight, (containerWidth - _ArrowWidth) / 2);\r\n            }\r\n\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(arrowLeft, (containerHeight - _ArrowHeight) / 2);\r\n                $Jssor$.$CssTop(arrowRight, (containerHeight - _ArrowHeight) / 2);\r\n            }\r\n\r\n            _Located = true;\r\n        }\r\n    };\r\n\r\n    var _Initialized;\r\n    self.$Reset = function (length) {\r\n        _Length = length;\r\n        _CurrentIndex = 0;\r\n\r\n        if (!_Initialized) {\r\n\r\n            $Jssor$.$AddEvent(arrowLeft, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, -_Steps));\r\n            $Jssor$.$AddEvent(arrowRight, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, _Steps));\r\n\r\n            $Jssor$.$Buttonize(arrowLeft);\r\n            $Jssor$.$Buttonize(arrowRight);\r\n\r\n            _Initialized = true;\r\n        }\r\n\r\n        //self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n    };\r\n\r\n    //JssorArrowNavigator Constructor\r\n    {\r\n        self.$Options = _Options = $Jssor$.$Extend({\r\n            $Steps: 1\r\n        }, options);\r\n\r\n        _Steps = _Options.$Steps;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(arrowLeft, \"noscale\", true);\r\n            $Jssor$.$Attribute(arrowRight, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\n//$JssorThumbnailNavigator$\r\nvar $JssorThumbnailNavigator$ = window.$JssorThumbnailNavigator$ = function (elmt, options) {\r\n    var _Self = this;\r\n    var _Length;\r\n    var _Count;\r\n    var _CurrentIndex;\r\n    var _Options;\r\n    var _NavigationItems = [];\r\n\r\n    var _Width;\r\n    var _Height;\r\n    var _Lanes;\r\n    var _SpacingX;\r\n    var _SpacingY;\r\n    var _PrototypeWidth;\r\n    var _PrototypeHeight;\r\n    var _DisplayPieces;\r\n\r\n    var _Slider;\r\n    var _CurrentMouseOverIndex = -1;\r\n\r\n    var _SlidesContainer;\r\n    var _ThumbnailPrototype;\r\n\r\n    $JssorObject$.call(_Self);\r\n    elmt = $Jssor$.$GetElement(elmt);\r\n\r\n    function NavigationItem(item, index) {\r\n        var self = this;\r\n        var _Wrapper;\r\n        var _Button;\r\n        var _Thumbnail;\r\n\r\n        function Highlight(mouseStatus) {\r\n            _Button.$Selected(_CurrentIndex == index);\r\n        }\r\n\r\n        function OnNavigationRequest(byMouseOver, event) {\r\n            if (byMouseOver || !_Slider.$LastDragSucceded()) {\r\n                //var tail = _Lanes - index % _Lanes;\r\n                //var slideVirtualIndex = _Slider.$GetVirtualIndex((index + tail) / _Lanes - 1);\r\n                //var itemVirtualIndex = slideVirtualIndex * _Lanes + _Lanes - tail;\r\n                //_Self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, itemVirtualIndex);\r\n\r\n                _Self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, index);\r\n            }\r\n\r\n            //$JssorDebug$.$Log(\"navigation request\");\r\n        }\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            self.$Wrapper = undefined;\r\n        });\r\n\r\n        self.$Index = index;\r\n\r\n        self.$Highlight = Highlight;\r\n\r\n        //NavigationItem Constructor\r\n        {\r\n            _Thumbnail = item.$Thumb || item.$Image || $Jssor$.$CreateDiv();\r\n            self.$Wrapper = _Wrapper = $Jssor$.$BuildElement(_ThumbnailPrototype, \"thumbnailtemplate\", _Thumbnail, true);\r\n\r\n            _Button = $Jssor$.$Buttonize(_Wrapper);\r\n            if (_Options.$ActionMode & 1)\r\n                $Jssor$.$AddEvent(_Wrapper, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, 0));\r\n            if (_Options.$ActionMode & 2)\r\n                $Jssor$.$AddEvent(_Wrapper, \"mouseover\", $Jssor$.$MouseOverOutFilter($Jssor$.$CreateCallback(null, OnNavigationRequest, 1), _Wrapper));\r\n        }\r\n    }\r\n\r\n    _Self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    _Self.$SetCurrentIndex = function (index, virtualIndex, temp) {\r\n        var oldIndex = _CurrentIndex;\r\n        _CurrentIndex = index;\r\n        if (oldIndex != -1)\r\n            _NavigationItems[oldIndex].$Highlight();\r\n        _NavigationItems[index].$Highlight();\r\n\r\n        if (!temp) {\r\n            _Slider.$PlayTo(_Slider.$GetVirtualIndex(Math.floor(virtualIndex / _Lanes)));\r\n        }\r\n    };\r\n\r\n    _Self.$Show = function (hide) {\r\n        $Jssor$.$ShowElement(elmt, hide);\r\n    };\r\n\r\n    _Self.$Relocate = $Jssor$.$EmptyFunction;\r\n\r\n    var _Initialized;\r\n    _Self.$Reset = function (length, items, loadingContainer) {\r\n        if (!_Initialized) {\r\n            _Length = length;\r\n            _Count = Math.ceil(_Length / _Lanes);\r\n            _CurrentIndex = -1;\r\n            _DisplayPieces = Math.min(_DisplayPieces, items.length);\r\n\r\n            var horizontal = _Options.$Orientation & 1;\r\n\r\n            var slideWidth = _PrototypeWidth + (_PrototypeWidth + _SpacingX) * (_Lanes - 1) * (1 - horizontal);\r\n            var slideHeight = _PrototypeHeight + (_PrototypeHeight + _SpacingY) * (_Lanes - 1) * horizontal;\r\n\r\n            var slidesContainerWidth = slideWidth + (slideWidth + _SpacingX) * (_DisplayPieces - 1) * horizontal;\r\n            var slidesContainerHeight = slideHeight + (slideHeight + _SpacingY) * (_DisplayPieces - 1) * (1 - horizontal);\r\n\r\n            $Jssor$.$CssPosition(_SlidesContainer, \"absolute\");\r\n            $Jssor$.$CssOverflow(_SlidesContainer, \"hidden\");\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(_SlidesContainer, (_Width - slidesContainerWidth) / 2);\r\n            }\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(_SlidesContainer, (_Height - slidesContainerHeight) / 2);\r\n            }\r\n            //$JssorDebug$.$Execute(function () {\r\n            //    if (!_Options.$AutoCenter) {\r\n            //        var slidesContainerTop = $Jssor$.$CssTop(_SlidesContainer);\r\n            //        var slidesContainerLeft = $Jssor$.$CssLeft(_SlidesContainer);\r\n\r\n            //        if (isNaN(slidesContainerTop)) {\r\n            //            $JssorDebug$.$Fail(\"Position 'top' wrong specification of thumbnail navigator slides container (<div u=\\\"thumbnavigator\\\">...<div u=\\\"slides\\\">), \\r\\nwhen option $ThumbnailNavigatorOptions.$AutoCenter set to 0, it should be specified in pixel (like <div u=\\\"slides\\\" style=\\\"top: 0px;\\\">)\");\r\n            //        }\r\n\r\n            //        if (isNaN(slidesContainerLeft)) {\r\n            //            $JssorDebug$.$Fail(\"Position 'left' wrong specification of thumbnail navigator slides container (<div u=\\\"thumbnavigator\\\">...<div u=\\\"slides\\\">), \\r\\nwhen option $ThumbnailNavigatorOptions.$AutoCenter set to 0, it should be specified in pixel (like <div u=\\\"slides\\\" style=\\\"left: 0px;\\\">)\");\r\n            //        }\r\n            //    }\r\n            //});\r\n            $Jssor$.$CssWidth(_SlidesContainer, slidesContainerWidth);\r\n            $Jssor$.$CssHeight(_SlidesContainer, slidesContainerHeight);\r\n\r\n            var slideItemElmts = [];\r\n            $Jssor$.$Each(items, function (item, index) {\r\n                var navigationItem = new NavigationItem(item, index);\r\n                var navigationItemWrapper = navigationItem.$Wrapper;\r\n\r\n                var columnIndex = Math.floor(index / _Lanes);\r\n                var laneIndex = index % _Lanes;\r\n\r\n                $Jssor$.$CssLeft(navigationItemWrapper, (_PrototypeWidth + _SpacingX) * laneIndex * (1 - horizontal));\r\n                $Jssor$.$CssTop(navigationItemWrapper, (_PrototypeHeight + _SpacingY) * laneIndex * horizontal);\r\n\r\n                if (!slideItemElmts[columnIndex]) {\r\n                    slideItemElmts[columnIndex] = $Jssor$.$CreateDiv();\r\n                    $Jssor$.$AppendChild(_SlidesContainer, slideItemElmts[columnIndex]);\r\n                }\r\n\r\n                $Jssor$.$AppendChild(slideItemElmts[columnIndex], navigationItemWrapper);\r\n\r\n                _NavigationItems.push(navigationItem);\r\n            });\r\n\r\n            var thumbnailSliderOptions = $Jssor$.$Extend({\r\n                $HWA: false,\r\n                $AutoPlay: false,\r\n                $NaviQuitDrag: false,\r\n                $SlideWidth: slideWidth,\r\n                $SlideHeight: slideHeight,\r\n                $SlideSpacing: _SpacingX * horizontal + _SpacingY * (1 - horizontal),\r\n                $MinDragOffsetToSlide: 12,\r\n                $SlideDuration: 200,\r\n                $PauseOnHover: 1,\r\n                $PlayOrientation: _Options.$Orientation,\r\n                $DragOrientation: _Options.$DisableDrag ? 0 : _Options.$Orientation\r\n            }, _Options);\r\n\r\n            _Slider = new $JssorSlider$(elmt, thumbnailSliderOptions);\r\n\r\n            _Initialized = true;\r\n        }\r\n\r\n        //_Self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n    };\r\n\r\n    //JssorThumbnailNavigator Constructor\r\n    {\r\n        _Self.$Options = _Options = $Jssor$.$Extend({\r\n            $SpacingX: 3,\r\n            $SpacingY: 3,\r\n            $DisplayPieces: 1,\r\n            $Orientation: 1,\r\n            $AutoCenter: 3,\r\n            $ActionMode: 1\r\n        }, options);\r\n\r\n        //going to use $Rows instead of $Lanes\r\n        if (_Options.$Rows != undefined)\r\n            _Options.$Lanes = _Options.$Rows;\r\n\r\n        //Sodo statement for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            _Options = $Jssor$.$Extend({\r\n                $Lanes: undefined,\r\n                $Width: undefined,\r\n                $Height: undefined\r\n            }, _Options);\r\n        });\r\n\r\n        _Width = $Jssor$.$CssWidth(elmt);\r\n        _Height = $Jssor$.$CssHeight(elmt);\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_Width)\r\n                $JssorDebug$.$Fail(\"width of 'thumbnavigator' container not specified.\");\r\n            if (!_Height)\r\n                $JssorDebug$.$Fail(\"height of 'thumbnavigator' container not specified.\");\r\n        });\r\n\r\n        _SlidesContainer = $Jssor$.$FindChild(elmt, \"slides\", true);\r\n        _ThumbnailPrototype = $Jssor$.$FindChild(_SlidesContainer, \"prototype\");\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_ThumbnailPrototype)\r\n                $JssorDebug$.$Fail(\"prototype of 'thumbnavigator' not defined.\");\r\n        });\r\n\r\n        _PrototypeWidth = $Jssor$.$CssWidth(_ThumbnailPrototype);\r\n        _PrototypeHeight = $Jssor$.$CssHeight(_ThumbnailPrototype);\r\n\r\n        $Jssor$.$RemoveElement(_ThumbnailPrototype, _SlidesContainer);\r\n\r\n        _Lanes = _Options.$Lanes || 1;\r\n        _SpacingX = _Options.$SpacingX;\r\n        _SpacingY = _Options.$SpacingY;\r\n        _DisplayPieces = _Options.$DisplayPieces;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(elmt, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\n//$JssorCaptionSliderBase$\r\nfunction $JssorCaptionSliderBase$() {\r\n    $JssorAnimator$.call(this, 0, 0);\r\n    this.$Revert = $Jssor$.$EmptyFunction;\r\n}\r\n\r\nvar $JssorCaptionSlider$ = window.$JssorCaptionSlider$ = function (container, captionSlideOptions, playIn) {\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!captionSlideOptions.$CaptionTransitions) {\r\n            $JssorDebug$.$Error(\"'$CaptionSliderOptions' option error, '$CaptionSliderOptions.$CaptionTransitions' not specified.\");\r\n        }\r\n    });\r\n\r\n    var _Self = this;\r\n    var _ImmediateOutCaptionHanger;\r\n    var _PlayMode = playIn ? captionSlideOptions.$PlayInMode : captionSlideOptions.$PlayOutMode;\r\n\r\n    var _CaptionTransitions = captionSlideOptions.$CaptionTransitions;\r\n    var _CaptionTuningFetcher = { $Transition: \"t\", $Delay: \"d\", $Duration: \"du\", x: \"x\", y: \"y\", $Rotate: \"r\", $Zoom: \"z\", $Opacity: \"f\", $BeginTime: \"b\" };\r\n    var _CaptionTuningTransfer = {\r\n        $Default: function (value, tuningValue) {\r\n            if (!isNaN(tuningValue.$Value))\r\n                value = tuningValue.$Value;\r\n            else\r\n                value *= tuningValue.$Percent;\r\n\r\n            return value;\r\n        },\r\n        $Opacity: function (value, tuningValue) {\r\n            return this.$Default(value - 1, tuningValue);\r\n        }\r\n    };\r\n    _CaptionTuningTransfer.$Zoom = _CaptionTuningTransfer.$Opacity;\r\n\r\n    $JssorAnimator$.call(_Self, 0, 0);\r\n\r\n    function GetCaptionItems(element, level) {\r\n\r\n        var itemsToPlay = [];\r\n        var lastTransitionName;\r\n        var namedTransitions = [];\r\n        var namedTransitionOrders = [];\r\n\r\n        function FetchRawTransition(captionElmt, index) {\r\n            var rawTransition = {};\r\n\r\n            $Jssor$.$Each(_CaptionTuningFetcher, function (fetchAttribute, fetchProperty) {\r\n                var attributeValue = $Jssor$.$AttributeEx(captionElmt, fetchAttribute + (index || \"\"));\r\n                if (attributeValue) {\r\n                    var propertyValue = {};\r\n\r\n                    if (fetchAttribute == \"t\") {\r\n                        propertyValue.$Value = attributeValue;\r\n                    }\r\n                    else if (attributeValue.indexOf(\"%\") + 1)\r\n                        propertyValue.$Percent = $Jssor$.$ParseFloat(attributeValue) / 100;\r\n                    else\r\n                        propertyValue.$Value = $Jssor$.$ParseFloat(attributeValue);\r\n\r\n                    rawTransition[fetchProperty] = propertyValue;\r\n                }\r\n            });\r\n\r\n            return rawTransition;\r\n        }\r\n\r\n        function GetRandomTransition() {\r\n            return _CaptionTransitions[Math.floor(Math.random() * _CaptionTransitions.length)];\r\n        }\r\n\r\n        function EvaluateCaptionTransition(transitionName) {\r\n\r\n            var transition;\r\n\r\n            if (transitionName == \"*\") {\r\n                transition = GetRandomTransition();\r\n            }\r\n            else if (transitionName) {\r\n\r\n                //indexed transition allowed, just the same as named transition\r\n                var tempTransition = _CaptionTransitions[$Jssor$.$ParseInt(transitionName)] || _CaptionTransitions[transitionName];\r\n\r\n                if ($Jssor$.$IsArray(tempTransition)) {\r\n                    if (transitionName != lastTransitionName) {\r\n                        lastTransitionName = transitionName;\r\n                        namedTransitionOrders[transitionName] = 0;\r\n\r\n                        namedTransitions[transitionName] = tempTransition[Math.floor(Math.random() * tempTransition.length)];\r\n                    }\r\n                    else {\r\n                        namedTransitionOrders[transitionName]++;\r\n                    }\r\n\r\n                    tempTransition = namedTransitions[transitionName];\r\n\r\n                    if ($Jssor$.$IsArray(tempTransition)) {\r\n                        tempTransition = tempTransition.length && tempTransition[namedTransitionOrders[transitionName] % tempTransition.length];\r\n\r\n                        if ($Jssor$.$IsArray(tempTransition)) {\r\n                            //got transition from array level 3, random for all captions\r\n                            tempTransition = tempTransition[Math.floor(Math.random() * tempTransition.length)];\r\n                        }\r\n                        //else {\r\n                        //    //got transition from array level 2, in sequence for all adjacent captions with same name specified\r\n                        //    transition = tempTransition;\r\n                        //}\r\n                    }\r\n                    //else {\r\n                    //    //got transition from array level 1, random but same for all adjacent captions with same name specified\r\n                    //    transition = tempTransition;\r\n                    //}\r\n                }\r\n                //else {\r\n                //    //got transition directly from a simple transition object\r\n                //    transition = tempTransition;\r\n                //}\r\n\r\n                transition = tempTransition;\r\n\r\n                if ($Jssor$.$IsString(transition))\r\n                    transition = EvaluateCaptionTransition(transition);\r\n            }\r\n\r\n            return transition;\r\n        }\r\n\r\n        var captionElmts = $Jssor$.$Children(element);\r\n        $Jssor$.$Each(captionElmts, function (captionElmt, i) {\r\n\r\n            var transitionsWithTuning = [];\r\n            transitionsWithTuning.$Elmt = captionElmt;\r\n            var isCaption = $Jssor$.$AttributeEx(captionElmt, \"u\") == \"caption\";\r\n\r\n            $Jssor$.$Each(playIn ? [0, 3] : [2], function (j, k) {\r\n\r\n                if (isCaption) {\r\n                    var transition;\r\n                    var rawTransition;\r\n\r\n                    if (j != 2 || !$Jssor$.$AttributeEx(captionElmt, \"t3\")) {\r\n                        rawTransition = FetchRawTransition(captionElmt, j);\r\n\r\n                        if (j == 2 && !rawTransition.$Transition) {\r\n                            rawTransition.$Delay = rawTransition.$Delay || { $Value: 0 };\r\n                            rawTransition = $Jssor$.$Extend(FetchRawTransition(captionElmt, 0), rawTransition);\r\n                        }\r\n                    }\r\n\r\n                    if (rawTransition && rawTransition.$Transition) {\r\n\r\n                        transition = EvaluateCaptionTransition(rawTransition.$Transition.$Value);\r\n\r\n                        if (transition) {\r\n\r\n                            //var transitionWithTuning = $Jssor$.$Extend({ $Delay: 0, $ScaleHorizontal: 1, $ScaleVertical: 1 }, transition);\r\n                            var transitionWithTuning = $Jssor$.$Extend({ $Delay: 0 }, transition);\r\n\r\n                            $Jssor$.$Each(rawTransition, function (rawPropertyValue, propertyName) {\r\n                                var tuningPropertyValue = (_CaptionTuningTransfer[propertyName] || _CaptionTuningTransfer.$Default).apply(_CaptionTuningTransfer, [transitionWithTuning[propertyName], rawTransition[propertyName]]);\r\n                                if (!isNaN(tuningPropertyValue))\r\n                                    transitionWithTuning[propertyName] = tuningPropertyValue;\r\n                            });\r\n\r\n                            if (!k) {\r\n                                if (rawTransition.$BeginTime)\r\n                                    transitionWithTuning.$BeginTime = rawTransition.$BeginTime.$Value || 0;\r\n                                else if ((_PlayMode) & 2)\r\n                                    transitionWithTuning.$BeginTime = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    transitionsWithTuning.push(transitionWithTuning);\r\n                }\r\n\r\n                if ((level % 2) && !k) {\r\n                    transitionsWithTuning.$Children = GetCaptionItems(captionElmt, level + 1);\r\n                }\r\n            });\r\n\r\n            itemsToPlay.push(transitionsWithTuning);\r\n        });\r\n\r\n        return itemsToPlay;\r\n    }\r\n\r\n    function CreateAnimator(item, transition, immediateOut) {\r\n\r\n        var animatorOptions = {\r\n            $Easing: transition.$Easing,\r\n            $Round: transition.$Round,\r\n            $During: transition.$During,\r\n            $Reverse: playIn && !immediateOut\r\n        };\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            animatorOptions.$CaptionAnimator = true;\r\n        });\r\n\r\n        var captionItem = item;\r\n        var captionParent = $Jssor$.$ParentNode(item);\r\n\r\n        var captionItemWidth = $Jssor$.$CssWidth(captionItem);\r\n        var captionItemHeight = $Jssor$.$CssHeight(captionItem);\r\n        var captionParentWidth = $Jssor$.$CssWidth(captionParent);\r\n        var captionParentHeight = $Jssor$.$CssHeight(captionParent);\r\n\r\n        var fromStyles = {};\r\n        var difStyles = {};\r\n        var scaleClip = transition.$ScaleClip || 1;\r\n\r\n        //Opacity\r\n        if (transition.$Opacity) {\r\n            difStyles.$Opacity = 1 - transition.$Opacity;\r\n        }\r\n\r\n        animatorOptions.$OriginalWidth = captionItemWidth;\r\n        animatorOptions.$OriginalHeight = captionItemHeight;\r\n\r\n        //Transform\r\n        if (transition.$Zoom || transition.$Rotate) {\r\n            difStyles.$Zoom = (transition.$Zoom || 2) - 2;\r\n\r\n            if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera()) {\r\n                difStyles.$Zoom = Math.min(difStyles.$Zoom, 1);\r\n            }\r\n\r\n            fromStyles.$Zoom = 1;\r\n\r\n            var rotate = transition.$Rotate || 0;\r\n\r\n            difStyles.$Rotate = rotate * 360;\r\n            fromStyles.$Rotate = 0;\r\n        }\r\n            //Clip\r\n        else if (transition.$Clip) {\r\n            var fromStyleClip = { $Top: 0, $Right: captionItemWidth, $Bottom: captionItemHeight, $Left: 0 };\r\n            var toStyleClip = $Jssor$.$Extend({}, fromStyleClip);\r\n\r\n            var blockOffset = toStyleClip.$Offset = {};\r\n\r\n            var topBenchmark = transition.$Clip & 4;\r\n            var bottomBenchmark = transition.$Clip & 8;\r\n            var leftBenchmark = transition.$Clip & 1;\r\n            var rightBenchmark = transition.$Clip & 2;\r\n\r\n            if (topBenchmark && bottomBenchmark) {\r\n                blockOffset.$Top = captionItemHeight / 2 * scaleClip;\r\n                blockOffset.$Bottom = -blockOffset.$Top;\r\n            }\r\n            else if (topBenchmark)\r\n                blockOffset.$Bottom = -captionItemHeight * scaleClip;\r\n            else if (bottomBenchmark)\r\n                blockOffset.$Top = captionItemHeight * scaleClip;\r\n\r\n            if (leftBenchmark && rightBenchmark) {\r\n                blockOffset.$Left = captionItemWidth / 2 * scaleClip;\r\n                blockOffset.$Right = -blockOffset.$Left;\r\n            }\r\n            else if (leftBenchmark)\r\n                blockOffset.$Right = -captionItemWidth * scaleClip;\r\n            else if (rightBenchmark)\r\n                blockOffset.$Left = captionItemWidth * scaleClip;\r\n\r\n            animatorOptions.$Move = transition.$Move;\r\n            difStyles.$Clip = toStyleClip;\r\n            fromStyles.$Clip = fromStyleClip;\r\n        }\r\n\r\n        //Fly\r\n        {\r\n            var toLeft = 0;\r\n            var toTop = 0;\r\n\r\n            if (transition.x)\r\n                toLeft -= captionParentWidth * transition.x;\r\n\r\n            if (transition.y)\r\n                toTop -= captionParentHeight * transition.y;\r\n\r\n            if (toLeft || toTop || animatorOptions.$Move) {\r\n                difStyles.$Left = toLeft;\r\n                difStyles.$Top = toTop;\r\n            }\r\n        }\r\n\r\n        //duration\r\n        var duration = transition.$Duration;\r\n\r\n        fromStyles = $Jssor$.$Extend(fromStyles, $Jssor$.$GetStyles(captionItem, difStyles));\r\n\r\n        animatorOptions.$Setter = $Jssor$.$StyleSetterEx();\r\n\r\n        return new $JssorAnimator$(transition.$Delay, duration, animatorOptions, captionItem, fromStyles, difStyles);\r\n    }\r\n\r\n    function CreateAnimators(streamLineLength, captionItems) {\r\n\r\n        $Jssor$.$Each(captionItems, function (captionItem, i) {\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (captionItem.length) {\r\n                    var top = $Jssor$.$CssTop(captionItem.$Elmt);\r\n                    var left = $Jssor$.$CssLeft(captionItem.$Elmt);\r\n                    var width = $Jssor$.$CssWidth(captionItem.$Elmt);\r\n                    var height = $Jssor$.$CssHeight(captionItem.$Elmt);\r\n\r\n                    var error = null;\r\n\r\n                    if (isNaN(top))\r\n                        error = \"Style 'top' for caption not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(left))\r\n                        error = \"Style 'left' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(width))\r\n                        error = \"Style 'width' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(height))\r\n                        error = \"Style 'height' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n\r\n                    if (error)\r\n                        $JssorDebug$.$Error(\"Caption \" + (i + 1) + \" definition error, \\r\\n\" + error + \"\\r\\n\" + captionItem.$Elmt.outerHTML);\r\n                }\r\n            });\r\n\r\n            var animator;\r\n            var captionElmt = captionItem.$Elmt;\r\n            var transition = captionItem[0];\r\n            var transition3 = captionItem[1];\r\n\r\n            if (transition) {\r\n\r\n                animator = CreateAnimator(captionElmt, transition);\r\n                streamLineLength = animator.$Locate(transition.$BeginTime == undefined ? streamLineLength : transition.$BeginTime, 1);\r\n            }\r\n\r\n            streamLineLength = CreateAnimators(streamLineLength, captionItem.$Children);\r\n\r\n            if (transition3) {\r\n                var animator3 = CreateAnimator(captionElmt, transition3, 1);\r\n                animator3.$Locate(streamLineLength, 1);\r\n                _Self.$Combine(animator3);\r\n                _ImmediateOutCaptionHanger.$Combine(animator3);\r\n            }\r\n\r\n            if (animator)\r\n                _Self.$Combine(animator);\r\n        });\r\n\r\n        return streamLineLength;\r\n    }\r\n\r\n    _Self.$Revert = function () {\r\n        _Self.$GoToPosition(_Self.$GetPosition_OuterEnd() * (playIn || 0));\r\n        _ImmediateOutCaptionHanger.$GoToPosition(0);\r\n    };\r\n\r\n    //Constructor\r\n    {\r\n        _ImmediateOutCaptionHanger = new $JssorAnimator$(0, 0);\r\n\r\n        CreateAnimators(0, _PlayMode ? GetCaptionItems(container, 1) : []);\r\n    }\r\n};\r\n\r\nvar $JssorCaptionSlideo$ = function (container, captionSlideoOptions, playIn) {\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!captionSlideoOptions.$CaptionTransitions) {\r\n            $JssorDebug$.$Error(\"'$CaptionSlideoOptions' option error, '$CaptionSlideoOptions.$CaptionTransitions' not specified.\");\r\n        }\r\n        else if (!$Jssor$.$IsArray(captionSlideoOptions.$CaptionTransitions)) {\r\n            $JssorDebug$.$Error(\"'$CaptionSlideoOptions' option error, '$CaptionSlideoOptions.$CaptionTransitions' is not an array.\");\r\n        }\r\n    });\r\n\r\n    var _This = this;\r\n\r\n    var _Easings;\r\n    var _TransitionConverter = {};\r\n    var _CaptionTransitions = captionSlideoOptions.$CaptionTransitions;\r\n\r\n    $JssorAnimator$.call(_This, 0, 0);\r\n\r\n    function ConvertTransition(transition, isEasing) {\r\n        $Jssor$.$Each(transition, function (property, name) {\r\n            var performName = _TransitionConverter[name];\r\n            if (performName) {\r\n                if (isEasing || name == \"e\") {\r\n                    if ($Jssor$.$IsNumeric(property)) {\r\n                        property = _Easings[property];\r\n                    }\r\n                    else if ($Jssor$.$IsPlainObject(property)) {\r\n                        ConvertTransition(property, true);\r\n                    }\r\n                }\r\n\r\n                transition[performName] = property;\r\n                delete transition[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    function GetCaptionItems(element, level) {\r\n\r\n        var itemsToPlay = [];\r\n\r\n        var captionElmts = $Jssor$.$Children(element);\r\n        $Jssor$.$Each(captionElmts, function (captionElmt, i) {\r\n            var isCaption = $Jssor$.$AttributeEx(captionElmt, \"u\") == \"caption\";\r\n            if (isCaption) {\r\n                var transitionName = $Jssor$.$AttributeEx(captionElmt, \"t\");\r\n                var transition = _CaptionTransitions[$Jssor$.$ParseInt(transitionName)] || _CaptionTransitions[transitionName];\r\n\r\n                var transitionName2 = $Jssor$.$AttributeEx(captionElmt, \"t2\");\r\n                var transition2 = _CaptionTransitions[$Jssor$.$ParseInt(transitionName2)] || _CaptionTransitions[transitionName2];\r\n\r\n                var itemToPlay = { $Elmt: captionElmt, $Transition: transition, $Transition2: transition2 };\r\n                if (level < 3) {\r\n                    itemsToPlay.concat(GetCaptionItems(captionElmt, level + 1));\r\n                }\r\n                itemsToPlay.push(itemToPlay);\r\n            }\r\n        });\r\n\r\n        return itemsToPlay;\r\n    }\r\n\r\n    function CreateAnimator(captionElmt, transitions, lastStyles, forIn) {\r\n\r\n        $Jssor$.$Each(transitions, function (transition) {\r\n            ConvertTransition(transition);\r\n\r\n            var animatorOptions = {\r\n                $Easing: transition.$Easing,\r\n                $Round: transition.$Round,\r\n                $During: transition.$During,\r\n                $Setter: $Jssor$.$StyleSetterEx()\r\n            };\r\n\r\n            var fromStyles = $Jssor$.$Extend($Jssor$.$GetStyles(captionItem, transition), lastStyles);\r\n\r\n            var animator = new $JssorAnimator$(transition.b || 0, transition.d, animatorOptions, captionElmt, fromStyles, transition);\r\n\r\n            !forIn == !playIn && _This.$Combine(animator);\r\n\r\n            var castOptions;\r\n            lastStyles = $Jssor$.$Extend(lastStyles, $Jssor$.$Cast(fromStyles, transition, 1, animatorOptions.$Easing, animatorOptions.$During, animatorOptions.$Round, animatorOptions, castOptions));\r\n        });\r\n\r\n        return lastStyles;\r\n    }\r\n\r\n    function CreateAnimators(captionItems) {\r\n\r\n        $Jssor$.$Each(captionItems, function (captionItem, i) {\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (captionItem.length) {\r\n                    var top = $Jssor$.$CssTop(captionItem.$Elmt);\r\n                    var left = $Jssor$.$CssLeft(captionItem.$Elmt);\r\n                    var width = $Jssor$.$CssWidth(captionItem.$Elmt);\r\n                    var height = $Jssor$.$CssHeight(captionItem.$Elmt);\r\n\r\n                    var error = null;\r\n\r\n                    if (isNaN(top))\r\n                        error = \"style 'top' not specified\";\r\n                    else if (isNaN(left))\r\n                        error = \"style 'left' not specified\";\r\n                    else if (isNaN(width))\r\n                        error = \"style 'width' not specified\";\r\n                    else if (isNaN(height))\r\n                        error = \"style 'height' not specified\";\r\n\r\n                    if (error)\r\n                        throw new Error(\"Caption \" + (i + 1) + \" definition error, \" + error + \".\\r\\n\" + captionItem.$Elmt.outerHTML);\r\n                }\r\n            });\r\n\r\n            var captionElmt = captionItem.$Elmt;\r\n\r\n            var captionItemWidth = $Jssor$.$CssWidth(captionItem);\r\n            var captionItemHeight = $Jssor$.$CssHeight(captionItem);\r\n            var captionParentWidth = $Jssor$.$CssWidth(captionParent);\r\n            var captionParentHeight = $Jssor$.$CssHeight(captionParent);\r\n\r\n            var lastStyles = { $Zoom: 1, $Rotate: 0, $Clip: { $Top: 0, $Right: captionItemWidth, $Bottom: captionItemHeight, $Left: 0 } };\r\n\r\n            lastStyles = CreateAnimator(captionElmt, captionItem.$Transition, lastStyles, true);\r\n            CreateAnimator(captionElmt, captionItem.$Transition2, lastStyles, false);\r\n        });\r\n    }\r\n\r\n    _This.$Revert = function () {\r\n        _This.$GoToPosition(-1, true);\r\n    }\r\n\r\n    //Constructor\r\n    {\r\n        _Easings = [\r\n            $JssorEasing$.$EaseSwing,\r\n            $JssorEasing$.$EaseLinear,\r\n            $JssorEasing$.$EaseInQuad,\r\n            $JssorEasing$.$EaseOutQuad,\r\n            $JssorEasing$.$EaseInOutQuad,\r\n            $JssorEasing$.$EaseInCubic,\r\n            $JssorEasing$.$EaseOutCubic,\r\n            $JssorEasing$.$EaseInOutCubic,\r\n            $JssorEasing$.$EaseInQuart,\r\n            $JssorEasing$.$EaseOutQuart,\r\n            $JssorEasing$.$EaseInOutQuart,\r\n            $JssorEasing$.$EaseInQuint,\r\n            $JssorEasing$.$EaseOutQuint,\r\n            $JssorEasing$.$EaseInOutQuint,\r\n            $JssorEasing$.$EaseInSine,\r\n            $JssorEasing$.$EaseOutSine,\r\n            $JssorEasing$.$EaseInOutSine,\r\n            $JssorEasing$.$EaseInExpo,\r\n            $JssorEasing$.$EaseOutExpo,\r\n            $JssorEasing$.$EaseInOutExpo,\r\n            $JssorEasing$.$EaseInCirc,\r\n            $JssorEasing$.$EaseOutCirc,\r\n            $JssorEasing$.$EaseInOutCirc,\r\n            $JssorEasing$.$EaseInElastic,\r\n            $JssorEasing$.$EaseOutElastic,\r\n            $JssorEasing$.$EaseInOutElastic,\r\n            $JssorEasing$.$EaseInBack,\r\n            $JssorEasing$.$EaseOutBack,\r\n            $JssorEasing$.$EaseInOutBack,\r\n            $JssorEasing$.$EaseInBounce,\r\n            $JssorEasing$.$EaseOutBounce,\r\n            $JssorEasing$.$EaseInOutBounce//,\r\n            //$JssorEasing$.$EaseGoBack,\r\n            //$JssorEasing$.$EaseInWave,\r\n            //$JssorEasing$.$EaseOutWave,\r\n            //$JssorEasing$.$EaseOutJump,\r\n            //$JssorEasing$.$EaseInJump\r\n        ];\r\n\r\n        var translater = {\r\n            $Top: \"y\",          //top\r\n            $Left: \"x\",         //left\r\n            $Bottom: \"m\",       //bottom\r\n            $Right: \"t\",        //right\r\n            $Zoom: \"s\",         //zoom/scale\r\n            $Rotate: \"r\",       //rotate\r\n            $Opacity: \"o\",      //opacity\r\n            $Easing: \"e\",       //easing\r\n            $ZIndex: \"i\",       //zindex\r\n            $Round: \"rd\",       //round\r\n            $During: \"du\",      //during\r\n            $Duration: \"d\"//,   //duration\r\n            //$Begin: \"b\"\r\n        };\r\n\r\n        $Jssor$.$Each(translater, function (prop, newProp) {\r\n            _TransitionConverter[prop] = newProp;\r\n        });\r\n\r\n        CreateAnimators(GetCaptionItems(container, 1));\r\n    }\r\n};\r\n\r\n//Event Table\r\n\r\n//$EVT_CLICK = 21;              function(slideIndex[, event])\r\n//$EVT_DRAG_START = 22;         function(position[, virtualPosition, event])\r\n//$EVT_DRAG_END = 23;           function(position, startPosition[, virtualPosition, virtualStartPosition, event])\r\n//$EVT_SWIPE_START = 24;        function(position[, virtualPosition])\r\n//$EVT_SWIPE_END = 25;          function(position[, virtualPosition])\r\n\r\n//$EVT_LOAD_START = 26;         function(slideIndex)\r\n//$EVT_LOAD_END = 27;           function(slideIndex)\r\n\r\n//$EVT_POSITION_CHANGE = 202;   function(position, fromPosition[, virtualPosition, virtualFromPosition])\r\n//$EVT_PARK = 203;              function(slideIndex, fromIndex)\r\n\r\n//$EVT_PROGRESS_CHANGE = 208;   function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n//$EVT_STATE_CHANGE = 209;      function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n\r\n//$EVT_ROLLBACK_START = 210;    function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n//$EVT_ROLLBACK_END = 211;      function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n\r\n//$EVT_SLIDESHOW_START = 206;   function(slideIndex[, progressBegin, slideshowBegin, slideshowEnd, progressEnd])\r\n//$EVT_SLIDESHOW_END = 207;     function(slideIndex[, progressBegin, slideshowBegin, slideshowEnd, progressEnd])\r\n\r\n//http://www.jssor.com/development/reference-api.html\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/8.20b8a774486d94b58cb9.js","/*\r\n* Jssor 19.0\r\n* http://www.jssor.com/\r\n*\r\n* Licensed under the MIT license:\r\n* http://www.opensource.org/licenses/MIT\r\n* \r\n* TERMS OF USE - Jssor\r\n* \r\n* Copyright 2014 Jssor\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining\r\n* a copy of this software and associated documentation files (the\r\n* \"Software\"), to deal in the Software without restriction, including\r\n* without limitation the rights to use, copy, modify, merge, publish,\r\n* distribute, sublicense, and/or sell copies of the Software, and to\r\n* permit persons to whom the Software is furnished to do so, subject to\r\n* the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n/*! Jssor */\r\n\r\n//$JssorDebug$\r\nvar $JssorDebug$ = new function () {\r\n\r\n    this.$DebugMode = true;\r\n\r\n    // Methods\r\n\r\n    this.$Log = function (msg, important) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.log) {\r\n            console.log(msg);\r\n        } else if (debug && important) {\r\n            alert(msg);\r\n        }\r\n    };\r\n\r\n    this.$Error = function (msg, e) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.error) {\r\n            console.error(msg);\r\n        } else if (debug) {\r\n            alert(msg);\r\n        }\r\n\r\n        if (debug) {\r\n            // since we're debugging, fail fast by crashing\r\n            throw e || new Error(msg);\r\n        }\r\n    };\r\n\r\n    this.$Fail = function (msg) {\r\n        throw new Error(msg);\r\n    };\r\n\r\n    this.$Assert = function (value, msg) {\r\n        var debug = this.$DebugMode;\r\n        if (debug) {\r\n            if (!value)\r\n                throw new Error(\"Assert failed \" + msg || \"\");\r\n        }\r\n    };\r\n\r\n    this.$Trace = function (msg) {\r\n        var console = window.console || {};\r\n        var debug = this.$DebugMode;\r\n\r\n        if (debug && console.log) {\r\n            console.log(msg);\r\n        }\r\n    };\r\n\r\n    this.$Execute = function (func) {\r\n        var debug = this.$DebugMode;\r\n        if (debug)\r\n            func();\r\n    };\r\n\r\n    this.$LiveStamp = function (obj, id) {\r\n        var debug = this.$DebugMode;\r\n        if (debug) {\r\n            var stamp = document.createElement(\"DIV\");\r\n            stamp.setAttribute(\"id\", id);\r\n\r\n            obj.$Live = stamp;\r\n        }\r\n    };\r\n\r\n    this.$C_AbstractProperty = function () {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the property is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        throw new Error(\"The property is abstract, it should be implemented by subclass.\");\r\n    };\r\n\r\n    this.$C_AbstractMethod = function () {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the method is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        throw new Error(\"The method is abstract, it should be implemented by subclass.\");\r\n    };\r\n\r\n    function C_AbstractClass(instance) {\r\n        ///\t<summary>\r\n        ///\t\tTells compiler the class is abstract, it should be implemented by subclass.\r\n        ///\t</summary>\r\n\r\n        if (instance.constructor === C_AbstractClass.caller)\r\n            throw new Error(\"Cannot create instance of an abstract class.\");\r\n    }\r\n\r\n    this.$C_AbstractClass = C_AbstractClass;\r\n};\r\n\r\n//$JssorEasing$\r\nvar $JssorEasing$ = window.$JssorEasing$ = {\r\n    $EaseSwing: function (t) {\r\n        return -Math.cos(t * Math.PI) / 2 + .5;\r\n    },\r\n    $EaseLinear: function (t) {\r\n        return t;\r\n    },\r\n    $EaseInQuad: function (t) {\r\n        return t * t;\r\n    },\r\n    $EaseOutQuad: function (t) {\r\n        return -t * (t - 2);\r\n    },\r\n    $EaseInOutQuad: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t : -1 / 2 * (--t * (t - 2) - 1);\r\n    },\r\n    $EaseInCubic: function (t) {\r\n        return t * t * t;\r\n    },\r\n    $EaseOutCubic: function (t) {\r\n        return (t -= 1) * t * t + 1;\r\n    },\r\n    $EaseInOutCubic: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t : 1 / 2 * ((t -= 2) * t * t + 2);\r\n    },\r\n    $EaseInQuart: function (t) {\r\n        return t * t * t * t;\r\n    },\r\n    $EaseOutQuart: function (t) {\r\n        return -((t -= 1) * t * t * t - 1);\r\n    },\r\n    $EaseInOutQuart: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t * t : -1 / 2 * ((t -= 2) * t * t * t - 2);\r\n    },\r\n    $EaseInQuint: function (t) {\r\n        return t * t * t * t * t;\r\n    },\r\n    $EaseOutQuint: function (t) {\r\n        return (t -= 1) * t * t * t * t + 1;\r\n    },\r\n    $EaseInOutQuint: function (t) {\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * t * t * t : 1 / 2 * ((t -= 2) * t * t * t * t + 2);\r\n    },\r\n    $EaseInSine: function (t) {\r\n        return 1 - Math.cos(t * Math.PI / 2);\r\n    },\r\n    $EaseOutSine: function (t) {\r\n        return Math.sin(t * Math.PI / 2);\r\n    },\r\n    $EaseInOutSine: function (t) {\r\n        return -1 / 2 * (Math.cos(Math.PI * t) - 1);\r\n    },\r\n    $EaseInExpo: function (t) {\r\n        return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\r\n    },\r\n    $EaseOutExpo: function (t) {\r\n        return t == 1 ? 1 : -Math.pow(2, -10 * t) + 1;\r\n    },\r\n    $EaseInOutExpo: function (t) {\r\n        return t == 0 || t == 1 ? t : (t *= 2) < 1 ? 1 / 2 * Math.pow(2, 10 * (t - 1)) : 1 / 2 * (-Math.pow(2, -10 * --t) + 2);\r\n    },\r\n    $EaseInCirc: function (t) {\r\n        return -(Math.sqrt(1 - t * t) - 1);\r\n    },\r\n    $EaseOutCirc: function (t) {\r\n        return Math.sqrt(1 - (t -= 1) * t);\r\n    },\r\n    $EaseInOutCirc: function (t) {\r\n        return (t *= 2) < 1 ? -1 / 2 * (Math.sqrt(1 - t * t) - 1) : 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);\r\n    },\r\n    $EaseInElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .3, s = .075;\r\n        return -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p));\r\n    },\r\n    $EaseOutElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .3, s = .075;\r\n        return Math.pow(2, -10 * t) * Math.sin((t - s) * 2 * Math.PI / p) + 1;\r\n    },\r\n    $EaseInOutElastic: function (t) {\r\n        if (!t || t == 1)\r\n            return t;\r\n        var p = .45, s = .1125;\r\n        return (t *= 2) < 1 ? -.5 * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p) : Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * 2 * Math.PI / p) * .5 + 1;\r\n    },\r\n    $EaseInBack: function (t) {\r\n        var s = 1.70158;\r\n        return t * t * ((s + 1) * t - s);\r\n    },\r\n    $EaseOutBack: function (t) {\r\n        var s = 1.70158;\r\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n    },\r\n    $EaseInOutBack: function (t) {\r\n        var s = 1.70158;\r\n        return (t *= 2) < 1 ? 1 / 2 * t * t * (((s *= 1.525) + 1) * t - s) : 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\r\n    },\r\n    $EaseInBounce: function (t) {\r\n        return 1 - $JssorEasing$.$EaseOutBounce(1 - t)\r\n    },\r\n    $EaseOutBounce: function (t) {\r\n        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;\r\n    },\r\n    $EaseInOutBounce: function (t) {\r\n        return t < 1 / 2 ? $JssorEasing$.$EaseInBounce(t * 2) * .5 : $JssorEasing$.$EaseOutBounce(t * 2 - 1) * .5 + .5;\r\n    },\r\n    $EaseGoBack: function (t) {\r\n        return 1 - Math.abs((t *= 2) - 1);\r\n    },\r\n    $EaseInWave: function (t) {\r\n        return 1 - Math.cos(t * Math.PI * 2)\r\n    },\r\n    $EaseOutWave: function (t) {\r\n        return Math.sin(t * Math.PI * 2);\r\n    },\r\n    $EaseOutJump: function (t) {\r\n        return 1 - (((t *= 2) < 1) ? (t = 1 - t) * t * t : (t -= 1) * t * t);\r\n    },\r\n    $EaseInJump: function (t) {\r\n        return ((t *= 2) < 1) ? t * t * t : (t = 2 - t) * t * t;\r\n    }\r\n};\r\n\r\nvar $JssorDirection$ = window.$JssorDirection$ = {\r\n    $TO_LEFT: 0x0001,\r\n    $TO_RIGHT: 0x0002,\r\n    $TO_TOP: 0x0004,\r\n    $TO_BOTTOM: 0x0008,\r\n    $HORIZONTAL: 0x0003,\r\n    $VERTICAL: 0x000C,\r\n    //$LEFTRIGHT: 0x0003,\r\n    //$TOPBOTOM: 0x000C,\r\n    //$TOPLEFT: 0x0005,\r\n    //$TOPRIGHT: 0x0006,\r\n    //$BOTTOMLEFT: 0x0009,\r\n    //$BOTTOMRIGHT: 0x000A,\r\n    //$AROUND: 0x000F,\r\n\r\n    $GetDirectionHorizontal: function (direction) {\r\n        return direction & 0x0003;\r\n    },\r\n    $GetDirectionVertical: function (direction) {\r\n        return direction & 0x000C;\r\n    },\r\n    //$ChessHorizontal: function (direction) {\r\n    //    return (~direction & 0x0003) + (direction & 0x000C);\r\n    //},\r\n    //$ChessVertical: function (direction) {\r\n    //    return (~direction & 0x000C) + (direction & 0x0003);\r\n    //},\r\n    //$IsToLeft: function (direction) {\r\n    //    return (direction & 0x0003) == 0x0001;\r\n    //},\r\n    //$IsToRight: function (direction) {\r\n    //    return (direction & 0x0003) == 0x0002;\r\n    //},\r\n    //$IsToTop: function (direction) {\r\n    //    return (direction & 0x000C) == 0x0004;\r\n    //},\r\n    //$IsToBottom: function (direction) {\r\n    //    return (direction & 0x000C) == 0x0008;\r\n    //},\r\n    $IsHorizontal: function (direction) {\r\n        return direction & 0x0003;\r\n    },\r\n    $IsVertical: function (direction) {\r\n        return direction & 0x000C;\r\n    }\r\n};\r\n\r\nvar $JssorKeyCode$ = {\r\n    $BACKSPACE: 8,\r\n    $COMMA: 188,\r\n    $DELETE: 46,\r\n    $DOWN: 40,\r\n    $END: 35,\r\n    $ENTER: 13,\r\n    $ESCAPE: 27,\r\n    $HOME: 36,\r\n    $LEFT: 37,\r\n    $NUMPAD_ADD: 107,\r\n    $NUMPAD_DECIMAL: 110,\r\n    $NUMPAD_DIVIDE: 111,\r\n    $NUMPAD_ENTER: 108,\r\n    $NUMPAD_MULTIPLY: 106,\r\n    $NUMPAD_SUBTRACT: 109,\r\n    $PAGE_DOWN: 34,\r\n    $PAGE_UP: 33,\r\n    $PERIOD: 190,\r\n    $RIGHT: 39,\r\n    $SPACE: 32,\r\n    $TAB: 9,\r\n    $UP: 38\r\n};\r\n\r\n// $Jssor$ is a static class, so make it singleton instance\r\nvar $Jssor$ = window.$Jssor$ = new function () {\r\n    var _This = this;\r\n\r\n    //#region Constants\r\n    var REGEX_WHITESPACE_GLOBAL = /\\S+/g;\r\n    var ROWSER_OTHER = -1;\r\n    var ROWSER_UNKNOWN = 0;\r\n    var BROWSER_IE = 1;\r\n    var BROWSER_FIREFOX = 2;\r\n    var BROWSER_SAFARI = 3;\r\n    var BROWSER_CHROME = 4;\r\n    var BROWSER_OPERA = 5;\r\n    //var arrActiveX = [\"Msxml2.XMLHTTP\", \"Msxml3.XMLHTTP\", \"Microsoft.XMLHTTP\"];\r\n    //#endregion\r\n\r\n    //#region Variables\r\n    var _Device;\r\n    var _Browser = 0;\r\n    var _BrowserRuntimeVersion = 0;\r\n    var _BrowserEngineVersion = 0;\r\n    var _BrowserJavascriptVersion = 0;\r\n    var _WebkitVersion = 0;\r\n\r\n    var _Navigator = navigator;\r\n    var _AppName = _Navigator.appName;\r\n    var _AppVersion = _Navigator.appVersion;\r\n    var _UserAgent = _Navigator.userAgent;\r\n\r\n    var _DocElmt = document.documentElement;\r\n    var _TransformProperty;\r\n    //#endregion\r\n\r\n    function Device() {\r\n        if (!_Device) {\r\n            _Device = { $Touchable: \"ontouchstart\" in window || \"createTouch\" in document };\r\n\r\n            var msPrefix;\r\n            if ((_Navigator.pointerEnabled || (msPrefix = _Navigator.msPointerEnabled))) {\r\n                _Device.$TouchActionAttr = msPrefix ? \"msTouchAction\" : \"touchAction\";\r\n            }\r\n        }\r\n\r\n        return _Device;\r\n    }\r\n\r\n    function DetectBrowser(browser) {\r\n        if (!_Browser) {\r\n            _Browser = -1;\r\n\r\n            if (_AppName == \"Microsoft Internet Explorer\" &&\r\n                !!window.attachEvent && !!window.ActiveXObject) {\r\n\r\n                var ieOffset = _UserAgent.indexOf(\"MSIE\");\r\n                _Browser = BROWSER_IE;\r\n                _BrowserEngineVersion = ParseFloat(_UserAgent.substring(ieOffset + 5, _UserAgent.indexOf(\";\", ieOffset)));\r\n\r\n                //check IE javascript version\r\n                /*@cc_on\r\n                _BrowserJavascriptVersion = @_jscript_version;\r\n                @*/\r\n\r\n                // update: for intranet sites and compat view list sites, IE sends\r\n                // an IE7 User-Agent to the server to be interoperable, and even if\r\n                // the page requests a later IE version, IE will still report the\r\n                // IE7 UA to JS. we should be robust to self\r\n                //var docMode = document.documentMode;\r\n                //if (typeof docMode !== \"undefined\") {\r\n                //    _BrowserRuntimeVersion = docMode;\r\n                //}\r\n\r\n                _BrowserRuntimeVersion = document.documentMode || _BrowserEngineVersion;\r\n\r\n            }\r\n            else if (_AppName == \"Netscape\" && !!window.addEventListener) {\r\n\r\n                var ffOffset = _UserAgent.indexOf(\"Firefox\");\r\n                var saOffset = _UserAgent.indexOf(\"Safari\");\r\n                var chOffset = _UserAgent.indexOf(\"Chrome\");\r\n                var webkitOffset = _UserAgent.indexOf(\"AppleWebKit\");\r\n\r\n                if (ffOffset >= 0) {\r\n                    _Browser = BROWSER_FIREFOX;\r\n                    _BrowserRuntimeVersion = ParseFloat(_UserAgent.substring(ffOffset + 8));\r\n                }\r\n                else if (saOffset >= 0) {\r\n                    var slash = _UserAgent.substring(0, saOffset).lastIndexOf(\"/\");\r\n                    _Browser = (chOffset >= 0) ? BROWSER_CHROME : BROWSER_SAFARI;\r\n                    _BrowserRuntimeVersion = ParseFloat(_UserAgent.substring(slash + 1, saOffset));\r\n                }\r\n                else {\r\n                    //(/Trident.*rv[ :]*11\\./i\r\n                    var match = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/i.exec(_UserAgent);\r\n                    if (match) {\r\n                        _Browser = BROWSER_IE;\r\n                        _BrowserRuntimeVersion = _BrowserEngineVersion = ParseFloat(match[1]);\r\n                    }\r\n                }\r\n\r\n                if (webkitOffset >= 0)\r\n                    _WebkitVersion = ParseFloat(_UserAgent.substring(webkitOffset + 12));\r\n            }\r\n            else {\r\n                var match = /(opera)(?:.*version|)[ \\/]([\\w.]+)/i.exec(_UserAgent);\r\n                if (match) {\r\n                    _Browser = BROWSER_OPERA;\r\n                    _BrowserRuntimeVersion = ParseFloat(match[2]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return browser == _Browser;\r\n    }\r\n\r\n    function IsBrowserIE() {\r\n        return DetectBrowser(BROWSER_IE);\r\n    }\r\n\r\n    function IsBrowserIeQuirks() {\r\n        return IsBrowserIE() && (_BrowserRuntimeVersion < 6 || document.compatMode == \"BackCompat\");   //Composite to \"CSS1Compat\"\r\n    }\r\n\r\n    function IsBrowserFireFox() {\r\n        return DetectBrowser(BROWSER_FIREFOX);\r\n    }\r\n\r\n    function IsBrowserSafari() {\r\n        return DetectBrowser(BROWSER_SAFARI);\r\n    }\r\n\r\n    function IsBrowserChrome() {\r\n        return DetectBrowser(BROWSER_CHROME);\r\n    }\r\n\r\n    function IsBrowserOpera() {\r\n        return DetectBrowser(BROWSER_OPERA);\r\n    }\r\n\r\n    function IsBrowserBadTransform() {\r\n        return IsBrowserSafari() && (_WebkitVersion > 534) && (_WebkitVersion < 535);\r\n    }\r\n\r\n    function IsBrowserIe9Earlier() {\r\n        return IsBrowserIE() && _BrowserRuntimeVersion < 9;\r\n    }\r\n\r\n    function GetTransformProperty(elmt) {\r\n\r\n        if (!_TransformProperty) {\r\n            // Note that in some versions of IE9 it is critical that\r\n            // msTransform appear in this list before MozTransform\r\n\r\n            Each(['transform', 'WebkitTransform', 'msTransform', 'MozTransform', 'OTransform'], function (property) {\r\n                if (elmt.style[property] != undefined) {\r\n                    _TransformProperty = property;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            _TransformProperty = _TransformProperty || \"transform\";\r\n        }\r\n\r\n        return _TransformProperty;\r\n    }\r\n\r\n    // Helpers\r\n    function getOffsetParent(elmt, isFixed) {\r\n        // IE and Opera \"fixed\" position elements don't have offset parents.\r\n        // regardless, if it's fixed, its offset parent is the body.\r\n        if (isFixed && elmt != document.body) {\r\n            return document.body;\r\n        } else {\r\n            return elmt.offsetParent;\r\n        }\r\n    }\r\n\r\n    function toString(obj) {\r\n        return {}.toString.call(obj);\r\n    }\r\n\r\n    // [[Class]] -> type pairs\r\n    var _Class2type;\r\n\r\n    function GetClass2Type() {\r\n        if (!_Class2type) {\r\n            _Class2type = {};\r\n            Each([\"Boolean\", \"Number\", \"String\", \"Function\", \"Array\", \"Date\", \"RegExp\", \"Object\"], function (name) {\r\n                _Class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n            });\r\n        }\r\n\r\n        return _Class2type;\r\n    }\r\n\r\n    function Each(obj, callback) {\r\n        if (toString(obj) == \"[object Array]\") {\r\n            for (var i = 0; i < obj.length; i++) {\r\n                if (callback(obj[i], i, obj)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var name in obj) {\r\n                if (callback(obj[name], name, obj)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function Type(obj) {\r\n        return obj == null ? String(obj) : GetClass2Type()[toString(obj)] || \"object\";\r\n    }\r\n\r\n    function IsNotEmpty(obj) {\r\n        for(var name in obj)\r\n            return true;\r\n    }\r\n\r\n    function IsPlainObject(obj) {\r\n        // Not plain objects:\r\n        // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\r\n        // - DOM nodes\r\n        // - window\r\n        try {\r\n            return Type(obj) == \"object\"\r\n                && !obj.nodeType\r\n                && obj != obj.window\r\n                && (!obj.constructor || { }.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\"));\r\n        }\r\n        catch (e) { }\r\n    }\r\n\r\n    function Point(x, y) {\r\n        return { x: x, y: y };\r\n    }\r\n\r\n    function Delay(code, delay) {\r\n        setTimeout(code, delay || 0);\r\n    }\r\n\r\n    function RemoveByReg(str, reg) {\r\n        var m = reg.exec(str);\r\n\r\n        if (m) {\r\n            var header = str.substr(0, m.index);\r\n            var tailer = str.substr(m.lastIndex + 1, str.length - (m.lastIndex + 1));\r\n            str = header + tailer;\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    function BuildNewCss(oldCss, removeRegs, replaceValue) {\r\n        var css = (!oldCss || oldCss == \"inherit\") ? \"\" : oldCss;\r\n\r\n        Each(removeRegs, function (removeReg) {\r\n            var m = removeReg.exec(css);\r\n\r\n            if (m) {\r\n                var header = css.substr(0, m.index);\r\n                var tailer = css.substr(m.lastIndex + 1, css.length - (m.lastIndex + 1));\r\n                css = header + tailer;\r\n            }\r\n        });\r\n\r\n        css = replaceValue + (css.indexOf(\" \") != 0 ? \" \" : \"\") + css;\r\n\r\n        return css;\r\n    }\r\n\r\n    function SetStyleFilterIE(elmt, value) {\r\n        if (_BrowserRuntimeVersion < 9) {\r\n            elmt.style.filter = value;\r\n        }\r\n    }\r\n\r\n    function SetStyleMatrixIE(elmt, matrix, offset) {\r\n        //matrix is not for ie9+ running in ie8- mode\r\n        if (_BrowserJavascriptVersion < 9) {\r\n            var oldFilterValue = elmt.style.filter;\r\n            var matrixReg = new RegExp(/[\\s]*progid:DXImageTransform\\.Microsoft\\.Matrix\\([^\\)]*\\)/g);\r\n            var matrixValue = matrix ? \"progid:DXImageTransform.Microsoft.Matrix(\" + \"M11=\" + matrix[0][0] + \", M12=\" + matrix[0][1] + \", M21=\" + matrix[1][0] + \", M22=\" + matrix[1][1] + \", SizingMethod='auto expand')\" : \"\";\r\n\r\n            var newFilterValue = BuildNewCss(oldFilterValue, [matrixReg], matrixValue);\r\n\r\n            SetStyleFilterIE(elmt, newFilterValue);\r\n\r\n            _This.$CssMarginTop(elmt, offset.y);\r\n            _This.$CssMarginLeft(elmt, offset.x);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n\r\n    _This.$Device = Device;\r\n\r\n    _This.$IsBrowserIE = IsBrowserIE;\r\n\r\n    _This.$IsBrowserIeQuirks = IsBrowserIeQuirks;\r\n\r\n    _This.$IsBrowserFireFox = IsBrowserFireFox;\r\n\r\n    _This.$IsBrowserSafari = IsBrowserSafari;\r\n\r\n    _This.$IsBrowserChrome = IsBrowserChrome;\r\n\r\n    _This.$IsBrowserOpera = IsBrowserOpera;\r\n\r\n    _This.$IsBrowserBadTransform = IsBrowserBadTransform;\r\n\r\n    _This.$IsBrowserIe9Earlier = IsBrowserIe9Earlier;\r\n\r\n    _This.$BrowserVersion = function () {\r\n        return _BrowserRuntimeVersion;\r\n    };\r\n\r\n    _This.$BrowserEngineVersion = function () {\r\n        return _BrowserEngineVersion || _BrowserRuntimeVersion;\r\n    };\r\n\r\n    _This.$WebKitVersion = function () {\r\n        DetectBrowser();\r\n\r\n        return _WebkitVersion;\r\n    };\r\n\r\n    _This.$Delay = Delay;\r\n\r\n    _This.$Inherit = function (instance, baseClass) {\r\n        baseClass.call(instance);\r\n        return Extend({}, instance);\r\n    };\r\n\r\n    function Construct(instance) {\r\n        instance.constructor === Construct.caller && instance.$Construct && instance.$Construct.apply(instance, Construct.caller.arguments);\r\n    }\r\n\r\n    _This.$Construct = Construct;\r\n\r\n    _This.$GetElement = function (elmt) {\r\n        if (_This.$IsString(elmt)) {\r\n            elmt = document.getElementById(elmt);\r\n        }\r\n\r\n        return elmt;\r\n    };\r\n\r\n    function GetEvent(event) {\r\n        return event || window.event;\r\n    }\r\n\r\n    _This.$GetEvent = GetEvent;\r\n\r\n    _This.$EvtSrc = function (event) {\r\n        event = GetEvent(event);\r\n        return event.target || event.srcElement || document;\r\n    };\r\n\r\n    _This.$EvtTarget = function (event) {\r\n        event = GetEvent(event);\r\n        return event.relatedTarget || event.toElement;\r\n    };\r\n\r\n    _This.$EvtWhich = function (event) {\r\n        event = GetEvent(event);\r\n        return event.which || [0, 1, 3, 0, 2][event.button] || event.charCode || event.keyCode;\r\n    };\r\n\r\n    _This.$MousePosition = function (event) {\r\n        event = GetEvent(event);\r\n        //var body = document.body;\r\n\r\n        return {\r\n            x: event.pageX || event.clientX/* + (_DocElmt.scrollLeft || body.scrollLeft || 0) - (_DocElmt.clientLeft || body.clientLeft || 0)*/ || 0,\r\n            y: event.pageY || event.clientY/* + (_DocElmt.scrollTop || body.scrollTop || 0) - (_DocElmt.clientTop || body.clientTop || 0)*/ || 0\r\n        };\r\n    };\r\n\r\n    _This.$PageScroll = function () {\r\n        var body = document.body;\r\n\r\n        return {\r\n            x: (window.pageXOffset || _DocElmt.scrollLeft || body.scrollLeft || 0) - (_DocElmt.clientLeft || body.clientLeft || 0),\r\n            y: (window.pageYOffset || _DocElmt.scrollTop || body.scrollTop || 0) - (_DocElmt.clientTop || body.clientTop || 0)\r\n        };\r\n    };\r\n\r\n    _This.$WindowSize = function () {\r\n        var body = document.body;\r\n\r\n        return {\r\n            x: body.clientWidth || _DocElmt.clientWidth,\r\n            y: body.clientHeight || _DocElmt.clientHeight\r\n        };\r\n    };\r\n\r\n    //_This.$GetElementPosition = function (elmt) {\r\n    //    elmt = _This.$GetElement(elmt);\r\n    //    var result = Point();\r\n\r\n    //    // technique from:\r\n    //    // http://www.quirksmode.org/js/findpos.html\r\n    //    // with special check for \"fixed\" elements.\r\n\r\n    //    while (elmt) {\r\n    //        result.x += elmt.offsetLeft;\r\n    //        result.y += elmt.offsetTop;\r\n\r\n    //        var isFixed = _This.$GetElementStyle(elmt).position == \"fixed\";\r\n\r\n    //        if (isFixed) {\r\n    //            result = result.$Plus(_This.$PageScroll(window));\r\n    //        }\r\n\r\n    //        elmt = getOffsetParent(elmt, isFixed);\r\n    //    }\r\n\r\n    //    return result;\r\n    //};\r\n\r\n    //_This.$GetMouseScroll = function (event) {\r\n    //    event = GetEvent(event);\r\n    //    var delta = 0; // default value\r\n\r\n    //    // technique from:\r\n    //    // http://blog.paranoidferret.com/index.php/2007/10/31/javascript-tutorial-the-scroll-wheel/\r\n\r\n    //    if (typeof (event.wheelDelta) == \"number\") {\r\n    //        delta = event.wheelDelta;\r\n    //    } else if (typeof (event.detail) == \"number\") {\r\n    //        delta = event.detail * -1;\r\n    //    } else {\r\n    //        $JssorDebug$.$Fail(\"Unknown event mouse scroll, no known technique.\");\r\n    //    }\r\n\r\n    //    // normalize value to [-1, 1]\r\n    //    return delta ? delta / Math.abs(delta) : 0;\r\n    //};\r\n\r\n    //_This.$MakeAjaxRequest = function (url, callback) {\r\n    //    var async = typeof (callback) == \"function\";\r\n    //    var req = null;\r\n\r\n    //    if (async) {\r\n    //        var actual = callback;\r\n    //        var callback = function () {\r\n    //            Delay($Jssor$.$CreateCallback(null, actual, req), 1);\r\n    //        };\r\n    //    }\r\n\r\n    //    if (window.ActiveXObject) {\r\n    //        for (var i = 0; i < arrActiveX.length; i++) {\r\n    //            try {\r\n    //                req = new ActiveXObject(arrActiveX[i]);\r\n    //                break;\r\n    //            } catch (e) {\r\n    //                continue;\r\n    //            }\r\n    //        }\r\n    //    } else if (window.XMLHttpRequest) {\r\n    //        req = new XMLHttpRequest();\r\n    //    }\r\n\r\n    //    if (!req) {\r\n    //        $JssorDebug$.$Fail(\"Browser doesn't support XMLHttpRequest.\");\r\n    //    }\r\n\r\n    //    if (async) {\r\n    //        req.onreadystatechange = function () {\r\n    //            if (req.readyState == 4) {\r\n    //                // prevent memory leaks by breaking circular reference now\r\n    //                req.onreadystatechange = new Function();\r\n    //                callback();\r\n    //            }\r\n    //        };\r\n    //    }\r\n\r\n    //    try {\r\n    //        req.open(\"GET\", url, async);\r\n    //        req.send(null);\r\n    //    } catch (e) {\r\n    //        $JssorDebug$.$Log(e.name + \" while making AJAX request: \" + e.message);\r\n\r\n    //        req.onreadystatechange = null;\r\n    //        req = null;\r\n\r\n    //        if (async) {\r\n    //            callback();\r\n    //        }\r\n    //    }\r\n\r\n    //    return async ? null : req;\r\n    //};\r\n\r\n    //_This.$ParseXml = function (string) {\r\n    //    var xmlDoc = null;\r\n\r\n    //    if (window.ActiveXObject) {\r\n    //        try {\r\n    //            xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n    //            xmlDoc.async = false;\r\n    //            xmlDoc.loadXML(string);\r\n    //        } catch (e) {\r\n    //            $JssorDebug$.$Log(e.name + \" while parsing XML (ActiveX): \" + e.message);\r\n    //        }\r\n    //    } else if (window.DOMParser) {\r\n    //        try {\r\n    //            var parser = new DOMParser();\r\n    //            xmlDoc = parser.parseFromString(string, \"text/xml\");\r\n    //        } catch (e) {\r\n    //            $JssorDebug$.$Log(e.name + \" while parsing XML (DOMParser): \" + e.message);\r\n    //        }\r\n    //    } else {\r\n    //        $JssorDebug$.$Fail(\"Browser doesn't support XML DOM.\");\r\n    //    }\r\n\r\n    //    return xmlDoc;\r\n    //};\r\n\r\n    function Css(elmt, name, value) {\r\n        ///\t<summary>\r\n        ///\t\taccess css\r\n        ///     $Jssor$.$Css(elmt, name);         //get css value\r\n        ///     $Jssor$.$Css(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        if (value != undefined) {\r\n            elmt.style[name] = value;\r\n        }\r\n        else {\r\n            var style = elmt.currentStyle || elmt.style;\r\n            value = style[name];\r\n\r\n            if (value == \"\" && window.getComputedStyle) {\r\n                style = elmt.ownerDocument.defaultView.getComputedStyle(elmt, null);\r\n\r\n                style && (value = style.getPropertyValue(name) || style[name]);\r\n            }\r\n\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function CssN(elmt, name, value, isDimensional) {\r\n        ///\t<summary>\r\n        ///\t\taccess css as numeric\r\n        ///     $Jssor$.$CssN(elmt, name);         //get css value\r\n        ///     $Jssor$.$CssN(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" type=\"Number\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        if (value != undefined) {\r\n            isDimensional && (value += \"px\");\r\n            Css(elmt, name, value);\r\n        }\r\n        else {\r\n            return ParseFloat(Css(elmt, name));\r\n        }\r\n    }\r\n\r\n    function CssP(elmt, name, value) {\r\n        ///\t<summary>\r\n        ///\t\taccess css in pixel as numeric, like 'top', 'left', 'width', 'height'\r\n        ///     $Jssor$.$CssP(elmt, name);         //get css value\r\n        ///     $Jssor$.$CssP(elmt, name, value);  //set css value\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"name\" type=\"String\">\r\n        ///\t\tthe name of css property\r\n        ///\t</param>\r\n        ///\t<param name=\"value\" type=\"Number\" optional=\"true\">\r\n        ///\t\tthe value to set\r\n        ///\t</param>\r\n        return CssN(elmt, name, value, true);\r\n    }\r\n\r\n    function CssProxy(name, numericOrDimension) {\r\n        ///\t<summary>\r\n        ///\t\tcreate proxy to access css, CssProxy(name[, numericOrDimension]);\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tthe element to access css\r\n        ///\t</param>\r\n        ///\t<param name=\"numericOrDimension\" type=\"Number\" optional=\"true\">\r\n        ///\t\tnot set: access original css, 1: access css as numeric, 2: access css in pixel as numeric\r\n        ///\t</param>\r\n        var isDimensional = numericOrDimension & 2;\r\n        var cssAccessor = numericOrDimension ? CssN : Css;\r\n        return function (elmt, value) {\r\n            return cssAccessor(elmt, name, value, isDimensional);\r\n        };\r\n    }\r\n\r\n    function GetStyleOpacity(elmt) {\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9) {\r\n            var match = /opacity=([^)]*)/.exec(elmt.style.filter || \"\");\r\n            return match ? (ParseFloat(match[1]) / 100) : 1;\r\n        }\r\n        else\r\n            return ParseFloat(elmt.style.opacity || \"1\");\r\n    }\r\n\r\n    function SetStyleOpacity(elmt, opacity, ie9EarlierForce) {\r\n\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9) {\r\n            //var filterName = \"filter\"; // _BrowserEngineVersion < 8 ? \"filter\" : \"-ms-filter\";\r\n            var finalFilter = elmt.style.filter || \"\";\r\n\r\n            // for CSS filter browsers (IE), remove alpha filter if it's unnecessary.\r\n            // update: doing _This always since IE9 beta seems to have broken the\r\n            // behavior if we rely on the programmatic filters collection.\r\n            var alphaReg = new RegExp(/[\\s]*alpha\\([^\\)]*\\)/g);\r\n\r\n            // important: note the lazy star! _This protects against\r\n            // multiple filters; we don't want to delete the other ones.\r\n            // update: also trimming extra whitespace around filter.\r\n\r\n            var ieOpacity = Math.round(100 * opacity);\r\n            var alphaFilter = \"\";\r\n            if (ieOpacity < 100 || ie9EarlierForce) {\r\n                alphaFilter = \"alpha(opacity=\" + ieOpacity + \") \";\r\n            }\r\n\r\n            var newFilterValue = BuildNewCss(finalFilter, [alphaReg], alphaFilter);\r\n\r\n            SetStyleFilterIE(elmt, newFilterValue);\r\n        }\r\n        else {\r\n            elmt.style.opacity = opacity == 1 ? \"\" : Math.round(opacity * 100) / 100;\r\n        }\r\n    }\r\n\r\n    function SetStyleTransformInternal(elmt, transform) {\r\n        var rotate = transform.$Rotate || 0;\r\n        var scale = transform.$Scale == undefined ? 1 : transform.$Scale;\r\n\r\n        if (IsBrowserIe9Earlier()) {\r\n            var matrix = _This.$CreateMatrix(rotate / 180 * Math.PI, scale, scale);\r\n            SetStyleMatrixIE(elmt, (!rotate && scale == 1) ? null : matrix, _This.$GetMatrixOffset(matrix, transform.$OriginalWidth, transform.$OriginalHeight));\r\n        }\r\n        else {\r\n            //rotate(15deg) scale(.5) translateZ(0)\r\n            var transformProperty = GetTransformProperty(elmt);\r\n            if (transformProperty) {\r\n                var transformValue = \"rotate(\" + rotate % 360 + \"deg) scale(\" + scale + \")\";\r\n\r\n                //needed for touch device, no need for desktop device\r\n                if (IsBrowserChrome() && _WebkitVersion > 535 && \"ontouchstart\" in window)\r\n                    transformValue += \" perspective(2000px)\";\r\n\r\n                elmt.style[transformProperty] = transformValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$SetStyleTransform = function (elmt, transform) {\r\n        if (IsBrowserBadTransform()) {\r\n            Delay(_This.$CreateCallback(null, SetStyleTransformInternal, elmt, transform));\r\n        }\r\n        else {\r\n            SetStyleTransformInternal(elmt, transform);\r\n        }\r\n    };\r\n\r\n    _This.$SetStyleTransformOrigin = function (elmt, transformOrigin) {\r\n        var transformProperty = GetTransformProperty(elmt);\r\n\r\n        if (transformProperty)\r\n            elmt.style[transformProperty + \"Origin\"] = transformOrigin;\r\n    };\r\n\r\n    _This.$CssScale = function (elmt, scale) {\r\n\r\n        if (IsBrowserIE() && _BrowserEngineVersion < 9 || (_BrowserEngineVersion < 10 && IsBrowserIeQuirks())) {\r\n            elmt.style.zoom = (scale == 1) ? \"\" : scale;\r\n        }\r\n        else {\r\n            var transformProperty = GetTransformProperty(elmt);\r\n\r\n            if (transformProperty) {\r\n                //rotate(15deg) scale(.5)\r\n                var transformValue = \"scale(\" + scale + \")\";\r\n\r\n                var oldTransformValue = elmt.style[transformProperty];\r\n                var scaleReg = new RegExp(/[\\s]*scale\\(.*?\\)/g);\r\n\r\n                var newTransformValue = BuildNewCss(oldTransformValue, [scaleReg], transformValue);\r\n\r\n                elmt.style[transformProperty] = newTransformValue;\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$EnableHWA = function (elmt) {\r\n        if (!elmt.style[GetTransformProperty(elmt)] || elmt.style[GetTransformProperty(elmt)] == \"none\")\r\n            elmt.style[GetTransformProperty(elmt)] = \"perspective(2000px)\";\r\n    };\r\n\r\n    _This.$DisableHWA = function (elmt) {\r\n        elmt.style[GetTransformProperty(elmt)] = \"none\";\r\n    };\r\n\r\n    var ie8OffsetWidth = 0;\r\n    var ie8OffsetHeight = 0;\r\n\r\n    _This.$WindowResizeFilter = function (window, handler) {\r\n        return IsBrowserIe9Earlier() ? function () {\r\n\r\n            var trigger = true;\r\n\r\n            var checkElement = (IsBrowserIeQuirks() ? window.document.body : window.document.documentElement);\r\n            if (checkElement) {\r\n                var widthChange = checkElement.offsetWidth - ie8OffsetWidth;\r\n                var heightChange = checkElement.offsetHeight - ie8OffsetHeight;\r\n                if (widthChange || heightChange) {\r\n                    ie8OffsetWidth += widthChange;\r\n                    ie8OffsetHeight += heightChange;\r\n                }\r\n                else\r\n                    trigger = false;\r\n            }\r\n\r\n            trigger && handler();\r\n\r\n        } : handler;\r\n    };\r\n\r\n    _This.$MouseOverOutFilter = function (handler, target) {\r\n        ///\t<param name=\"target\" type=\"HTMLDomElement\">\r\n        ///\t\tThe target element to detect mouse over/out events. (for ie < 9 compatibility)\r\n        ///\t</param>\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!target) {\r\n                throw new Error(\"Null reference, parameter \\\"target\\\".\");\r\n            }\r\n        });\r\n\r\n        return function (event) {\r\n            event = GetEvent(event);\r\n\r\n            var eventName = event.type;\r\n            var related = event.relatedTarget || (eventName == \"mouseout\" ? event.toElement : event.fromElement);\r\n\r\n            if (!related || (related !== target && !_This.$IsChild(target, related))) {\r\n                handler(event);\r\n            }\r\n        };\r\n    };\r\n\r\n    _This.$AddEvent = function (elmt, eventName, handler, useCapture) {\r\n        elmt = _This.$GetElement(elmt);\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!elmt) {\r\n                $JssorDebug$.$Fail(\"Parameter 'elmt' not specified.\");\r\n            }\r\n\r\n            if (!handler) {\r\n                $JssorDebug$.$Fail(\"Parameter 'handler' not specified.\");\r\n            }\r\n\r\n            if (!elmt.addEventListener && !elmt.attachEvent) {\r\n                $JssorDebug$.$Fail(\"Unable to attach event handler, no known technique.\");\r\n            }\r\n        });\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (elmt.addEventListener) {\r\n            if (eventName == \"mousewheel\") {\r\n                elmt.addEventListener(\"DOMMouseScroll\", handler, useCapture);\r\n            }\r\n            // we are still going to add the mousewheel -- not a mistake!\r\n            // _This is for opera, since it uses onmousewheel but needs addEventListener.\r\n            elmt.addEventListener(eventName, handler, useCapture);\r\n        }\r\n        else if (elmt.attachEvent) {\r\n            elmt.attachEvent(\"on\" + eventName, handler);\r\n            if (useCapture && elmt.setCapture) {\r\n                elmt.setCapture();\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$RemoveEvent = function (elmt, eventName, handler, useCapture) {\r\n        elmt = _This.$GetElement(elmt);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (elmt.removeEventListener) {\r\n            if (eventName == \"mousewheel\") {\r\n                elmt.removeEventListener(\"DOMMouseScroll\", handler, useCapture);\r\n            }\r\n            // we are still going to remove the mousewheel -- not a mistake!\r\n            // _This is for opera, since it uses onmousewheel but needs removeEventListener.\r\n            elmt.removeEventListener(eventName, handler, useCapture);\r\n        }\r\n        else if (elmt.detachEvent) {\r\n            elmt.detachEvent(\"on\" + eventName, handler);\r\n            if (useCapture && elmt.releaseCapture) {\r\n                elmt.releaseCapture();\r\n            }\r\n        }\r\n    };\r\n\r\n    _This.$FireEvent = function (elmt, eventName) {\r\n        //var document = elmt.document;\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!document.createEvent && !document.createEventObject) {\r\n                $JssorDebug$.$Fail(\"Unable to fire event, no known technique.\");\r\n            }\r\n\r\n            if (!elmt.dispatchEvent && !elmt.fireEvent) {\r\n                $JssorDebug$.$Fail(\"Unable to fire event, no known technique.\");\r\n            }\r\n        });\r\n\r\n        var evento;\r\n\r\n        if (document.createEvent) {\r\n            evento = document.createEvent(\"HTMLEvents\");\r\n            evento.initEvent(eventName, false, false);\r\n            elmt.dispatchEvent(evento);\r\n        }\r\n        else {\r\n            var ieEventName = \"on\" + eventName;\r\n            evento = document.createEventObject();\r\n\r\n            elmt.fireEvent(ieEventName, evento);\r\n        }\r\n    };\r\n\r\n    _This.$CancelEvent = function (event) {\r\n        event = GetEvent(event);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (event.preventDefault) {\r\n            event.preventDefault();     // W3C for preventing default\r\n        }\r\n\r\n        event.cancel = true;            // legacy for preventing default\r\n        event.returnValue = false;      // IE for preventing default\r\n    };\r\n\r\n    _This.$StopEvent = function (event) {\r\n        event = GetEvent(event);\r\n\r\n        // technique from:\r\n        // http://blog.paranoidferret.com/index.php/2007/08/10/javascript-working-with-events/\r\n\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();    // W3C for stopping propagation\r\n        }\r\n\r\n        event.cancelBubble = true;      // IE for stopping propagation\r\n    };\r\n\r\n    _This.$CreateCallback = function (object, method) {\r\n        // create callback args\r\n        var initialArgs = [].slice.call(arguments, 2);\r\n\r\n        // create closure to apply method\r\n        var callback = function () {\r\n            // concatenate new args, but make a copy of initialArgs first\r\n            var args = initialArgs.concat([].slice.call(arguments, 0));\r\n\r\n            return method.apply(object, args);\r\n        };\r\n\r\n        //$JssorDebug$.$LiveStamp(callback, \"callback_\" + ($Jssor$.$GetNow() & 0xFFFFFF));\r\n\r\n        return callback;\r\n    };\r\n\r\n    _This.$InnerText = function (elmt, text) {\r\n        if (text == undefined)\r\n            return elmt.textContent || elmt.innerText;\r\n\r\n        var textNode = document.createTextNode(text);\r\n        _This.$Empty(elmt);\r\n        elmt.appendChild(textNode);\r\n    };\r\n\r\n    _This.$InnerHtml = function (elmt, html) {\r\n        if (html == undefined)\r\n            return elmt.innerHTML;\r\n\r\n        elmt.innerHTML = html;\r\n    };\r\n\r\n    _This.$GetClientRect = function (elmt) {\r\n        var rect = elmt.getBoundingClientRect();\r\n\r\n        return { x: rect.left, y: rect.top, w: rect.right - rect.left, h: rect.bottom - rect.top };\r\n    };\r\n\r\n    _This.$ClearInnerHtml = function (elmt) {\r\n        elmt.innerHTML = \"\";\r\n    };\r\n\r\n    _This.$EncodeHtml = function (text) {\r\n        var div = _This.$CreateDiv();\r\n        _This.$InnerText(div, text);\r\n        return _This.$InnerHtml(div);\r\n    };\r\n\r\n    _This.$DecodeHtml = function (html) {\r\n        var div = _This.$CreateDiv();\r\n        _This.$InnerHtml(div, html);\r\n        return _This.$InnerText(div);\r\n    };\r\n\r\n    _This.$SelectElement = function (elmt) {\r\n        var userSelection;\r\n        if (window.getSelection) {\r\n            //W3C default\r\n            userSelection = window.getSelection();\r\n        }\r\n        var theRange = null;\r\n        if (document.createRange) {\r\n            theRange = document.createRange();\r\n            theRange.selectNode(elmt);\r\n        }\r\n        else {\r\n            theRange = document.body.createTextRange();\r\n            theRange.moveToElementText(elmt);\r\n            theRange.select();\r\n        }\r\n        //set user selection\r\n        if (userSelection)\r\n            userSelection.addRange(theRange);\r\n    };\r\n\r\n    _This.$DeselectElements = function () {\r\n        if (document.selection) {\r\n            document.selection.empty();\r\n        } else if (window.getSelection) {\r\n            window.getSelection().removeAllRanges();\r\n        }\r\n    };\r\n\r\n    _This.$Children = function (elmt, includeAll) {\r\n        var children = [];\r\n\r\n        for (var tmpEl = elmt.firstChild; tmpEl; tmpEl = tmpEl.nextSibling) {\r\n            if (includeAll || tmpEl.nodeType == 1) {\r\n                children.push(tmpEl);\r\n            }\r\n        }\r\n\r\n        return children;\r\n    };\r\n\r\n    function FindChild(elmt, attrValue, noDeep, attrName) {\r\n        attrName = attrName || \"u\";\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (AttributeEx(elmt, attrName) == attrValue)\r\n                    return elmt;\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChild(elmt, attrValue, noDeep, attrName);\r\n                    if (childRet)\r\n                        return childRet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$FindChild = FindChild;\r\n\r\n    function FindChildren(elmt, attrValue, noDeep, attrName) {\r\n        attrName = attrName || \"u\";\r\n\r\n        var ret = [];\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (AttributeEx(elmt, attrName) == attrValue)\r\n                    ret.push(elmt);\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildren(elmt, attrValue, noDeep, attrName);\r\n                    if (childRet.length)\r\n                        ret = ret.concat(childRet);\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _This.$FindChildren = FindChildren;\r\n\r\n    function FindChildByTag(elmt, tagName, noDeep) {\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (elmt.tagName == tagName)\r\n                    return elmt;\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildByTag(elmt, tagName, noDeep);\r\n                    if (childRet)\r\n                        return childRet;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _This.$FindChildByTag = FindChildByTag;\r\n\r\n    function FindChildrenByTag(elmt, tagName, noDeep) {\r\n        var ret = [];\r\n\r\n        for (elmt = elmt ? elmt.firstChild : null; elmt; elmt = elmt.nextSibling) {\r\n            if (elmt.nodeType == 1) {\r\n                if (!tagName || elmt.tagName == tagName)\r\n                    ret.push(elmt);\r\n\r\n                if (!noDeep) {\r\n                    var childRet = FindChildrenByTag(elmt, tagName, noDeep);\r\n                    if (childRet.length)\r\n                        ret = ret.concat(childRet);\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    _This.$FindChildrenByTag = FindChildrenByTag;\r\n\r\n    _This.$GetElementsByTag = function (elmt, tagName) {\r\n        return elmt.getElementsByTagName(tagName);\r\n    };\r\n\r\n    //function Extend() {\r\n    //    var args = arguments;\r\n    //    var target;\r\n    //    var options;\r\n    //    var propName;\r\n    //    var propValue;\r\n    //    var targetPropValue;\r\n    //    var purpose = 7 & args[0];\r\n    //    var deep = 1 & purpose;\r\n    //    var unextend = 2 & purpose;\r\n    //    var i = purpose ? 2 : 1;\r\n    //    target = args[i - 1] || {};\r\n\r\n    //    for (; i < args.length; i++) {\r\n    //        // Only deal with non-null/undefined values\r\n    //        if (options = args[i]) {\r\n    //            // Extend the base object\r\n    //            for (propName in options) {\r\n    //                propValue = options[propName];\r\n\r\n    //                if (propValue !== undefined) {\r\n    //                    propValue = options[propName];\r\n\r\n    //                    if (unextend) {\r\n    //                        targetPropValue = target[propName];\r\n    //                        if (propValue === targetPropValue)\r\n    //                            delete target[propName];\r\n    //                        else if (deep && IsPlainObject(targetPropValue)) {\r\n    //                            Extend(purpose, targetPropValue, propValue);\r\n    //                        }\r\n    //                    }\r\n    //                    else {\r\n    //                        target[propName] = (deep && IsPlainObject(target[propName])) ? Extend(purpose | 4, {}, propValue) : propValue;\r\n    //                    }\r\n    //                }\r\n    //            }\r\n    //        }\r\n    //    }\r\n\r\n    //    // Return the modified object\r\n    //    return target;\r\n    //}\r\n\r\n    //function Unextend() {\r\n    //    var args = arguments;\r\n    //    var newArgs = [].slice.call(arguments);\r\n    //    var purpose = 1 & args[0];\r\n\r\n    //    purpose && newArgs.shift();\r\n    //    newArgs.unshift(purpose | 2);\r\n\r\n    //    return Extend.apply(null, newArgs);\r\n    //}\r\n\r\n    function Extend() {\r\n        var args = arguments;\r\n        var target;\r\n        var options;\r\n        var propName;\r\n        var propValue;\r\n        var deep = 1 & args[0];\r\n        var i = 1 + deep;\r\n        target = args[i - 1] || {};\r\n\r\n        for (; i < args.length; i++) {\r\n            // Only deal with non-null/undefined values\r\n            if (options = args[i]) {\r\n                // Extend the base object\r\n                for (propName in options) {\r\n                    propValue = options[propName];\r\n\r\n                    if (propValue !== undefined) {\r\n                        propValue = options[propName];\r\n                        target[propName] = (deep && IsPlainObject(target[propName])) ? Extend(deep, {}, propValue) : propValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    }\r\n\r\n    _This.$Extend = Extend;\r\n\r\n    function Unextend(target, option) {\r\n        $JssorDebug$.$Assert(option);\r\n\r\n        var unextended = {};\r\n        var name;\r\n        var targetProp;\r\n        var optionProp;\r\n\r\n        // Extend the base object\r\n        for (name in target) {\r\n            targetProp = target[name];\r\n            optionProp = option[name];\r\n\r\n            if (targetProp !== optionProp) {\r\n                var exclude;\r\n\r\n                if (IsPlainObject(targetProp) && IsPlainObject(optionProp)) {\r\n                    targetProp = Unextend(optionProp);\r\n                    exclude = !IsNotEmpty(targetProp);\r\n                }\r\n                \r\n                !exclude && (unextended[name] = targetProp);\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return unextended;\r\n    }\r\n\r\n    _This.$Unextend = Unextend;\r\n\r\n    _This.$IsFunction = function (obj) {\r\n        return Type(obj) == \"function\";\r\n    };\r\n\r\n    _This.$IsArray = function (obj) {\r\n        return Type(obj) == \"array\";\r\n    };\r\n\r\n    _This.$IsString = function (obj) {\r\n        return Type(obj) == \"string\";\r\n    };\r\n\r\n    _This.$IsNumeric = function (obj) {\r\n        return !isNaN(ParseFloat(obj)) && isFinite(obj);\r\n    };\r\n\r\n    _This.$Type = Type;\r\n\r\n    // args is for internal usage only\r\n    _This.$Each = Each;\r\n\r\n    _This.$IsNotEmpty = IsNotEmpty;\r\n\r\n    _This.$IsPlainObject = IsPlainObject;\r\n\r\n    function CreateElement(tagName) {\r\n        return document.createElement(tagName);\r\n    }\r\n\r\n    _This.$CreateElement = CreateElement;\r\n\r\n    _This.$CreateDiv = function () {\r\n        return CreateElement(\"DIV\");\r\n    };\r\n\r\n    _This.$CreateSpan = function () {\r\n        return CreateElement(\"SPAN\");\r\n    };\r\n\r\n    _This.$EmptyFunction = function () { };\r\n\r\n    function Attribute(elmt, name, value) {\r\n        if (value == undefined)\r\n            return elmt.getAttribute(name);\r\n\r\n        elmt.setAttribute(name, value);\r\n    }\r\n\r\n    function AttributeEx(elmt, name) {\r\n        return Attribute(elmt, name) || Attribute(elmt, \"data-\" + name);\r\n    }\r\n\r\n    _This.$Attribute = Attribute;\r\n    _This.$AttributeEx = AttributeEx;\r\n\r\n    function ClassName(elmt, className) {\r\n        if (className == undefined)\r\n            return elmt.className;\r\n\r\n        elmt.className = className;\r\n    }\r\n\r\n    _This.$ClassName = ClassName;\r\n\r\n    function ToHash(array) {\r\n        var hash = {};\r\n\r\n        Each(array, function (item) {\r\n            hash[item] = item;\r\n        });\r\n\r\n        return hash;\r\n    }\r\n\r\n    function Split(str, separator) {\r\n        return str.match(separator || REGEX_WHITESPACE_GLOBAL);\r\n    }\r\n\r\n    function StringToHashObject(str, regExp) {\r\n        return ToHash(Split(str || \"\", regExp));\r\n    }\r\n\r\n    _This.$ToHash = ToHash;\r\n    _This.$Split = Split;\r\n\r\n    function Join(separator, strings) {\r\n        ///\t<param name=\"separator\" type=\"String\">\r\n        ///\t</param>\r\n        ///\t<param name=\"strings\" type=\"Array\" value=\"['1']\">\r\n        ///\t</param>\r\n\r\n        var joined = \"\";\r\n\r\n        Each(strings, function (str) {\r\n            joined && (joined += separator);\r\n            joined += str;\r\n        });\r\n\r\n        return joined;\r\n    }\r\n\r\n    function ReplaceClass(elmt, oldClassName, newClassName) {\r\n        ClassName(elmt, Join(\" \", Extend(Unextend(StringToHashObject(ClassName(elmt)), StringToHashObject(oldClassName)), StringToHashObject(newClassName))));\r\n    }\r\n\r\n    _This.$Join = Join;\r\n\r\n    _This.$AddClass = function (elmt, className) {\r\n        ReplaceClass(elmt, null, className);\r\n    };\r\n\r\n    _This.$RemoveClass = ReplaceClass;\r\n\r\n    _This.$ReplaceClass = ReplaceClass;\r\n\r\n    _This.$ParentNode = function (elmt) {\r\n        return elmt.parentNode;\r\n    };\r\n\r\n    _This.$HideElement = function (elmt) {\r\n        _This.$CssDisplay(elmt, \"none\");\r\n    };\r\n\r\n    _This.$EnableElement = function (elmt, notEnable) {\r\n        if (notEnable) {\r\n            _This.$Attribute(elmt, \"disabled\", true);\r\n        }\r\n        else {\r\n            _This.$RemoveAttribute(elmt, \"disabled\");\r\n        }\r\n    };\r\n\r\n    _This.$HideElements = function (elmts) {\r\n        for (var i = 0; i < elmts.length; i++) {\r\n            _This.$HideElement(elmts[i]);\r\n        }\r\n    };\r\n\r\n    _This.$ShowElement = function (elmt, hide) {\r\n        _This.$CssDisplay(elmt, hide ? \"none\" : \"\");\r\n    };\r\n\r\n    _This.$ShowElements = function (elmts, hide) {\r\n        for (var i = 0; i < elmts.length; i++) {\r\n            _This.$ShowElement(elmts[i], hide);\r\n        }\r\n    };\r\n\r\n    _This.$RemoveAttribute = function (elmt, attrbuteName) {\r\n        elmt.removeAttribute(attrbuteName);\r\n    };\r\n\r\n    _This.$CanClearClip = function () {\r\n        return IsBrowserIE() && _BrowserRuntimeVersion < 10;\r\n    };\r\n\r\n    _This.$SetStyleClip = function (elmt, clip) {\r\n        if (clip) {\r\n            elmt.style.clip = \"rect(\" + Math.round(clip.$Top) + \"px \" + Math.round(clip.$Right) + \"px \" + Math.round(clip.$Bottom) + \"px \" + Math.round(clip.$Left) + \"px)\";\r\n        }\r\n        else {\r\n            var cssText = elmt.style.cssText;\r\n            var clipRegs = [\r\n                new RegExp(/[\\s]*clip: rect\\(.*?\\)[;]?/i),\r\n                new RegExp(/[\\s]*cliptop: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipright: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipbottom: .*?[;]?/i),\r\n                new RegExp(/[\\s]*clipleft: .*?[;]?/i)\r\n            ];\r\n\r\n            var newCssText = BuildNewCss(cssText, clipRegs, \"\");\r\n\r\n            $Jssor$.$CssCssText(elmt, newCssText);\r\n        }\r\n    };\r\n\r\n    _This.$GetNow = function () {\r\n        return new Date().getTime();\r\n    };\r\n\r\n    _This.$AppendChild = function (elmt, child) {\r\n        elmt.appendChild(child);\r\n    };\r\n\r\n    _This.$AppendChildren = function (elmt, children) {\r\n        Each(children, function (child) {\r\n            _This.$AppendChild(elmt, child);\r\n        });\r\n    };\r\n\r\n    _This.$InsertBefore = function (newNode, refNode, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tInsert a node before a reference node\r\n        ///\t</summary>\r\n        ///\t<param name=\"newNode\" type=\"HTMLElement\">\r\n        ///\t\tA new node to insert\r\n        ///\t</param>\r\n        ///\t<param name=\"refNode\" type=\"HTMLElement\">\r\n        ///\t\tThe reference node to insert a new node before\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to insert node to\r\n        ///\t</param>\r\n\r\n        (pNode || refNode.parentNode).insertBefore(newNode, refNode);\r\n    };\r\n\r\n    _This.$InsertAfter = function (newNode, refNode, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tInsert a node after a reference node\r\n        ///\t</summary>\r\n        ///\t<param name=\"newNode\" type=\"HTMLElement\">\r\n        ///\t\tA new node to insert\r\n        ///\t</param>\r\n        ///\t<param name=\"refNode\" type=\"HTMLElement\">\r\n        ///\t\tThe reference node to insert a new node after\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to insert node to\r\n        ///\t</param>\r\n\r\n        _This.$InsertBefore(newNode, refNode.nextSibling, pNode || refNode.parentNode);\r\n    };\r\n\r\n    _This.$InsertAdjacentHtml = function (elmt, where, html) {\r\n        elmt.insertAdjacentHTML(where, html);\r\n    };\r\n\r\n    _This.$RemoveElement = function (elmt, pNode) {\r\n        ///\t<summary>\r\n        ///\t\tRemove element from parent node\r\n        ///\t</summary>\r\n        ///\t<param name=\"elmt\" type=\"HTMLElement\">\r\n        ///\t\tThe element to remove\r\n        ///\t</param>\r\n        ///\t<param name=\"pNode\" type=\"HTMLElement\" optional=\"true\">\r\n        ///\t\tThe parent node to remove elment from\r\n        ///\t</param>\r\n        (pNode || elmt.parentNode).removeChild(elmt);\r\n    };\r\n\r\n    _This.$RemoveElements = function (elmts, pNode) {\r\n        Each(elmts, function (elmt) {\r\n            _This.$RemoveElement(elmt, pNode);\r\n        });\r\n    };\r\n\r\n    _This.$Empty = function (elmt) {\r\n        _This.$RemoveElements(_This.$Children(elmt, true), elmt);\r\n    };\r\n\r\n    _This.$ParseInt = function (str, radix) {\r\n        return parseInt(str, radix || 10);\r\n    };\r\n\r\n    var ParseFloat = parseFloat;\r\n\r\n    _This.$ParseFloat = ParseFloat;\r\n\r\n    _This.$IsChild = function (elmtA, elmtB) {\r\n        var body = document.body;\r\n\r\n        while (elmtB && elmtA !== elmtB && body !== elmtB) {\r\n            try {\r\n                elmtB = elmtB.parentNode;\r\n            } catch (e) {\r\n                // Firefox sometimes fires events for XUL elements, which throws\r\n                // a \"permission denied\" error. so this is not a child.\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return elmtA === elmtB;\r\n    };\r\n\r\n    function CloneNode(elmt, noDeep, keepId) {\r\n        var clone = elmt.cloneNode(!noDeep);\r\n        if (!keepId) {\r\n            _This.$RemoveAttribute(clone, \"id\");\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    _This.$CloneNode = CloneNode;\r\n\r\n    _This.$LoadImage = function (src, callback) {\r\n        var image = new Image();\r\n\r\n        function LoadImageCompleteHandler(event, abort) {\r\n            _This.$RemoveEvent(image, \"load\", LoadImageCompleteHandler);\r\n            _This.$RemoveEvent(image, \"abort\", ErrorOrAbortHandler);\r\n            _This.$RemoveEvent(image, \"error\", ErrorOrAbortHandler);\r\n\r\n            if (callback)\r\n                callback(image, abort);\r\n        }\r\n\r\n        function ErrorOrAbortHandler(event) {\r\n            LoadImageCompleteHandler(event, true);\r\n        }\r\n\r\n        if (IsBrowserOpera() && _BrowserRuntimeVersion < 11.6 || !src) {\r\n            LoadImageCompleteHandler(!src);\r\n        }\r\n        else {\r\n\r\n            _This.$AddEvent(image, \"load\", LoadImageCompleteHandler);\r\n            _This.$AddEvent(image, \"abort\", ErrorOrAbortHandler);\r\n            _This.$AddEvent(image, \"error\", ErrorOrAbortHandler);\r\n\r\n            image.src = src;\r\n        }\r\n    };\r\n\r\n    _This.$LoadImages = function (imageElmts, mainImageElmt, callback) {\r\n\r\n        var _ImageLoading = imageElmts.length + 1;\r\n\r\n        function LoadImageCompleteEventHandler(image, abort) {\r\n\r\n            _ImageLoading--;\r\n            if (mainImageElmt && image && image.src == mainImageElmt.src)\r\n                mainImageElmt = image;\r\n            !_ImageLoading && callback && callback(mainImageElmt);\r\n        }\r\n\r\n        Each(imageElmts, function (imageElmt) {\r\n            _This.$LoadImage(imageElmt.src, LoadImageCompleteEventHandler);\r\n        });\r\n\r\n        LoadImageCompleteEventHandler();\r\n    };\r\n\r\n    _This.$BuildElement = function (template, tagName, replacer, createCopy) {\r\n        if (createCopy)\r\n            template = CloneNode(template);\r\n\r\n        var templateHolders = FindChildren(template, tagName);\r\n        if (!templateHolders.length)\r\n            templateHolders = $Jssor$.$GetElementsByTag(template, tagName);\r\n\r\n        for (var j = templateHolders.length - 1; j > -1; j--) {\r\n            var templateHolder = templateHolders[j];\r\n            var replaceItem = CloneNode(replacer);\r\n            ClassName(replaceItem, ClassName(templateHolder));\r\n            $Jssor$.$CssCssText(replaceItem, templateHolder.style.cssText);\r\n\r\n            $Jssor$.$InsertBefore(replaceItem, templateHolder);\r\n            $Jssor$.$RemoveElement(templateHolder);\r\n        }\r\n\r\n        return template;\r\n    };\r\n\r\n    function JssorButtonEx(elmt) {\r\n        var _Self = this;\r\n\r\n        var _OriginClassName = \"\";\r\n        var _ToggleClassSuffixes = [\"av\", \"pv\", \"ds\", \"dn\"];\r\n        var _ToggleClasses = [];\r\n        var _ToggleClassName;\r\n\r\n        var _IsMouseDown = 0;   //class name 'dn'\r\n        var _IsSelected = 0;    //class name 1(active): 'av', 2(passive): 'pv'\r\n        var _IsDisabled = 0;    //class name 'ds'\r\n\r\n        function Highlight() {\r\n            ReplaceClass(elmt, _ToggleClassName, _ToggleClasses[_IsDisabled || _IsMouseDown || (_IsSelected & 2) || _IsSelected]);\r\n            $Jssor$.$Css(elmt, \"pointer-events\", _IsDisabled ? \"none\" : \"\");\r\n        }\r\n\r\n        function MouseUpOrCancelEventHandler(event) {\r\n            _IsMouseDown = 0;\r\n\r\n            Highlight();\r\n\r\n            _This.$RemoveEvent(document, \"mouseup\", MouseUpOrCancelEventHandler);\r\n            _This.$RemoveEvent(document, \"touchend\", MouseUpOrCancelEventHandler);\r\n            _This.$RemoveEvent(document, \"touchcancel\", MouseUpOrCancelEventHandler);\r\n        }\r\n\r\n        function MouseDownEventHandler(event) {\r\n            if (_IsDisabled) {\r\n                _This.$CancelEvent(event);\r\n            }\r\n            else {\r\n\r\n                _IsMouseDown = 4;\r\n\r\n                Highlight();\r\n\r\n                _This.$AddEvent(document, \"mouseup\", MouseUpOrCancelEventHandler);\r\n                _This.$AddEvent(document, \"touchend\", MouseUpOrCancelEventHandler);\r\n                _This.$AddEvent(document, \"touchcancel\", MouseUpOrCancelEventHandler);\r\n            }\r\n        }\r\n\r\n        _Self.$Selected = function (activate) {\r\n            if (activate != undefined) {\r\n                _IsSelected = (activate & 2) || (activate & 1);\r\n\r\n                Highlight();\r\n            }\r\n            else {\r\n                return _IsSelected;\r\n            }\r\n        };\r\n\r\n        _Self.$Enable = function (enable) {\r\n            if (enable == undefined) {\r\n                return !_IsDisabled;\r\n            }\r\n\r\n            _IsDisabled = enable ? 0 : 3;\r\n\r\n            Highlight();\r\n        };\r\n\r\n        //JssorButtonEx Constructor\r\n        {\r\n            elmt = _This.$GetElement(elmt);\r\n\r\n            var originalClassNameArray = $Jssor$.$Split(ClassName(elmt));\r\n            if (originalClassNameArray)\r\n                _OriginClassName = originalClassNameArray.shift();\r\n\r\n            Each(_ToggleClassSuffixes, function (toggleClassSuffix) {\r\n                _ToggleClasses.push(_OriginClassName +toggleClassSuffix);\r\n            });\r\n\r\n            _ToggleClassName = Join(\" \", _ToggleClasses);\r\n\r\n            _ToggleClasses.unshift(\"\");\r\n\r\n            _This.$AddEvent(elmt, \"mousedown\", MouseDownEventHandler);\r\n            _This.$AddEvent(elmt, \"touchstart\", MouseDownEventHandler);\r\n        }\r\n    }\r\n\r\n    _This.$Buttonize = function (elmt) {\r\n        return new JssorButtonEx(elmt);\r\n    };\r\n\r\n    _This.$Css = Css;\r\n    _This.$CssN = CssN;\r\n    _This.$CssP = CssP;\r\n\r\n    _This.$CssOverflow = CssProxy(\"overflow\");\r\n\r\n    _This.$CssTop = CssProxy(\"top\", 2);\r\n    _This.$CssLeft = CssProxy(\"left\", 2);\r\n    _This.$CssWidth = CssProxy(\"width\", 2);\r\n    _This.$CssHeight = CssProxy(\"height\", 2);\r\n    _This.$CssMarginLeft = CssProxy(\"marginLeft\", 2);\r\n    _This.$CssMarginTop = CssProxy(\"marginTop\", 2);\r\n    _This.$CssPosition = CssProxy(\"position\");\r\n    _This.$CssDisplay = CssProxy(\"display\");\r\n    _This.$CssZIndex = CssProxy(\"zIndex\", 1);\r\n    _This.$CssFloat = function (elmt, floatValue) {\r\n        return Css(elmt, IsBrowserIE() ? \"styleFloat\" : \"cssFloat\", floatValue);\r\n    };\r\n    _This.$CssOpacity = function (elmt, opacity, ie9EarlierForce) {\r\n        if (opacity != undefined) {\r\n            SetStyleOpacity(elmt, opacity, ie9EarlierForce);\r\n        }\r\n        else {\r\n            return GetStyleOpacity(elmt);\r\n        }\r\n    };\r\n\r\n    _This.$CssCssText = function (elmt, text) {\r\n        if (text != undefined) {\r\n            elmt.style.cssText = text;\r\n        }\r\n        else {\r\n            return elmt.style.cssText;\r\n        }\r\n    };\r\n\r\n    var _StyleGetter = {\r\n        $Opacity: _This.$CssOpacity,\r\n        $Top: _This.$CssTop,\r\n        $Left: _This.$CssLeft,\r\n        $Width: _This.$CssWidth,\r\n        $Height: _This.$CssHeight,\r\n        $Position: _This.$CssPosition,\r\n        $Display: _This.$CssDisplay,\r\n        $ZIndex: _This.$CssZIndex\r\n    };\r\n\r\n    var _StyleSetterReserved;\r\n\r\n    function StyleSetter() {\r\n        if (!_StyleSetterReserved) {\r\n            _StyleSetterReserved = Extend({\r\n                $MarginTop: _This.$CssMarginTop,\r\n                $MarginLeft: _This.$CssMarginLeft,\r\n                $Clip: _This.$SetStyleClip,\r\n                $Transform: _This.$SetStyleTransform\r\n            }, _StyleGetter);\r\n        }\r\n        return _StyleSetterReserved;\r\n    }\r\n\r\n    function StyleSetterEx() {\r\n        StyleSetter();\r\n\r\n        //For Compression Only\r\n        _StyleSetterReserved.$Transform = _StyleSetterReserved.$Transform;\r\n\r\n        return _StyleSetterReserved;\r\n    }\r\n\r\n    _This.$StyleSetter = StyleSetter;\r\n\r\n    _This.$StyleSetterEx = StyleSetterEx;\r\n\r\n    _This.$GetStyles = function (elmt, originStyles) {\r\n        StyleSetter();\r\n\r\n        var styles = {};\r\n\r\n        Each(originStyles, function (value, key) {\r\n            if (_StyleGetter[key]) {\r\n                styles[key] = _StyleGetter[key](elmt);\r\n            }\r\n        });\r\n\r\n        return styles;\r\n    };\r\n\r\n    _This.$SetStyles = function (elmt, styles) {\r\n        var styleSetter = StyleSetter();\r\n\r\n        Each(styles, function (value, key) {\r\n            styleSetter[key] && styleSetter[key](elmt, value);\r\n        });\r\n    };\r\n\r\n    _This.$SetStylesEx = function (elmt, styles) {\r\n        StyleSetterEx();\r\n\r\n        _This.$SetStyles(elmt, styles);\r\n    };\r\n\r\n    var $JssorMatrix$ = new function () {\r\n        var _ThisMatrix = this;\r\n\r\n        function Multiply(ma, mb) {\r\n            var acs = ma[0].length;\r\n            var rows = ma.length;\r\n            var cols = mb[0].length;\r\n\r\n            var matrix = [];\r\n\r\n            for (var r = 0; r < rows; r++) {\r\n                var row = matrix[r] = [];\r\n                for (var c = 0; c < cols; c++) {\r\n                    var unitValue = 0;\r\n\r\n                    for (var ac = 0; ac < acs; ac++) {\r\n                        unitValue += ma[r][ac] * mb[ac][c];\r\n                    }\r\n\r\n                    row[c] = unitValue;\r\n                }\r\n            }\r\n\r\n            return matrix;\r\n        }\r\n\r\n        _ThisMatrix.$ScaleX = function (matrix, sx) {\r\n            return _ThisMatrix.$ScaleXY(matrix, sx, 0);\r\n        };\r\n\r\n        _ThisMatrix.$ScaleY = function (matrix, sy) {\r\n            return _ThisMatrix.$ScaleXY(matrix, 0, sy);\r\n        };\r\n\r\n        _ThisMatrix.$ScaleXY = function (matrix, sx, sy) {\r\n            return Multiply(matrix, [[sx, 0], [0, sy]]);\r\n        };\r\n\r\n        _ThisMatrix.$TransformPoint = function (matrix, p) {\r\n            var pMatrix = Multiply(matrix, [[p.x], [p.y]]);\r\n\r\n            return Point(pMatrix[0][0], pMatrix[1][0]);\r\n        };\r\n    };\r\n\r\n    _This.$CreateMatrix = function (alpha, scaleX, scaleY) {\r\n        var cos = Math.cos(alpha);\r\n        var sin = Math.sin(alpha);\r\n        //var r11 = cos;\r\n        //var r21 = sin;\r\n        //var r12 = -sin;\r\n        //var r22 = cos;\r\n\r\n        //var m11 = cos * scaleX;\r\n        //var m12 = -sin * scaleY;\r\n        //var m21 = sin * scaleX;\r\n        //var m22 = cos * scaleY;\r\n\r\n        return [[cos * scaleX, -sin * scaleY], [sin * scaleX, cos * scaleY]];\r\n    };\r\n\r\n    _This.$GetMatrixOffset = function (matrix, width, height) {\r\n        var p1 = $JssorMatrix$.$TransformPoint(matrix, Point(-width / 2, -height / 2));\r\n        var p2 = $JssorMatrix$.$TransformPoint(matrix, Point(width / 2, -height / 2));\r\n        var p3 = $JssorMatrix$.$TransformPoint(matrix, Point(width / 2, height / 2));\r\n        var p4 = $JssorMatrix$.$TransformPoint(matrix, Point(-width / 2, height / 2));\r\n\r\n        return Point(Math.min(p1.x, p2.x, p3.x, p4.x) + width / 2, Math.min(p1.y, p2.y, p3.y, p4.y) + height / 2);\r\n    };\r\n\r\n    _This.$Cast = function (fromStyles, difStyles, interPosition, easings, durings, rounds, options) {\r\n\r\n        var currentStyles = difStyles;\r\n\r\n        if (fromStyles) {\r\n            currentStyles = {};\r\n\r\n            for (var key in difStyles) {\r\n\r\n                var round = rounds[key] || 1;\r\n                var during = durings[key] || [0, 1];\r\n                var propertyInterPosition = (interPosition - during[0]) / during[1];\r\n                propertyInterPosition = Math.min(Math.max(propertyInterPosition, 0), 1);\r\n                propertyInterPosition = propertyInterPosition * round;\r\n                var floorPosition = Math.floor(propertyInterPosition);\r\n                if (propertyInterPosition != floorPosition)\r\n                    propertyInterPosition -= floorPosition;\r\n\r\n                var easing = easings[key] || easings.$Default || $JssorEasing$.$EaseSwing;\r\n                var easingValue = easing(propertyInterPosition);\r\n                var currentPropertyValue;\r\n                var value = fromStyles[key];\r\n                var toValue = difStyles[key];\r\n                var difValue = difStyles[key];\r\n\r\n                if ($Jssor$.$IsNumeric(difValue)) {\r\n                    currentPropertyValue = value + difValue * easingValue;\r\n                }\r\n                else {\r\n                    currentPropertyValue = $Jssor$.$Extend({ $Offset: {} }, fromStyles[key]);\r\n\r\n                    $Jssor$.$Each(difValue.$Offset, function (rectX, n) {\r\n                        var offsetValue = rectX * easingValue;\r\n                        currentPropertyValue.$Offset[n] = offsetValue;\r\n                        currentPropertyValue[n] += offsetValue;\r\n                    });\r\n                }\r\n                currentStyles[key] = currentPropertyValue;\r\n            }\r\n\r\n            if (difStyles.$Zoom || difStyles.$Rotate) {\r\n                currentStyles.$Transform = { $Rotate: currentStyles.$Rotate || 0, $Scale: currentStyles.$Zoom, $OriginalWidth: options.$OriginalWidth, $OriginalHeight: options.$OriginalHeight };\r\n            }\r\n        }\r\n\r\n        if (difStyles.$Clip && options.$Move) {\r\n            var styleFrameNClipOffset = currentStyles.$Clip.$Offset;\r\n\r\n            var offsetY = (styleFrameNClipOffset.$Top || 0) + (styleFrameNClipOffset.$Bottom || 0);\r\n            var offsetX = (styleFrameNClipOffset.$Left || 0) + (styleFrameNClipOffset.$Right || 0);\r\n\r\n            currentStyles.$Left = (currentStyles.$Left || 0) + offsetX;\r\n            currentStyles.$Top = (currentStyles.$Top || 0) + offsetY;\r\n            currentStyles.$Clip.$Left -= offsetX;\r\n            currentStyles.$Clip.$Right -= offsetX;\r\n            currentStyles.$Clip.$Top -= offsetY;\r\n            currentStyles.$Clip.$Bottom -= offsetY;\r\n        }\r\n\r\n        if (currentStyles.$Clip && $Jssor$.$CanClearClip() && !currentStyles.$Clip.$Top && !currentStyles.$Clip.$Left && (currentStyles.$Clip.$Right == options.$OriginalWidth) && (currentStyles.$Clip.$Bottom == options.$OriginalHeight))\r\n            currentStyles.$Clip = null;\r\n\r\n        return currentStyles;\r\n    };\r\n};\r\n\r\n//$JssorObject$\r\nfunction $JssorObject$() {\r\n    var _ThisObject = this;\r\n    // Fields\r\n\r\n    var _Listeners = []; // dictionary of eventName --> array of handlers\r\n    var _Listenees = [];\r\n\r\n    // Private Methods\r\n    function AddListener(eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n\r\n            $Jssor$.$Each(_Listeners, function (listener) {\r\n                if (listener.$EventName == eventName && listener.$Handler === handler) {\r\n                    throw new Error(\"The handler listened to the event already, cannot listen to the same event of the same object with the same handler twice.\");\r\n                }\r\n            });\r\n        });\r\n\r\n        _Listeners.push({ $EventName: eventName, $Handler: handler });\r\n    }\r\n\r\n    function RemoveListener(eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n        });\r\n\r\n        $Jssor$.$Each(_Listeners, function (listener, index) {\r\n            if (listener.$EventName == eventName && listener.$Handler === handler) {\r\n                _Listeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    function ClearListeners() {\r\n        _Listeners = [];\r\n    }\r\n\r\n    function ClearListenees() {\r\n\r\n        $Jssor$.$Each(_Listenees, function (listenee) {\r\n            $Jssor$.$RemoveEvent(listenee.$Obj, listenee.$EventName, listenee.$Handler);\r\n        });\r\n\r\n        _Listenees = [];\r\n    }\r\n\r\n    //Protected Methods\r\n    _ThisObject.$Listen = function (obj, eventName, handler, useCapture) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!obj)\r\n                throw new Error(\"param 'obj' is null or empty.\");\r\n\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n\r\n            $Jssor$.$Each(_Listenees, function (listenee) {\r\n                if (listenee.$Obj === obj && listenee.$EventName == eventName && listenee.$Handler === handler) {\r\n                    throw new Error(\"The handler listened to the event already, cannot listen to the same event of the same object with the same handler twice.\");\r\n                }\r\n            });\r\n        });\r\n\r\n        $Jssor$.$AddEvent(obj, eventName, handler, useCapture);\r\n        _Listenees.push({ $Obj: obj, $EventName: eventName, $Handler: handler });\r\n    };\r\n\r\n    _ThisObject.$Unlisten = function (obj, eventName, handler) {\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!obj)\r\n                throw new Error(\"param 'obj' is null or empty.\");\r\n\r\n            if (eventName == undefined || eventName == null)\r\n                throw new Error(\"param 'eventName' is null or empty.\");\r\n\r\n            if (typeof (handler) != \"function\") {\r\n                throw \"param 'handler' must be a function.\";\r\n            }\r\n        });\r\n\r\n        $Jssor$.$Each(_Listenees, function (listenee, index) {\r\n            if (listenee.$Obj === obj && listenee.$EventName == eventName && listenee.$Handler === handler) {\r\n                $Jssor$.$RemoveEvent(obj, eventName, handler);\r\n                _Listenees.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n\r\n    _ThisObject.$UnlistenAll = ClearListenees;\r\n\r\n    // Public Methods\r\n    _ThisObject.$On = _ThisObject.addEventListener = AddListener;\r\n\r\n    _ThisObject.$Off = _ThisObject.removeEventListener = RemoveListener;\r\n\r\n    _ThisObject.$TriggerEvent = function (eventName) {\r\n\r\n        var args = [].slice.call(arguments, 1);\r\n\r\n        $Jssor$.$Each(_Listeners, function (listener) {\r\n            listener.$EventName == eventName && listener.$Handler.apply(window, args);\r\n        });\r\n    };\r\n\r\n    _ThisObject.$Destroy = function () {\r\n        ClearListenees();\r\n        ClearListeners();\r\n\r\n        for (var name in _ThisObject)\r\n            delete _ThisObject[name];\r\n    };\r\n\r\n    $JssorDebug$.$C_AbstractClass(_ThisObject);\r\n};\r\n\r\nfunction $JssorAnimator$(delay, duration, options, elmt, fromStyles, difStyles) {\r\n    delay = delay || 0;\r\n\r\n    var _ThisAnimator = this;\r\n    var _AutoPlay;\r\n    var _Hiden;\r\n    var _CombineMode;\r\n    var _PlayToPosition;\r\n    var _PlayDirection;\r\n    var _NoStop;\r\n    var _TimeStampLastFrame = 0;\r\n\r\n    var _SubEasings;\r\n    var _SubRounds;\r\n    var _SubDurings;\r\n    var _Callback;\r\n\r\n    var _Shift = 0;\r\n    var _Position_Current = 0;\r\n    var _Position_Display = 0;\r\n    var _Hooked;\r\n\r\n    var _Position_InnerBegin = delay;\r\n    var _Position_InnerEnd = delay + duration;\r\n    var _Position_OuterBegin;\r\n    var _Position_OuterEnd;\r\n    var _LoopLength;\r\n\r\n    var _NestedAnimators = [];\r\n    var _StyleSetter;\r\n\r\n    function GetPositionRange(position, begin, end) {\r\n        var range = 0;\r\n\r\n        if (position < begin)\r\n            range = -1;\r\n\r\n        else if (position > end)\r\n            range = 1;\r\n\r\n        return range;\r\n    }\r\n\r\n    function GetInnerPositionRange(position) {\r\n        return GetPositionRange(position, _Position_InnerBegin, _Position_InnerEnd);\r\n    }\r\n\r\n    function GetOuterPositionRange(position) {\r\n        return GetPositionRange(position, _Position_OuterBegin, _Position_OuterEnd);\r\n    }\r\n\r\n    function Shift(offset) {\r\n        _Position_OuterBegin += offset;\r\n        _Position_OuterEnd += offset;\r\n        _Position_InnerBegin += offset;\r\n        _Position_InnerEnd += offset;\r\n\r\n        _Position_Current += offset;\r\n        _Position_Display += offset;\r\n\r\n        _Shift = offset;\r\n    }\r\n\r\n    function Locate(position, relative) {\r\n        var offset = position - _Position_OuterBegin + delay * relative;\r\n\r\n        Shift(offset);\r\n\r\n        //$JssorDebug$.$Execute(function () {\r\n        //    _ThisAnimator.$Position_InnerBegin = _Position_InnerBegin;\r\n        //    _ThisAnimator.$Position_InnerEnd = _Position_InnerEnd;\r\n        //    _ThisAnimator.$Position_OuterBegin = _Position_OuterBegin;\r\n        //    _ThisAnimator.$Position_OuterEnd = _Position_OuterEnd;\r\n        //});\r\n\r\n        return _Position_OuterEnd;\r\n    }\r\n\r\n    function GoToPosition(positionOuter, force) {\r\n        var trimedPositionOuter = positionOuter;\r\n\r\n        if (_LoopLength && (trimedPositionOuter >= _Position_OuterEnd || trimedPositionOuter <= _Position_OuterBegin)) {\r\n            trimedPositionOuter = ((trimedPositionOuter - _Position_OuterBegin) % _LoopLength + _LoopLength) % _LoopLength + _Position_OuterBegin;\r\n        }\r\n\r\n        if (!_Hooked || _NoStop || force || _Position_Current != trimedPositionOuter) {\r\n\r\n            var positionToDisplay = Math.min(trimedPositionOuter, _Position_OuterEnd);\r\n            positionToDisplay = Math.max(positionToDisplay, _Position_OuterBegin);\r\n\r\n            if (!_Hooked || _NoStop || force || positionToDisplay != _Position_Display) {\r\n\r\n                if (difStyles) {\r\n\r\n                    var interPosition = (positionToDisplay - _Position_InnerBegin) / (duration || 1);\r\n\r\n                    if (options.$Reverse)\r\n                        interPosition = 1 - interPosition;\r\n\r\n                    var currentStyles = $Jssor$.$Cast(fromStyles, difStyles, interPosition, _SubEasings, _SubDurings, _SubRounds, options);\r\n\r\n                    $Jssor$.$Each(currentStyles, function (value, key) {\r\n                        _StyleSetter[key] && _StyleSetter[key](elmt, value);\r\n                    });\r\n                }\r\n\r\n                _ThisAnimator.$OnInnerOffsetChange(_Position_Display - _Position_InnerBegin, positionToDisplay - _Position_InnerBegin);\r\n\r\n                _Position_Display = positionToDisplay;\r\n\r\n                $Jssor$.$Each(_NestedAnimators, function (animator, i) {\r\n                    var nestedAnimator = positionOuter < _Position_Current ? _NestedAnimators[_NestedAnimators.length - i - 1] : animator;\r\n                    nestedAnimator.$GoToPosition(_Position_Display - _Shift, force);\r\n                });\r\n\r\n                var positionOld = _Position_Current;\r\n                var positionNew = _Position_Display;\r\n\r\n                _Position_Current = trimedPositionOuter;\r\n                _Hooked = true;\r\n\r\n                _ThisAnimator.$OnPositionChange(positionOld, positionNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function Join(animator, combineMode, noExpand) {\r\n        ///\t<summary>\r\n        ///\t\tCombine another animator as nested animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        ///\t<param name=\"combineMode\" type=\"int\">\r\n        ///\t\t0: parallel - place the animator parallel to this animator.\r\n        ///\t\t1: chain - chain the animator at the _Position_InnerEnd of this animator.\r\n        ///\t</param>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (combineMode !== 0 && combineMode !== 1)\r\n                $JssorDebug$.$Fail(\"Argument out of range, the value of 'combineMode' should be either 0 or 1.\");\r\n        });\r\n\r\n        if (combineMode)\r\n            animator.$Locate(_Position_OuterEnd, 1);\r\n\r\n        if (!noExpand) {\r\n            _Position_OuterBegin = Math.min(_Position_OuterBegin, animator.$GetPosition_OuterBegin() + _Shift);\r\n            _Position_OuterEnd = Math.max(_Position_OuterEnd, animator.$GetPosition_OuterEnd() + _Shift);\r\n        }\r\n        _NestedAnimators.push(animator);\r\n    }\r\n\r\n    var RequestAnimationFrame = window.requestAnimationFrame\r\n    || window.webkitRequestAnimationFrame\r\n    || window.mozRequestAnimationFrame\r\n    || window.msRequestAnimationFrame;\r\n\r\n    if ($Jssor$.$IsBrowserSafari() && $Jssor$.$BrowserVersion() < 7) {\r\n        RequestAnimationFrame = null;\r\n\r\n        //$JssorDebug$.$Log(\"Custom animation frame for safari before 7.\");\r\n    }\r\n\r\n    RequestAnimationFrame = RequestAnimationFrame || function (callback) {\r\n        $Jssor$.$Delay(callback, options.$Interval);\r\n    };\r\n\r\n    function ShowFrame() {\r\n        if (_AutoPlay) {\r\n            var now = $Jssor$.$GetNow();\r\n            var timeOffset = Math.min(now - _TimeStampLastFrame, options.$IntervalMax);\r\n            var timePosition = _Position_Current + timeOffset * _PlayDirection;\r\n            _TimeStampLastFrame = now;\r\n\r\n            if (timePosition * _PlayDirection >= _PlayToPosition * _PlayDirection)\r\n                timePosition = _PlayToPosition;\r\n\r\n            GoToPosition(timePosition);\r\n\r\n            if (!_NoStop && timePosition * _PlayDirection >= _PlayToPosition * _PlayDirection) {\r\n                Stop(_Callback);\r\n            }\r\n            else {\r\n                RequestAnimationFrame(ShowFrame);\r\n            }\r\n        }\r\n    }\r\n\r\n    function PlayToPosition(toPosition, callback, noStop) {\r\n        if (!_AutoPlay) {\r\n            _AutoPlay = true;\r\n            _NoStop = noStop\r\n            _Callback = callback;\r\n            toPosition = Math.max(toPosition, _Position_OuterBegin);\r\n            toPosition = Math.min(toPosition, _Position_OuterEnd);\r\n            _PlayToPosition = toPosition;\r\n            _PlayDirection = _PlayToPosition < _Position_Current ? -1 : 1;\r\n            _ThisAnimator.$OnStart();\r\n            _TimeStampLastFrame = $Jssor$.$GetNow();\r\n            RequestAnimationFrame(ShowFrame);\r\n        }\r\n    }\r\n\r\n    function Stop(callback) {\r\n        if (_AutoPlay) {\r\n            _NoStop = _AutoPlay = _Callback = false;\r\n            _ThisAnimator.$OnStop();\r\n\r\n            if (callback)\r\n                callback();\r\n        }\r\n    }\r\n\r\n    _ThisAnimator.$Play = function (positionLength, callback, noStop) {\r\n        PlayToPosition(positionLength ? _Position_Current + positionLength : _Position_OuterEnd, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$PlayToPosition = PlayToPosition;\r\n\r\n    _ThisAnimator.$PlayToBegin = function (callback, noStop) {\r\n        PlayToPosition(_Position_OuterBegin, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$PlayToEnd = function (callback, noStop) {\r\n        PlayToPosition(_Position_OuterEnd, callback, noStop);\r\n    };\r\n\r\n    _ThisAnimator.$Stop = Stop;\r\n\r\n    _ThisAnimator.$Continue = function (toPosition) {\r\n        PlayToPosition(toPosition);\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition = function () {\r\n        return _Position_Current;\r\n    };\r\n\r\n    _ThisAnimator.$GetPlayToPosition = function () {\r\n        return _PlayToPosition;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_Display = function () {\r\n        return _Position_Display;\r\n    };\r\n\r\n    _ThisAnimator.$GoToPosition = GoToPosition;\r\n\r\n    _ThisAnimator.$GoToBegin = function () {\r\n        GoToPosition(_Position_OuterBegin, true);\r\n    };\r\n\r\n    _ThisAnimator.$GoToEnd = function () {\r\n        GoToPosition(_Position_OuterEnd, true);\r\n    };\r\n\r\n    _ThisAnimator.$Move = function (offset) {\r\n        GoToPosition(_Position_Current + offset);\r\n    };\r\n\r\n    _ThisAnimator.$CombineMode = function () {\r\n        return _CombineMode;\r\n    };\r\n\r\n    _ThisAnimator.$GetDuration = function () {\r\n        return duration;\r\n    };\r\n\r\n    _ThisAnimator.$IsPlaying = function () {\r\n        return _AutoPlay;\r\n    };\r\n\r\n    _ThisAnimator.$IsOnTheWay = function () {\r\n        return _Position_Current > _Position_InnerBegin && _Position_Current <= _Position_InnerEnd;\r\n    };\r\n\r\n    _ThisAnimator.$SetLoopLength = function (length) {\r\n        _LoopLength = length;\r\n    };\r\n\r\n    _ThisAnimator.$Locate = Locate;\r\n\r\n    _ThisAnimator.$Shift = Shift;\r\n\r\n    _ThisAnimator.$Join = Join;\r\n\r\n    _ThisAnimator.$Combine = function (animator) {\r\n        ///\t<summary>\r\n        ///\t\tCombine another animator parallel to this animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        Join(animator, 0);\r\n    };\r\n\r\n    _ThisAnimator.$Chain = function (animator) {\r\n        ///\t<summary>\r\n        ///\t\tChain another animator at the _Position_InnerEnd of this animator\r\n        ///\t</summary>\r\n        ///\t<param name=\"animator\" type=\"$JssorAnimator$\">\r\n        ///\t\tAn instance of $JssorAnimator$\r\n        ///\t</param>\r\n        Join(animator, 1);\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_InnerBegin = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_InnerBegin;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_InnerEnd = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_InnerEnd;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_OuterBegin = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_OuterBegin;\r\n    };\r\n\r\n    _ThisAnimator.$GetPosition_OuterEnd = function () {\r\n        ///\t<summary>\r\n        ///\t\tInternal member function, do not use it.\r\n        ///\t</summary>\r\n        ///\t<private />\r\n        ///\t<returns type=\"int\" />\r\n        return _Position_OuterEnd;\r\n    };\r\n\r\n    _ThisAnimator.$OnPositionChange = _ThisAnimator.$OnStart = _ThisAnimator.$OnStop = _ThisAnimator.$OnInnerOffsetChange = $Jssor$.$EmptyFunction;\r\n    _ThisAnimator.$Version = $Jssor$.$GetNow();\r\n\r\n    //Constructor  1\r\n    {\r\n        options = $Jssor$.$Extend({\r\n            $Interval: 16,\r\n            $IntervalMax: 50\r\n        }, options);\r\n\r\n        //Sodo statement, for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            options = $Jssor$.$Extend({\r\n                $LoopLength: undefined,\r\n                $Setter: undefined,\r\n                $Easing: undefined\r\n            }, options);\r\n        });\r\n\r\n        _LoopLength = options.$LoopLength;\r\n\r\n        _StyleSetter = $Jssor$.$Extend({}, $Jssor$.$StyleSetter(), options.$Setter);\r\n\r\n        _Position_OuterBegin = _Position_InnerBegin = delay;\r\n        _Position_OuterEnd = _Position_InnerEnd = delay + duration;\r\n\r\n        _SubRounds = options.$Round || {};\r\n        _SubDurings = options.$During || {};\r\n        _SubEasings = $Jssor$.$Extend({ $Default: $Jssor$.$IsFunction(options.$Easing) && options.$Easing || $JssorEasing$.$EaseSwing }, options.$Easing);\r\n    }\r\n};\r\n\r\nfunction $JssorPlayerClass$() {\r\n\r\n    var _ThisPlayer = this;\r\n    var _PlayerControllers = [];\r\n\r\n    function PlayerController(playerElement) {\r\n        var _SelfPlayerController = this;\r\n        var _PlayerInstance;\r\n        var _PlayerInstantces = [];\r\n\r\n        function OnPlayerInstanceDataAvailable(event) {\r\n            var srcElement = $Jssor$.$EvtSrc(event);\r\n            _PlayerInstance = srcElement.pInstance;\r\n\r\n            $Jssor$.$RemoveEvent(srcElement, \"dataavailable\", OnPlayerInstanceDataAvailable);\r\n            $Jssor$.$Each(_PlayerInstantces, function (playerInstance) {\r\n                if (playerInstance != _PlayerInstance) {\r\n                    playerInstance.$Remove();\r\n                }\r\n            });\r\n\r\n            playerElement.pTagName = _PlayerInstance.tagName;\r\n            _PlayerInstantces = null;\r\n        }\r\n\r\n        function HandlePlayerInstance(playerInstanceElement) {\r\n            var playerHandler;\r\n\r\n            if (!playerInstanceElement.pInstance) {\r\n                var playerHandlerAttribute = $Jssor$.$AttributeEx(playerInstanceElement, \"pHandler\");\r\n\r\n                if ($JssorPlayer$[playerHandlerAttribute]) {\r\n                    $Jssor$.$AddEvent(playerInstanceElement, \"dataavailable\", OnPlayerInstanceDataAvailable);\r\n                    playerHandler = new $JssorPlayer$[playerHandlerAttribute](playerElement, playerInstanceElement);\r\n                    _PlayerInstantces.push(playerHandler);\r\n\r\n                    $JssorDebug$.$Execute(function () {\r\n                        if ($Jssor$.$Type(playerHandler.$Remove) != \"function\") {\r\n                            $JssorDebug$.$Fail(\"'pRemove' interface not implemented for player handler '\" + playerHandlerAttribute + \"'.\");\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            return playerHandler;\r\n        }\r\n\r\n        _SelfPlayerController.$InitPlayerController = function () {\r\n            if (!playerElement.pInstance && !HandlePlayerInstance(playerElement)) {\r\n\r\n                var playerInstanceElements = $Jssor$.$Children(playerElement);\r\n\r\n                $Jssor$.$Each(playerInstanceElements, function (playerInstanceElement) {\r\n                    HandlePlayerInstance(playerInstanceElement);\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    _ThisPlayer.$EVT_SWITCH = 21;\r\n\r\n    _ThisPlayer.$FetchPlayers = function (elmt) {\r\n        elmt = elmt || document.body;\r\n\r\n        var playerElements = $Jssor$.$FindChildren(elmt, \"player\");\r\n\r\n        $Jssor$.$Each(playerElements, function (playerElement) {\r\n            if (!_PlayerControllers[playerElement.pId]) {\r\n                playerElement.pId = _PlayerControllers.length;\r\n                _PlayerControllers.push(new PlayerController(playerElement));\r\n            }\r\n            var playerController = _PlayerControllers[playerElement.pId];\r\n            playerController.$InitPlayerController();\r\n        });\r\n    };\r\n}\r\n\r\n/// <reference path=\"Jssor.js\" />\r\n\r\n/*\r\n* Jssor.Slider 19.0\r\n* http://www.jssor.com/\r\n*\r\n* Licensed under the MIT license:\r\n* http://www.opensource.org/licenses/MIT\r\n* \r\n* TERMS OF USE - Jssor.Slider\r\n* \r\n* Copyright 2014 Jssor\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining\r\n* a copy of this software and associated documentation files (the\r\n* \"Software\"), to deal in the Software without restriction, including\r\n* without limitation the rights to use, copy, modify, merge, publish,\r\n* distribute, sublicense, and/or sell copies of the Software, and to\r\n* permit persons to whom the Software is furnished to do so, subject to\r\n* the following conditions:\r\n* \r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n* \r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n\r\nvar $JssorSlideshowFormations$ = window.$JssorSlideshowFormations$ = new function () {\r\n    var _This = this;\r\n\r\n    //Constants +++++++\r\n\r\n    var COLUMN_INCREASE = 0;\r\n    var COLUMN_DECREASE = 1;\r\n    var ROW_INCREASE = 2;\r\n    var ROW_DECREASE = 3;\r\n\r\n    var DIRECTION_HORIZONTAL = 0x0003;\r\n    var DIRECTION_VERTICAL = 0x000C;\r\n\r\n    var TO_LEFT = 0x0001;\r\n    var TO_RIGHT = 0x0002;\r\n    var TO_TOP = 0x0004;\r\n    var TO_BOTTOM = 0x0008;\r\n\r\n    var FROM_LEFT = 0x0100;\r\n    var FROM_TOP = 0x0200;\r\n    var FROM_RIGHT = 0x0400;\r\n    var FROM_BOTTOM = 0x0800;\r\n\r\n    var ASSEMBLY_BOTTOM_LEFT = FROM_BOTTOM + TO_LEFT;\r\n    var ASSEMBLY_BOTTOM_RIGHT = FROM_BOTTOM + TO_RIGHT;\r\n    var ASSEMBLY_TOP_LEFT = FROM_TOP + TO_LEFT;\r\n    var ASSEMBLY_TOP_RIGHT = FROM_TOP + TO_RIGHT;\r\n    var ASSEMBLY_LEFT_TOP = FROM_LEFT + TO_TOP;\r\n    var ASSEMBLY_LEFT_BOTTOM = FROM_LEFT + TO_BOTTOM;\r\n    var ASSEMBLY_RIGHT_TOP = FROM_RIGHT + TO_TOP;\r\n    var ASSEMBLY_RIGHT_BOTTOM = FROM_RIGHT + TO_BOTTOM;\r\n\r\n    //Constants -------\r\n\r\n    //Formation Definition +++++++\r\n    function isToLeft(roadValue) {\r\n        return (roadValue & TO_LEFT) == TO_LEFT;\r\n    }\r\n\r\n    function isToRight(roadValue) {\r\n        return (roadValue & TO_RIGHT) == TO_RIGHT;\r\n    }\r\n\r\n    function isToTop(roadValue) {\r\n        return (roadValue & TO_TOP) == TO_TOP;\r\n    }\r\n\r\n    function isToBottom(roadValue) {\r\n        return (roadValue & TO_BOTTOM) == TO_BOTTOM;\r\n    }\r\n\r\n    function PushFormationOrder(arr, order, formationItem) {\r\n        formationItem.push(order);\r\n        arr[order] = arr[order] || [];\r\n        arr[order].push(formationItem);\r\n    }\r\n\r\n    _This.$FormationStraight = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var order;\r\n        for (r = 0; r < rows; r++) {\r\n            for (col = 0; col < cols; col++) {\r\n                cr = r + ',' + col;\r\n                switch (formationDirection) {\r\n                    case ASSEMBLY_BOTTOM_LEFT:\r\n                        order = il - (col * rows + (rl - r));\r\n                        break;\r\n                    case ASSEMBLY_RIGHT_TOP:\r\n                        order = il - (r * cols + (cl - col));\r\n                        break;\r\n                    case ASSEMBLY_TOP_LEFT:\r\n                        order = il - (col * rows + r);\r\n                    case ASSEMBLY_LEFT_TOP:\r\n                        order = il - (r * cols + col);\r\n                        break;\r\n                    case ASSEMBLY_BOTTOM_RIGHT:\r\n                        order = col * rows + r;\r\n                        break;\r\n                    case ASSEMBLY_LEFT_BOTTOM:\r\n                        order = r * cols + (cl - col);\r\n                        break;\r\n                    case ASSEMBLY_TOP_RIGHT:\r\n                        order = col * rows + (rl - r);\r\n                        break;\r\n                    default:\r\n                        order = r * cols + col;\r\n                        break; //ASSEMBLY_RIGHT_BOTTOM\r\n                }\r\n                PushFormationOrder(a, order, [r, col]);\r\n            }\r\n        }\r\n\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationSwirl = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var hit = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var courses;\r\n        var course = 0;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_RIGHT_TOP:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_LEFT:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_TOP:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_RIGHT:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE];\r\n                break;\r\n            default:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE];\r\n                break; //ASSEMBLY_RIGHT_BOTTOM\r\n        }\r\n        i = 0;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (col >= 0 && col < cols && r >= 0 && r < rows && !hit[cr]) {\r\n                //a[cr] = i++;\r\n                hit[cr] = true;\r\n                PushFormationOrder(a, i++, [r, col]);\r\n            }\r\n            else {\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r--;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r++;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            switch (courses[course % courses.length]) {\r\n                case COLUMN_INCREASE:\r\n                    col++;\r\n                    break;\r\n                case ROW_INCREASE:\r\n                    r++;\r\n                    break;\r\n                case COLUMN_DECREASE:\r\n                    col--;\r\n                    break;\r\n                case ROW_DECREASE:\r\n                    r--;\r\n                    break;\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationZigZag = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        var courses;\r\n        var course = 0;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_DECREASE, ROW_DECREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_RIGHT_TOP:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [COLUMN_INCREASE, ROW_DECREASE, COLUMN_DECREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_LEFT:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_DECREASE, ROW_INCREASE, COLUMN_DECREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_TOP:\r\n                col = cl;\r\n                r = rl;\r\n                courses = [COLUMN_DECREASE, ROW_DECREASE, COLUMN_INCREASE, ROW_DECREASE];\r\n                break;\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [ROW_INCREASE, COLUMN_INCREASE, ROW_DECREASE, COLUMN_INCREASE];\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n                col = cl;\r\n                r = 0;\r\n                courses = [COLUMN_DECREASE, ROW_INCREASE, COLUMN_INCREASE, ROW_INCREASE];\r\n                break;\r\n            case ASSEMBLY_TOP_RIGHT:\r\n                col = 0;\r\n                r = rl;\r\n                courses = [ROW_DECREASE, COLUMN_INCREASE, ROW_INCREASE, COLUMN_INCREASE];\r\n                break;\r\n            default:\r\n                col = 0;\r\n                r = 0;\r\n                courses = [COLUMN_INCREASE, ROW_INCREASE, COLUMN_DECREASE, ROW_INCREASE];\r\n                break; //ASSEMBLY_RIGHT_BOTTOM\r\n        }\r\n        i = 0;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (col >= 0 && col < cols && r >= 0 && r < rows && typeof (a[cr]) == 'undefined') {\r\n                PushFormationOrder(a, i++, [r, col]);\r\n                //a[cr] = i++;\r\n                switch (courses[course % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r++;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r--;\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r--;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r++;\r\n                        break;\r\n                }\r\n                switch (courses[course++ % courses.length]) {\r\n                    case COLUMN_INCREASE:\r\n                        col++;\r\n                        break;\r\n                    case ROW_INCREASE:\r\n                        r++;\r\n                        break;\r\n                    case COLUMN_DECREASE:\r\n                        col--;\r\n                        break;\r\n                    case ROW_DECREASE:\r\n                        r--;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationStraightStairs = function (transition) {\r\n        var cols = transition.$Cols;\r\n        var rows = transition.$Rows;\r\n        var formationDirection = transition.$Assembly;\r\n        var count = transition.$Count;\r\n        var a = [];\r\n        var i = 0;\r\n        var col = 0;\r\n        var r = 0;\r\n        var cl = cols - 1;\r\n        var rl = rows - 1;\r\n        var il = count - 1;\r\n        var cr;\r\n        switch (formationDirection) {\r\n            case ASSEMBLY_BOTTOM_LEFT:\r\n            case ASSEMBLY_TOP_RIGHT:\r\n            case ASSEMBLY_TOP_LEFT:\r\n            case ASSEMBLY_BOTTOM_RIGHT:\r\n                var C = 0;\r\n                var R = 0;\r\n                break;\r\n            case ASSEMBLY_LEFT_BOTTOM:\r\n            case ASSEMBLY_RIGHT_TOP:\r\n            case ASSEMBLY_LEFT_TOP:\r\n            case ASSEMBLY_RIGHT_BOTTOM:\r\n                var C = cl;\r\n                var R = 0;\r\n                break;\r\n            default:\r\n                formationDirection = ASSEMBLY_RIGHT_BOTTOM;\r\n                var C = cl;\r\n                var R = 0;\r\n                break;\r\n        }\r\n        col = C;\r\n        r = R;\r\n        while (i < count) {\r\n            cr = r + ',' + col;\r\n            if (isToTop(formationDirection) || isToRight(formationDirection)) {\r\n                PushFormationOrder(a, il - i++, [r, col]);\r\n                //a[cr] = il - i++;\r\n            }\r\n            else {\r\n                PushFormationOrder(a, i++, [r, col]);\r\n                //a[cr] = i++;\r\n            }\r\n            switch (formationDirection) {\r\n                case ASSEMBLY_BOTTOM_LEFT:\r\n                case ASSEMBLY_TOP_RIGHT:\r\n                    col--;\r\n                    r++;\r\n                    break;\r\n                case ASSEMBLY_TOP_LEFT:\r\n                case ASSEMBLY_BOTTOM_RIGHT:\r\n                    col++;\r\n                    r--;\r\n                    break;\r\n                case ASSEMBLY_LEFT_BOTTOM:\r\n                case ASSEMBLY_RIGHT_TOP:\r\n                    col--;\r\n                    r--;\r\n                    break;\r\n                case ASSEMBLY_RIGHT_BOTTOM:\r\n                case ASSEMBLY_LEFT_TOP:\r\n                default:\r\n                    col++;\r\n                    r++;\r\n                    break;\r\n            }\r\n            if (col < 0 || r < 0 || col > cl || r > rl) {\r\n                switch (formationDirection) {\r\n                    case ASSEMBLY_BOTTOM_LEFT:\r\n                    case ASSEMBLY_TOP_RIGHT:\r\n                        C++;\r\n                        break;\r\n                    case ASSEMBLY_LEFT_BOTTOM:\r\n                    case ASSEMBLY_RIGHT_TOP:\r\n                    case ASSEMBLY_TOP_LEFT:\r\n                    case ASSEMBLY_BOTTOM_RIGHT:\r\n                        R++;\r\n                        break;\r\n                    case ASSEMBLY_RIGHT_BOTTOM:\r\n                    case ASSEMBLY_LEFT_TOP:\r\n                    default:\r\n                        C--;\r\n                        break;\r\n                }\r\n                if (C < 0 || R < 0 || C > cl || R > rl) {\r\n                    switch (formationDirection) {\r\n                        case ASSEMBLY_BOTTOM_LEFT:\r\n                        case ASSEMBLY_TOP_RIGHT:\r\n                            C = cl;\r\n                            R++;\r\n                            break;\r\n                        case ASSEMBLY_TOP_LEFT:\r\n                        case ASSEMBLY_BOTTOM_RIGHT:\r\n                            R = rl;\r\n                            C++;\r\n                            break;\r\n                        case ASSEMBLY_LEFT_BOTTOM:\r\n                        case ASSEMBLY_RIGHT_TOP: R = rl; C--;\r\n                            break;\r\n                        case ASSEMBLY_RIGHT_BOTTOM:\r\n                        case ASSEMBLY_LEFT_TOP:\r\n                        default:\r\n                            C = 0;\r\n                            R++;\r\n                            break;\r\n                    }\r\n                    if (R > rl)\r\n                        R = rl;\r\n                    else if (R < 0)\r\n                        R = 0;\r\n                    else if (C > cl)\r\n                        C = cl;\r\n                    else if (C < 0)\r\n                        C = 0;\r\n                }\r\n                r = R;\r\n                col = C;\r\n            }\r\n        }\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationSquare = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var dc;\r\n        var dr;\r\n        var cr;\r\n        dc = cols < rows ? (rows - cols) / 2 : 0;\r\n        dr = cols > rows ? (cols - rows) / 2 : 0;\r\n        cr = Math.round(Math.max(cols / 2, rows / 2)) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, cr - Math.min(col + 1 + dc, r + 1 + dr, cols - col + dc, rows - r + dr), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRectangle = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var cr;\r\n        cr = Math.round(Math.min(cols / 2, rows / 2)) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, cr - Math.min(col + 1, r + 1, cols - col, rows - r), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRandom = function (transition) {\r\n        var a = [];\r\n        var r, col, i;\r\n        for (r = 0; r < transition.$Rows; r++) {\r\n            for (col = 0; col < transition.$Cols; col++)\r\n                PushFormationOrder(a, Math.ceil(100000 * Math.random()) % 13, [r, col]);\r\n        }\r\n\r\n        return a;\r\n    };\r\n\r\n    _This.$FormationCircle = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(Math.sqrt(Math.pow(col - hc, 2) + Math.pow(r - hr, 2))), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationCross = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(Math.min(Math.abs(col - hc), Math.abs(r - hr))), [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    _This.$FormationRectangleCross = function (transition) {\r\n        var cols = transition.$Cols || 1;\r\n        var rows = transition.$Rows || 1;\r\n        var arr = [];\r\n        var i = 0;\r\n        var col;\r\n        var r;\r\n        var hc = cols / 2 - 0.5;\r\n        var hr = rows / 2 - 0.5;\r\n        var cr = Math.max(hc, hr) + 1;\r\n        for (col = 0; col < cols; col++) {\r\n            for (r = 0; r < rows; r++)\r\n                PushFormationOrder(arr, Math.round(cr - Math.max(hc - Math.abs(col - hc), hr - Math.abs(r - hr))) - 1, [r, col]);\r\n        }\r\n        return arr;\r\n    };\r\n};\r\n\r\nvar $JssorSlideshowRunner$ = window.$JssorSlideshowRunner$ = function (slideContainer, slideContainerWidth, slideContainerHeight, slideshowOptions, isTouchDevice) {\r\n\r\n    var _SelfSlideshowRunner = this;\r\n\r\n    //var _State = 0; //-1 fullfill, 0 clean, 1 initializing, 2 stay, 3 playing\r\n    var _EndTime;\r\n\r\n    var _SliderFrameCount;\r\n\r\n    var _SlideshowPlayerBelow;\r\n    var _SlideshowPlayerAbove;\r\n\r\n    var _PrevItem;\r\n    var _SlideItem;\r\n\r\n    var _TransitionIndex = 0;\r\n    var _TransitionsOrder = slideshowOptions.$TransitionsOrder;\r\n\r\n    var _SlideshowTransition;\r\n\r\n    var _SlideshowPerformance = 8;\r\n\r\n    //#region Private Methods\r\n    function EnsureTransitionInstance(options, slideshowInterval) {\r\n\r\n        var slideshowTransition = {\r\n            $Interval: slideshowInterval,  //Delay to play next frame\r\n            $Duration: 1, //Duration to finish the entire transition\r\n            $Delay: 0,  //Delay to assembly blocks\r\n            $Cols: 1,   //Number of columns\r\n            $Rows: 1,   //Number of rows\r\n            $Opacity: 0,   //Fade block or not\r\n            $Zoom: 0,   //Zoom block or not\r\n            $Clip: 0,   //Clip block or not\r\n            $Move: false,   //Move block or not\r\n            $SlideOut: false,   //Slide the previous slide out to display next slide instead\r\n            //$FlyDirection: 0,   //Specify fly transform with direction\r\n            $Reverse: false,    //Reverse the assembly or not\r\n            $Formation: $JssorSlideshowFormations$.$FormationRandom,    //Shape that assembly blocks as\r\n            $Assembly: 0x0408,   //The way to assembly blocks ASSEMBLY_RIGHT_BOTTOM\r\n            $ChessMode: { $Column: 0, $Row: 0 },    //Chess move or fly direction\r\n            $Easing: $JssorEasing$.$EaseSwing,  //Specify variation of speed during transition\r\n            $Round: {},\r\n            $Blocks: [],\r\n            $During: {}\r\n        };\r\n\r\n        $Jssor$.$Extend(slideshowTransition, options);\r\n\r\n        slideshowTransition.$Count = slideshowTransition.$Cols * slideshowTransition.$Rows;\r\n        if ($Jssor$.$IsFunction(slideshowTransition.$Easing))\r\n            slideshowTransition.$Easing = { $Default: slideshowTransition.$Easing };\r\n\r\n        slideshowTransition.$FramesCount = Math.ceil(slideshowTransition.$Duration / slideshowTransition.$Interval);\r\n\r\n        slideshowTransition.$GetBlocks = function (width, height) {\r\n            width /= slideshowTransition.$Cols;\r\n            height /= slideshowTransition.$Rows;\r\n            var wh = width + 'x' + height;\r\n            if (!slideshowTransition.$Blocks[wh]) {\r\n                slideshowTransition.$Blocks[wh] = { $Width: width, $Height: height };\r\n                for (var col = 0; col < slideshowTransition.$Cols; col++) {\r\n                    for (var r = 0; r < slideshowTransition.$Rows; r++)\r\n                        slideshowTransition.$Blocks[wh][r + ',' + col] = { $Top: r * height, $Right: col * width + width, $Bottom: r * height + height, $Left: col * width };\r\n                }\r\n            }\r\n\r\n            return slideshowTransition.$Blocks[wh];\r\n        };\r\n\r\n        if (slideshowTransition.$Brother) {\r\n            slideshowTransition.$Brother = EnsureTransitionInstance(slideshowTransition.$Brother, slideshowInterval);\r\n            slideshowTransition.$SlideOut = true;\r\n        }\r\n\r\n        return slideshowTransition;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Private Classes\r\n    function JssorSlideshowPlayer(slideContainer, slideElement, slideTransition, beginTime, slideContainerWidth, slideContainerHeight) {\r\n        var _Self = this;\r\n\r\n        var _Block;\r\n        var _StartStylesArr = {};\r\n        var _AnimationStylesArrs = {};\r\n        var _AnimationBlockItems = [];\r\n        var _StyleStart;\r\n        var _StyleEnd;\r\n        var _StyleDif;\r\n        var _ChessModeColumn = slideTransition.$ChessMode.$Column || 0;\r\n        var _ChessModeRow = slideTransition.$ChessMode.$Row || 0;\r\n\r\n        var _Blocks = slideTransition.$GetBlocks(slideContainerWidth, slideContainerHeight);\r\n        var _FormationInstance = GetFormation(slideTransition);\r\n        var _MaxOrder = _FormationInstance.length - 1;\r\n        var _Period = slideTransition.$Duration + slideTransition.$Delay * _MaxOrder;\r\n        var _EndTime = beginTime + _Period;\r\n\r\n        var _SlideOut = slideTransition.$SlideOut;\r\n        var _IsIn;\r\n\r\n        //_EndTime += $Jssor$.$IsBrowserChrome() ? 260 : 50;\r\n        _EndTime += 50;\r\n\r\n        //#region Private Methods\r\n\r\n        function GetFormation(transition) {\r\n\r\n            var formationInstance = transition.$Formation(transition);\r\n\r\n            return transition.$Reverse ? formationInstance.reverse() : formationInstance;\r\n\r\n        }\r\n        //#endregion\r\n\r\n        _Self.$EndTime = _EndTime;\r\n\r\n        _Self.$ShowFrame = function (time) {\r\n            time -= beginTime;\r\n\r\n            var isIn = time < _Period;\r\n\r\n            if (isIn || _IsIn) {\r\n                _IsIn = isIn;\r\n\r\n                if (!_SlideOut)\r\n                    time = _Period - time;\r\n\r\n                var frameIndex = Math.ceil(time / slideTransition.$Interval);\r\n\r\n                $Jssor$.$Each(_AnimationStylesArrs, function (value, index) {\r\n\r\n                    var itemFrameIndex = Math.max(frameIndex, value.$Min);\r\n                    itemFrameIndex = Math.min(itemFrameIndex, value.length - 1);\r\n\r\n                    if (value.$LastFrameIndex != itemFrameIndex) {\r\n                        if (!value.$LastFrameIndex && !_SlideOut) {\r\n                            $Jssor$.$ShowElement(_AnimationBlockItems[index]);\r\n                        }\r\n                        else if (itemFrameIndex == value.$Max && _SlideOut) {\r\n                            $Jssor$.$HideElement(_AnimationBlockItems[index]);\r\n                        }\r\n                        value.$LastFrameIndex = itemFrameIndex;\r\n                        $Jssor$.$SetStylesEx(_AnimationBlockItems[index], value[itemFrameIndex]);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        //constructor\r\n        {\r\n            slideElement = $Jssor$.$CloneNode(slideElement);\r\n            //$Jssor$.$RemoveAttribute(slideElement, \"id\");\r\n            if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                var hasImage = !slideElement[\"no-image\"];\r\n                var slideChildElements = $Jssor$.$FindChildrenByTag(slideElement);\r\n                $Jssor$.$Each(slideChildElements, function (slideChildElement) {\r\n                    if (hasImage || slideChildElement[\"jssor-slider\"])\r\n                        $Jssor$.$CssOpacity(slideChildElement, $Jssor$.$CssOpacity(slideChildElement), true);\r\n                });\r\n            }\r\n\r\n            $Jssor$.$Each(_FormationInstance, function (formationItems, order) {\r\n                $Jssor$.$Each(formationItems, function (formationItem) {\r\n                    var row = formationItem[0];\r\n                    var col = formationItem[1];\r\n                    {\r\n                        var columnRow = row + ',' + col;\r\n\r\n                        var chessHorizontal = false;\r\n                        var chessVertical = false;\r\n                        var chessRotate = false;\r\n\r\n                        if (_ChessModeColumn && col % 2) {\r\n                            if (_ChessModeColumn & 3/*$JssorDirection$.$IsHorizontal(_ChessModeColumn)*/) {\r\n                                chessHorizontal = !chessHorizontal;\r\n                            }\r\n                            if (_ChessModeColumn & 12/*$JssorDirection$.$IsVertical(_ChessModeColumn)*/) {\r\n                                chessVertical = !chessVertical;\r\n                            }\r\n\r\n                            if (_ChessModeColumn & 16)\r\n                                chessRotate = !chessRotate;\r\n                        }\r\n\r\n                        if (_ChessModeRow && row % 2) {\r\n                            if (_ChessModeRow & 3/*$JssorDirection$.$IsHorizontal(_ChessModeRow)*/) {\r\n                                chessHorizontal = !chessHorizontal;\r\n                            }\r\n                            if (_ChessModeRow & 12/*$JssorDirection$.$IsVertical(_ChessModeRow)*/) {\r\n                                chessVertical = !chessVertical;\r\n                            }\r\n                            if (_ChessModeRow & 16)\r\n                                chessRotate = !chessRotate;\r\n                        }\r\n\r\n                        slideTransition.$Top = slideTransition.$Top || (slideTransition.$Clip & 4);\r\n                        slideTransition.$Bottom = slideTransition.$Bottom || (slideTransition.$Clip & 8);\r\n                        slideTransition.$Left = slideTransition.$Left || (slideTransition.$Clip & 1);\r\n                        slideTransition.$Right = slideTransition.$Right || (slideTransition.$Clip & 2);\r\n\r\n                        var topBenchmark = chessVertical ? slideTransition.$Bottom : slideTransition.$Top;\r\n                        var bottomBenchmark = chessVertical ? slideTransition.$Top : slideTransition.$Bottom;\r\n                        var leftBenchmark = chessHorizontal ? slideTransition.$Right : slideTransition.$Left;\r\n                        var rightBenchmark = chessHorizontal ? slideTransition.$Left : slideTransition.$Right;\r\n\r\n                        slideTransition.$Clip = topBenchmark || bottomBenchmark || leftBenchmark || rightBenchmark;\r\n\r\n                        _StyleDif = {};\r\n                        _StyleEnd = { $Top: 0, $Left: 0, $Opacity: 1, $Width: slideContainerWidth, $Height: slideContainerHeight };\r\n                        _StyleStart = $Jssor$.$Extend({}, _StyleEnd);\r\n                        _Block = $Jssor$.$Extend({}, _Blocks[columnRow]);\r\n\r\n                        if (slideTransition.$Opacity) {\r\n                            _StyleEnd.$Opacity = 2 - slideTransition.$Opacity;\r\n                        }\r\n\r\n                        if (slideTransition.$ZIndex) {\r\n                            _StyleEnd.$ZIndex = slideTransition.$ZIndex;\r\n                            _StyleStart.$ZIndex = 0;\r\n                        }\r\n\r\n                        var allowClip = slideTransition.$Cols * slideTransition.$Rows > 1 || slideTransition.$Clip;\r\n\r\n                        if (slideTransition.$Zoom || slideTransition.$Rotate) {\r\n                            var allowRotate = true;\r\n                            if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                                if (slideTransition.$Cols * slideTransition.$Rows > 1)\r\n                                    allowRotate = false;\r\n                                else\r\n                                    allowClip = false;\r\n                            }\r\n\r\n                            if (allowRotate) {\r\n                                _StyleEnd.$Zoom = slideTransition.$Zoom ? slideTransition.$Zoom - 1 : 1;\r\n                                _StyleStart.$Zoom = 1;\r\n\r\n                                if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera())\r\n                                    _StyleEnd.$Zoom = Math.min(_StyleEnd.$Zoom, 2);\r\n\r\n                                var rotate = slideTransition.$Rotate;\r\n\r\n                                _StyleEnd.$Rotate = rotate * 360 * ((chessRotate) ? -1 : 1);\r\n                                _StyleStart.$Rotate = 0;\r\n                            }\r\n                        }\r\n\r\n                        if (allowClip) {\r\n                            if (slideTransition.$Clip) {\r\n                                var clipScale = slideTransition.$ScaleClip || 1;\r\n                                var blockOffset = _Block.$Offset = {};\r\n                                if (topBenchmark && bottomBenchmark) {\r\n                                    blockOffset.$Top = _Blocks.$Height / 2 * clipScale;\r\n                                    blockOffset.$Bottom = -blockOffset.$Top;\r\n                                }\r\n                                else if (topBenchmark) {\r\n                                    blockOffset.$Bottom = -_Blocks.$Height * clipScale;\r\n                                }\r\n                                else if (bottomBenchmark) {\r\n                                    blockOffset.$Top = _Blocks.$Height * clipScale;\r\n                                }\r\n\r\n                                if (leftBenchmark && rightBenchmark) {\r\n                                    blockOffset.$Left = _Blocks.$Width / 2 * clipScale;\r\n                                    blockOffset.$Right = -blockOffset.$Left;\r\n                                }\r\n                                else if (leftBenchmark) {\r\n                                    blockOffset.$Right = -_Blocks.$Width * clipScale;\r\n                                }\r\n                                else if (rightBenchmark) {\r\n                                    blockOffset.$Left = _Blocks.$Width * clipScale;\r\n                                }\r\n                            }\r\n\r\n                            _StyleDif.$Clip = _Block;\r\n                            _StyleStart.$Clip = _Blocks[columnRow];\r\n                        }\r\n\r\n                        //fly\r\n                        {\r\n                            var chessHor = chessHorizontal ? 1 : -1;\r\n                            var chessVer = chessVertical ? 1 : -1;\r\n\r\n                            if (slideTransition.x)\r\n                                _StyleEnd.$Left += slideContainerWidth * slideTransition.x * chessHor;\r\n\r\n                            if (slideTransition.y)\r\n                                _StyleEnd.$Top += slideContainerHeight * slideTransition.y * chessVer;\r\n                        }\r\n\r\n                        $Jssor$.$Each(_StyleEnd, function (propertyEnd, property) {\r\n                            if ($Jssor$.$IsNumeric(propertyEnd)) {\r\n                                if (propertyEnd != _StyleStart[property]) {\r\n                                    _StyleDif[property] = propertyEnd - _StyleStart[property];\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        _StartStylesArr[columnRow] = _SlideOut ? _StyleStart : _StyleEnd;\r\n\r\n                        var animationStylesArr = [];\r\n                        var framesCount = slideTransition.$FramesCount;\r\n                        var virtualFrameCount = Math.round(order * slideTransition.$Delay / slideTransition.$Interval);\r\n                        _AnimationStylesArrs[columnRow] = new Array(virtualFrameCount);\r\n                        _AnimationStylesArrs[columnRow].$Min = virtualFrameCount;\r\n                        _AnimationStylesArrs[columnRow].$Max = virtualFrameCount + framesCount - 1;\r\n\r\n                        for (var frameN = 0; frameN <= framesCount; frameN++) {\r\n                            var styleFrameN = $Jssor$.$Cast(_StyleStart, _StyleDif, frameN / framesCount, slideTransition.$Easing, slideTransition.$During, slideTransition.$Round, { $Move: slideTransition.$Move, $OriginalWidth: slideContainerWidth, $OriginalHeight: slideContainerHeight })\r\n\r\n                            styleFrameN.$ZIndex = styleFrameN.$ZIndex || 1;\r\n\r\n                            _AnimationStylesArrs[columnRow].push(styleFrameN);\r\n                        }\r\n\r\n                    } //for\r\n                });\r\n            });\r\n\r\n            _FormationInstance.reverse();\r\n            $Jssor$.$Each(_FormationInstance, function (formationItems) {\r\n                $Jssor$.$Each(formationItems, function (formationItem) {\r\n                    var row = formationItem[0];\r\n                    var col = formationItem[1];\r\n\r\n                    var columnRow = row + ',' + col;\r\n\r\n                    var image = slideElement;\r\n                    if (col || row)\r\n                        image = $Jssor$.$CloneNode(slideElement);\r\n\r\n                    $Jssor$.$SetStyles(image, _StartStylesArr[columnRow]);\r\n                    $Jssor$.$CssOverflow(image, \"hidden\");\r\n\r\n                    $Jssor$.$CssPosition(image, \"absolute\");\r\n                    slideContainer.$AddClipElement(image);\r\n                    _AnimationBlockItems[columnRow] = image;\r\n                    $Jssor$.$ShowElement(image, !_SlideOut);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function SlideshowProcessor() {\r\n        var _SelfSlideshowProcessor = this;\r\n        var _CurrentTime = 0;\r\n\r\n        $JssorAnimator$.call(_SelfSlideshowProcessor, 0, _EndTime);\r\n\r\n        _SelfSlideshowProcessor.$OnPositionChange = function (oldPosition, newPosition) {\r\n            if ((newPosition - _CurrentTime) > _SlideshowPerformance) {\r\n                _CurrentTime = newPosition;\r\n\r\n                _SlideshowPlayerAbove && _SlideshowPlayerAbove.$ShowFrame(newPosition);\r\n                _SlideshowPlayerBelow && _SlideshowPlayerBelow.$ShowFrame(newPosition);\r\n            }\r\n        };\r\n\r\n        _SelfSlideshowProcessor.$Transition = _SlideshowTransition;\r\n    }\r\n    //#endregion\r\n\r\n    //member functions\r\n    _SelfSlideshowRunner.$GetTransition = function (slideCount) {\r\n        var n = 0;\r\n\r\n        var transitions = slideshowOptions.$Transitions;\r\n\r\n        var transitionCount = transitions.length;\r\n\r\n        if (_TransitionsOrder) { /*Sequence*/\r\n            //if (transitionCount > slideCount && ($Jssor$.$IsBrowserChrome() || $Jssor$.$IsBrowserSafari() || $Jssor$.$IsBrowserFireFox())) {\r\n            //    transitionCount -= transitionCount % slideCount;\r\n            //}\r\n            n = _TransitionIndex++ % transitionCount;\r\n        }\r\n        else { /*Random*/\r\n            n = Math.floor(Math.random() * transitionCount);\r\n        }\r\n\r\n        transitions[n] && (transitions[n].$Index = n);\r\n\r\n        return transitions[n];\r\n    };\r\n\r\n    _SelfSlideshowRunner.$Initialize = function (slideIndex, prevIndex, slideItem, prevItem, slideshowTransition) {\r\n        $JssorDebug$.$Execute(function () {\r\n            if (_SlideshowPlayerBelow) {\r\n                $JssorDebug$.$Fail(\"slideshow runner has not been cleared.\");\r\n            }\r\n        });\r\n\r\n        _SlideshowTransition = slideshowTransition;\r\n\r\n        slideshowTransition = EnsureTransitionInstance(slideshowTransition, _SlideshowPerformance);\r\n\r\n        _SlideItem = slideItem;\r\n        _PrevItem = prevItem;\r\n\r\n        var prevSlideElement = prevItem.$Item;\r\n        var currentSlideElement = slideItem.$Item;\r\n        prevSlideElement[\"no-image\"] = !prevItem.$Image;\r\n        currentSlideElement[\"no-image\"] = !slideItem.$Image;\r\n\r\n        var slideElementAbove = prevSlideElement;\r\n        var slideElementBelow = currentSlideElement;\r\n\r\n        var slideTransitionAbove = slideshowTransition;\r\n        var slideTransitionBelow = slideshowTransition.$Brother || EnsureTransitionInstance({}, _SlideshowPerformance);\r\n\r\n        if (!slideshowTransition.$SlideOut) {\r\n            slideElementAbove = currentSlideElement;\r\n            slideElementBelow = prevSlideElement;\r\n        }\r\n\r\n        var shift = slideTransitionBelow.$Shift || 0;\r\n\r\n        _SlideshowPlayerBelow = new JssorSlideshowPlayer(slideContainer, slideElementBelow, slideTransitionBelow, Math.max(shift - slideTransitionBelow.$Interval, 0), slideContainerWidth, slideContainerHeight);\r\n        _SlideshowPlayerAbove = new JssorSlideshowPlayer(slideContainer, slideElementAbove, slideTransitionAbove, Math.max(slideTransitionBelow.$Interval - shift, 0), slideContainerWidth, slideContainerHeight);\r\n\r\n        _SlideshowPlayerBelow.$ShowFrame(0);\r\n        _SlideshowPlayerAbove.$ShowFrame(0);\r\n\r\n        _EndTime = Math.max(_SlideshowPlayerBelow.$EndTime, _SlideshowPlayerAbove.$EndTime);\r\n\r\n        _SelfSlideshowRunner.$Index = slideIndex;\r\n    };\r\n\r\n    _SelfSlideshowRunner.$Clear = function () {\r\n        slideContainer.$Clear();\r\n        _SlideshowPlayerBelow = null;\r\n        _SlideshowPlayerAbove = null;\r\n    };\r\n\r\n    _SelfSlideshowRunner.$GetProcessor = function () {\r\n        var slideshowProcessor = null;\r\n\r\n        if (_SlideshowPlayerAbove)\r\n            slideshowProcessor = new SlideshowProcessor();\r\n\r\n        return slideshowProcessor;\r\n    };\r\n\r\n    //Constructor\r\n    {\r\n        if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera() || (isTouchDevice && $Jssor$.$WebKitVersion() < 537)) {\r\n            _SlideshowPerformance = 16;\r\n        }\r\n\r\n        $JssorObject$.call(_SelfSlideshowRunner);\r\n        $JssorAnimator$.call(_SelfSlideshowRunner, -10000000, 10000000);\r\n    }\r\n};\r\n\r\nvar $JssorSlider$ = window.$JssorSlider$ = function (elmt, options) {\r\n    var _SelfSlider = this;\r\n\r\n    //#region Private Classes\r\n    //Conveyor\r\n    function Conveyor() {\r\n        var _SelfConveyor = this;\r\n        $JssorAnimator$.call(_SelfConveyor, -100000000, 200000000);\r\n\r\n        _SelfConveyor.$GetCurrentSlideInfo = function () {\r\n            var positionDisplay = _SelfConveyor.$GetPosition_Display();\r\n            var virtualIndex = Math.floor(positionDisplay);\r\n            var slideIndex = GetRealIndex(virtualIndex);\r\n            var slidePosition = positionDisplay - Math.floor(positionDisplay);\r\n\r\n            return { $Index: slideIndex, $VirtualIndex: virtualIndex, $Position: slidePosition };\r\n        };\r\n\r\n        _SelfConveyor.$OnPositionChange = function (oldPosition, newPosition) {\r\n\r\n            var index = Math.floor(newPosition);\r\n            if (index != newPosition && newPosition > oldPosition)\r\n                index++;\r\n\r\n            ResetNavigator(index, true);\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_POSITION_CHANGE, GetRealIndex(newPosition), GetRealIndex(oldPosition), newPosition, oldPosition);\r\n        };\r\n    }\r\n    //Conveyor\r\n\r\n    //Carousel\r\n    function Carousel() {\r\n        var _SelfCarousel = this;\r\n\r\n        $JssorAnimator$.call(_SelfCarousel, 0, 0, { $LoopLength: _SlideCount });\r\n\r\n        //Carousel Constructor\r\n        {\r\n            $Jssor$.$Each(_SlideItems, function (slideItem) {\r\n                (_Loop & 1) && slideItem.$SetLoopLength(_SlideCount);\r\n                _SelfCarousel.$Chain(slideItem);\r\n                slideItem.$Shift(_ParkingPosition / _StepLength);\r\n            });\r\n        }\r\n    }\r\n    //Carousel\r\n\r\n    //Slideshow\r\n    function Slideshow() {\r\n        var _SelfSlideshow = this;\r\n        var _Wrapper = _SlideContainer.$Elmt;\r\n\r\n        $JssorAnimator$.call(_SelfSlideshow, -1, 2, { $Easing: $JssorEasing$.$EaseLinear, $Setter: { $Position: SetPosition }, $LoopLength: _SlideCount }, _Wrapper, { $Position: 1 }, { $Position: -2 });\r\n\r\n        _SelfSlideshow.$Wrapper = _Wrapper;\r\n\r\n        //Slideshow Constructor\r\n        {\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_SlideContainer.$Elmt, \"debug-id\", \"slide_container\");\r\n            });\r\n        }\r\n    }\r\n    //Slideshow\r\n\r\n    //CarouselPlayer\r\n    function CarouselPlayer(carousel, slideshow) {\r\n        var _SelfCarouselPlayer = this;\r\n        var _FromPosition;\r\n        var _ToPosition;\r\n        var _Duration;\r\n        var _StandBy;\r\n        var _StandByPosition;\r\n\r\n        $JssorAnimator$.call(_SelfCarouselPlayer, -100000000, 200000000, { $IntervalMax: 100 });\r\n\r\n        _SelfCarouselPlayer.$OnStart = function () {\r\n            _IsSliding = true;\r\n            _LoadingTicket = null;\r\n\r\n            //EVT_SWIPE_START\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SWIPE_START, GetRealIndex(_Conveyor.$GetPosition()), _Conveyor.$GetPosition());\r\n        };\r\n\r\n        _SelfCarouselPlayer.$OnStop = function () {\r\n\r\n            _IsSliding = false;\r\n            _StandBy = false;\r\n\r\n            var currentSlideInfo = _Conveyor.$GetCurrentSlideInfo();\r\n\r\n            //EVT_SWIPE_END\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SWIPE_END, GetRealIndex(_Conveyor.$GetPosition()), _Conveyor.$GetPosition());\r\n\r\n            if (!currentSlideInfo.$Position) {\r\n                OnPark(currentSlideInfo.$VirtualIndex, _CurrentSlideIndex);\r\n            }\r\n        };\r\n\r\n        _SelfCarouselPlayer.$OnPositionChange = function (oldPosition, newPosition) {\r\n\r\n            var toPosition;\r\n\r\n            if (_StandBy)\r\n                toPosition = _StandByPosition;\r\n            else {\r\n                toPosition = _ToPosition;\r\n\r\n                if (_Duration) {\r\n                    var interPosition = newPosition / _Duration;\r\n                    toPosition = _Options.$SlideEasing(interPosition) * (_ToPosition - _FromPosition) + _FromPosition;\r\n                }\r\n            }\r\n\r\n            _Conveyor.$GoToPosition(toPosition);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$PlayCarousel = function (fromPosition, toPosition, duration, callback) {\r\n            $JssorDebug$.$Execute(function () {\r\n                if (_SelfCarouselPlayer.$IsPlaying())\r\n                    $JssorDebug$.$Fail(\"The carousel is already playing.\");\r\n            });\r\n\r\n            _FromPosition = fromPosition;\r\n            _ToPosition = toPosition;\r\n            _Duration = duration;\r\n\r\n            _Conveyor.$GoToPosition(fromPosition);\r\n            _SelfCarouselPlayer.$GoToPosition(0);\r\n\r\n            _SelfCarouselPlayer.$PlayToPosition(duration, callback);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$StandBy = function (standByPosition) {\r\n            _StandBy = true;\r\n            _StandByPosition = standByPosition;\r\n            _SelfCarouselPlayer.$Play(standByPosition, null, true);\r\n        };\r\n\r\n        _SelfCarouselPlayer.$SetStandByPosition = function (standByPosition) {\r\n            _StandByPosition = standByPosition;\r\n        };\r\n\r\n        _SelfCarouselPlayer.$MoveCarouselTo = function (position) {\r\n            _Conveyor.$GoToPosition(position);\r\n        };\r\n\r\n        //CarouselPlayer Constructor\r\n        {\r\n            _Conveyor = new Conveyor();\r\n\r\n            _Conveyor.$Combine(carousel);\r\n            _Conveyor.$Combine(slideshow);\r\n        }\r\n    }\r\n    //CarouselPlayer\r\n\r\n    //SlideContainer\r\n    function SlideContainer() {\r\n        var _Self = this;\r\n        var elmt = CreatePanel();\r\n\r\n        $Jssor$.$CssZIndex(elmt, 0);\r\n        $Jssor$.$Css(elmt, \"pointerEvents\", \"none\");\r\n\r\n        _Self.$Elmt = elmt;\r\n\r\n        _Self.$AddClipElement = function (clipElement) {\r\n            $Jssor$.$AppendChild(elmt, clipElement);\r\n            $Jssor$.$ShowElement(elmt);\r\n        };\r\n\r\n        _Self.$Clear = function () {\r\n            $Jssor$.$HideElement(elmt);\r\n            $Jssor$.$Empty(elmt);\r\n        };\r\n    }\r\n    //SlideContainer\r\n\r\n    //SlideItem\r\n    function SlideItem(slideElmt, slideIndex) {\r\n\r\n        var _SelfSlideItem = this;\r\n\r\n        var _CaptionSliderIn;\r\n        var _CaptionSliderOut;\r\n        var _CaptionSliderCurrent;\r\n        var _IsCaptionSliderPlayingWhenDragStart;\r\n\r\n        var _Wrapper;\r\n        var _BaseElement = slideElmt;\r\n\r\n        var _LoadingScreen;\r\n\r\n        var _ImageItem;\r\n        var _ImageElmts = [];\r\n        var _LinkItemOrigin;\r\n        var _LinkItem;\r\n        var _ImageLoading;\r\n        var _ImageLoaded;\r\n        var _ImageLazyLoading;\r\n        var _ContentRefreshed;\r\n\r\n        var _Processor;\r\n\r\n        var _PlayerInstanceElement;\r\n        var _PlayerInstance;\r\n\r\n        var _SequenceNumber;    //for debug only\r\n\r\n        $JssorAnimator$.call(_SelfSlideItem, -_DisplayPieces, _DisplayPieces + 1, { $SlideItemAnimator: true });\r\n\r\n        function ResetCaptionSlider(fresh) {\r\n            _CaptionSliderOut && _CaptionSliderOut.$Revert();\r\n            _CaptionSliderIn && _CaptionSliderIn.$Revert();\r\n\r\n            RefreshContent(slideElmt, fresh);\r\n            _ContentRefreshed = true;\r\n\r\n            _CaptionSliderIn = new _CaptionSliderOptions.$Class(slideElmt, _CaptionSliderOptions, 1);\r\n            $JssorDebug$.$LiveStamp(_CaptionSliderIn, \"caption_slider_\" + _CaptionSliderCount + \"_in\");\r\n            _CaptionSliderOut = new _CaptionSliderOptions.$Class(slideElmt, _CaptionSliderOptions);\r\n            $JssorDebug$.$LiveStamp(_CaptionSliderOut, \"caption_slider_\" + _CaptionSliderCount + \"_out\");\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                _CaptionSliderCount++;\r\n            });\r\n\r\n            _CaptionSliderOut.$GoToPosition(0);\r\n            _CaptionSliderIn.$GoToPosition(0);\r\n        }\r\n\r\n        function EnsureCaptionSliderVersion() {\r\n            if (_CaptionSliderIn.$Version < _CaptionSliderOptions.$Version) {\r\n                ResetCaptionSlider();\r\n            }\r\n        }\r\n\r\n        //event handling begin\r\n        function LoadImageCompleteEventHandler(completeCallback, loadingScreen, image) {\r\n            if (!_ImageLoaded) {\r\n                _ImageLoaded = true;\r\n\r\n                if (_ImageItem && image) {\r\n                    var imageWidth = image.width;\r\n                    var imageHeight = image.height;\r\n                    var fillWidth = imageWidth;\r\n                    var fillHeight = imageHeight;\r\n\r\n                    if (imageWidth && imageHeight && _Options.$FillMode) {\r\n\r\n                        //0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0\r\n                        if (_Options.$FillMode & 3 && (!(_Options.$FillMode & 4) || imageWidth > _SlideWidth || imageHeight > _SlideHeight)) {\r\n                            var fitHeight = false;\r\n                            var ratio = _SlideWidth / _SlideHeight * imageHeight / imageWidth;\r\n\r\n                            if (_Options.$FillMode & 1) {\r\n                                fitHeight = (ratio > 1);\r\n                            }\r\n                            else if (_Options.$FillMode & 2) {\r\n                                fitHeight = (ratio < 1);\r\n                            }\r\n                            fillWidth = fitHeight ? imageWidth * _SlideHeight / imageHeight : _SlideWidth;\r\n                            fillHeight = fitHeight ? _SlideHeight : imageHeight * _SlideWidth / imageWidth;\r\n                        }\r\n\r\n                        $Jssor$.$CssWidth(_ImageItem, fillWidth);\r\n                        $Jssor$.$CssHeight(_ImageItem, fillHeight);\r\n                        $Jssor$.$CssTop(_ImageItem, (_SlideHeight - fillHeight) / 2);\r\n                        $Jssor$.$CssLeft(_ImageItem, (_SlideWidth - fillWidth) / 2);\r\n                    }\r\n\r\n                    $Jssor$.$CssPosition(_ImageItem, \"absolute\");\r\n\r\n                    _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_LOAD_END, slideIndex);\r\n                }\r\n            }\r\n\r\n            $Jssor$.$HideElement(loadingScreen);\r\n            completeCallback && completeCallback(_SelfSlideItem);\r\n        }\r\n\r\n        function LoadSlideshowImageCompleteEventHandler(nextIndex, nextItem, slideshowTransition, loadingTicket) {\r\n            if (loadingTicket == _LoadingTicket && _CurrentSlideIndex == slideIndex && _AutoPlay) {\r\n                if (!_Frozen) {\r\n                    var nextRealIndex = GetRealIndex(nextIndex);\r\n                    _SlideshowRunner.$Initialize(nextRealIndex, slideIndex, nextItem, _SelfSlideItem, slideshowTransition);\r\n                    nextItem.$HideContentForSlideshow();\r\n                    _Slideshow.$Locate(nextRealIndex, 1);\r\n                    _Slideshow.$GoToPosition(nextRealIndex);\r\n                    _CarouselPlayer.$PlayCarousel(nextIndex, nextIndex, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        function SlideReadyEventHandler(loadingTicket) {\r\n            if (loadingTicket == _LoadingTicket && _CurrentSlideIndex == slideIndex) {\r\n\r\n                if (!_Processor) {\r\n                    var slideshowProcessor = null;\r\n                    if (_SlideshowRunner) {\r\n                        if (_SlideshowRunner.$Index == slideIndex)\r\n                            slideshowProcessor = _SlideshowRunner.$GetProcessor();\r\n                        else\r\n                            _SlideshowRunner.$Clear();\r\n                    }\r\n\r\n                    EnsureCaptionSliderVersion();\r\n\r\n                    _Processor = new Processor(slideElmt, slideIndex, slideshowProcessor, _SelfSlideItem.$GetCaptionSliderIn(), _SelfSlideItem.$GetCaptionSliderOut());\r\n                    _Processor.$SetPlayer(_PlayerInstance);\r\n                }\r\n\r\n                !_Processor.$IsPlaying() && _Processor.$Replay();\r\n            }\r\n        }\r\n\r\n        function ParkEventHandler(currentIndex, previousIndex, manualActivate) {\r\n            if (currentIndex == slideIndex) {\r\n\r\n                if (currentIndex != previousIndex)\r\n                    _SlideItems[previousIndex] && _SlideItems[previousIndex].$ParkOut();\r\n                else\r\n                    !manualActivate && _Processor && _Processor.$AdjustIdleOnPark();\r\n\r\n                _PlayerInstance && _PlayerInstance.$Enable();\r\n\r\n                //park in\r\n                var loadingTicket = _LoadingTicket = $Jssor$.$GetNow();\r\n                _SelfSlideItem.$LoadImage($Jssor$.$CreateCallback(null, SlideReadyEventHandler, loadingTicket));\r\n            }\r\n            else {\r\n                var distance = Math.abs(slideIndex - currentIndex);\r\n                var loadRange = _DisplayPieces + _Options.$LazyLoading - 1;\r\n                if (!_ImageLazyLoading || distance <= loadRange) {\r\n                    _SelfSlideItem.$LoadImage();\r\n                }\r\n            }\r\n        }\r\n\r\n        function SwipeStartEventHandler() {\r\n            if (_CurrentSlideIndex == slideIndex && _Processor) {\r\n                _Processor.$Stop();\r\n                _PlayerInstance && _PlayerInstance.$Quit();\r\n                _PlayerInstance && _PlayerInstance.$Disable();\r\n                _Processor.$OpenSlideshowPanel();\r\n            }\r\n        }\r\n\r\n        function FreezeEventHandler() {\r\n            if (_CurrentSlideIndex == slideIndex && _Processor) {\r\n                _Processor.$Stop();\r\n            }\r\n        }\r\n\r\n        function ContentClickEventHandler(event) {\r\n            if (_LastDragSucceded) {\r\n                $Jssor$.$StopEvent(event);\r\n\r\n                var checkElement = $Jssor$.$EvtSrc(event);\r\n                while (checkElement && slideElmt !== checkElement) {\r\n                    if (checkElement.tagName == \"A\") {\r\n                        $Jssor$.$CancelEvent(event);\r\n                    }\r\n                    try {\r\n                        checkElement = checkElement.parentNode;\r\n                    } catch (e) {\r\n                        // Firefox sometimes fires events for XUL elements, which throws\r\n                        // a \"permission denied\" error. so this is not a child.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function SlideClickEventHandler(event) {\r\n            if (!_LastDragSucceded) {\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_CLICK, slideIndex, event);\r\n            }\r\n        }\r\n\r\n        function PlayerAvailableEventHandler() {\r\n            _PlayerInstance = _PlayerInstanceElement.pInstance;\r\n            _Processor && _Processor.$SetPlayer(_PlayerInstance);\r\n        }\r\n\r\n        _SelfSlideItem.$LoadImage = function (completeCallback, loadingScreen) {\r\n            loadingScreen = loadingScreen || _LoadingScreen;\r\n\r\n            if (_ImageElmts.length && !_ImageLoaded) {\r\n\r\n                $Jssor$.$ShowElement(loadingScreen);\r\n\r\n                if (!_ImageLoading) {\r\n                    _ImageLoading = true;\r\n                    _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_LOAD_START, slideIndex);\r\n\r\n                    $Jssor$.$Each(_ImageElmts, function (imageElmt) {\r\n\r\n                        if (!$Jssor$.$Attribute(imageElmt, \"src\")) {\r\n                            imageElmt.src = $Jssor$.$AttributeEx(imageElmt, \"src2\");\r\n                            $Jssor$.$CssDisplay(imageElmt, imageElmt[\"display-origin\"]);\r\n                        }\r\n                    });\r\n                }\r\n                $Jssor$.$LoadImages(_ImageElmts, _ImageItem, $Jssor$.$CreateCallback(null, LoadImageCompleteEventHandler, completeCallback, loadingScreen));\r\n            }\r\n            else {\r\n                LoadImageCompleteEventHandler(completeCallback, loadingScreen);\r\n            }\r\n        };\r\n\r\n        _SelfSlideItem.$GoForNextSlide = function () {\r\n\r\n            var index = slideIndex;\r\n            if (_Options.$AutoPlaySteps < 0)\r\n                index -= _SlideCount;\r\n\r\n            var nextIndex = index + _Options.$AutoPlaySteps * _PlayReverse;\r\n\r\n            if (_Loop & 2) {\r\n                //Rewind\r\n                nextIndex = GetRealIndex(nextIndex);\r\n            }\r\n            if (!(_Loop & 1)) {\r\n                //Stop at threshold\r\n                nextIndex = Math.max(0, Math.min(nextIndex, _SlideCount - _DisplayPieces));\r\n            }\r\n\r\n            if (nextIndex != slideIndex) {\r\n                if (_SlideshowRunner) {\r\n                    var slideshowTransition = _SlideshowRunner.$GetTransition(_SlideCount);\r\n\r\n                    if (slideshowTransition) {\r\n                        var loadingTicket = _LoadingTicket = $Jssor$.$GetNow();\r\n\r\n                        var nextItem = _SlideItems[GetRealIndex(nextIndex)];\r\n                        return nextItem.$LoadImage($Jssor$.$CreateCallback(null, LoadSlideshowImageCompleteEventHandler, nextIndex, nextItem, slideshowTransition, loadingTicket), _LoadingScreen);\r\n                    }\r\n                }\r\n\r\n                PlayTo(nextIndex);\r\n            }\r\n        };\r\n\r\n        _SelfSlideItem.$TryActivate = function () {\r\n            ParkEventHandler(slideIndex, slideIndex, true);\r\n        };\r\n\r\n        _SelfSlideItem.$ParkOut = function () {\r\n            //park out\r\n            _PlayerInstance && _PlayerInstance.$Quit();\r\n            _PlayerInstance && _PlayerInstance.$Disable();\r\n            _SelfSlideItem.$UnhideContentForSlideshow();\r\n            _Processor && _Processor.$Abort();\r\n            _Processor = null;\r\n            ResetCaptionSlider();\r\n        };\r\n\r\n        //for debug only\r\n        _SelfSlideItem.$StampSlideItemElements = function (stamp) {\r\n            stamp = _SequenceNumber + \"_\" + stamp;\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (_ImageItem)\r\n                    $Jssor$.$Attribute(_ImageItem, \"debug-id\", stamp + \"_slide_item_image_id\");\r\n\r\n                $Jssor$.$Attribute(slideElmt, \"debug-id\", stamp + \"_slide_item_item_id\");\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_Wrapper, \"debug-id\", stamp + \"_slide_item_wrapper_id\");\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_LoadingScreen, \"debug-id\", stamp + \"_loading_container_id\");\r\n            });\r\n        };\r\n\r\n        _SelfSlideItem.$HideContentForSlideshow = function () {\r\n            $Jssor$.$HideElement(slideElmt);\r\n        };\r\n\r\n        _SelfSlideItem.$UnhideContentForSlideshow = function () {\r\n            $Jssor$.$ShowElement(slideElmt);\r\n        };\r\n\r\n        _SelfSlideItem.$EnablePlayer = function () {\r\n            _PlayerInstance && _PlayerInstance.$Enable();\r\n        };\r\n\r\n        function RefreshContent(elmt, fresh, level) {\r\n            $JssorDebug$.$Execute(function () {\r\n                if ($Jssor$.$Attribute(elmt, \"jssor-slider\"))\r\n                    $JssorDebug$.$Log(\"Child slider found.\");\r\n            });\r\n\r\n            if ($Jssor$.$Attribute(elmt, \"jssor-slider\"))\r\n                return;\r\n\r\n            level = level || 0;\r\n\r\n            if (!_ContentRefreshed) {\r\n                if (elmt.tagName == \"IMG\") {\r\n                    _ImageElmts.push(elmt);\r\n\r\n                    if (!$Jssor$.$Attribute(elmt, \"src\")) {\r\n                        _ImageLazyLoading = true;\r\n                        elmt[\"display-origin\"] = $Jssor$.$CssDisplay(elmt);\r\n                        $Jssor$.$HideElement(elmt);\r\n                    }\r\n                }\r\n                if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                    $Jssor$.$CssZIndex(elmt, ($Jssor$.$CssZIndex(elmt) || 0) + 1);\r\n                }\r\n                if (_Options.$HWA && $Jssor$.$WebKitVersion()) {\r\n                    if ($Jssor$.$WebKitVersion() < 534 || (!_SlideshowEnabled && !$Jssor$.$IsBrowserChrome())) {\r\n                        $Jssor$.$EnableHWA(elmt);\r\n                    }\r\n                }\r\n            }\r\n\r\n            var childElements = $Jssor$.$Children(elmt);\r\n\r\n            $Jssor$.$Each(childElements, function (childElement, i) {\r\n\r\n                var childTagName = childElement.tagName;\r\n                var uAttribute = $Jssor$.$AttributeEx(childElement, \"u\");\r\n                if (uAttribute == \"player\" && !_PlayerInstanceElement) {\r\n                    _PlayerInstanceElement = childElement;\r\n                    if (_PlayerInstanceElement.pInstance) {\r\n                        PlayerAvailableEventHandler();\r\n                    }\r\n                    else {\r\n                        $Jssor$.$AddEvent(_PlayerInstanceElement, \"dataavailable\", PlayerAvailableEventHandler);\r\n                    }\r\n                }\r\n\r\n                if (uAttribute == \"caption\") {\r\n                    if (!$Jssor$.$IsBrowserIE() && !fresh) {\r\n\r\n                        //if (childTagName == \"A\") {\r\n                        //    $Jssor$.$RemoveEvent(childElement, \"click\", ContentClickEventHandler);\r\n                        //    $Jssor$.$Attribute(childElement, \"jssor-content\", null);\r\n                        //}\r\n\r\n                        var captionElement = $Jssor$.$CloneNode(childElement, false, true);\r\n                        $Jssor$.$InsertBefore(captionElement, childElement, elmt);\r\n                        $Jssor$.$RemoveElement(childElement, elmt);\r\n                        childElement = captionElement;\r\n\r\n                        fresh = true;\r\n                    }\r\n                }\r\n                else if (!_ContentRefreshed && !level && !_ImageItem) {\r\n\r\n                    if (childTagName == \"A\") {\r\n                        if ($Jssor$.$AttributeEx(childElement, \"u\") == \"image\") {\r\n                            _ImageItem = $Jssor$.$FindChildByTag(childElement, \"IMG\");\r\n\r\n                            $JssorDebug$.$Execute(function () {\r\n                                if (!_ImageItem) {\r\n                                    $JssorDebug$.$Error(\"slide html code definition error, no 'IMG' found in a 'image with link' slide.\\r\\n\" + elmt.outerHTML);\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            _ImageItem = $Jssor$.$FindChild(childElement, \"image\", true);\r\n                        }\r\n\r\n                        if (_ImageItem) {\r\n                            _LinkItemOrigin = childElement;\r\n                            $Jssor$.$SetStyles(_LinkItemOrigin, _StyleDef);\r\n\r\n                            _LinkItem = $Jssor$.$CloneNode(_LinkItemOrigin, true);\r\n                            //$Jssor$.$AddEvent(_LinkItem, \"click\", ContentClickEventHandler);\r\n\r\n                            $Jssor$.$CssDisplay(_LinkItem, \"block\");\r\n                            $Jssor$.$SetStyles(_LinkItem, _StyleDef);\r\n                            $Jssor$.$CssOpacity(_LinkItem, 0);\r\n                            $Jssor$.$Css(_LinkItem, \"backgroundColor\", \"#000\");\r\n                        }\r\n                    }\r\n                    else if (childTagName == \"IMG\" && $Jssor$.$AttributeEx(childElement, \"u\") == \"image\") {\r\n                        _ImageItem = childElement;\r\n                    }\r\n\r\n                    if (_ImageItem) {\r\n                        _ImageItem.border = 0;\r\n                        $Jssor$.$SetStyles(_ImageItem, _StyleDef);\r\n                    }\r\n                }\r\n\r\n                //if (!$Jssor$.$Attribute(childElement, \"jssor-content\")) {\r\n                //    //cancel click event on <A> element when a drag of slide succeeded\r\n                //    $Jssor$.$AddEvent(childElement, \"click\", ContentClickEventHandler);\r\n                //    $Jssor$.$Attribute(childElement, \"jssor-content\", true);\r\n                //}\r\n\r\n                RefreshContent(childElement, fresh, level +1);\r\n            });\r\n        }\r\n\r\n        _SelfSlideItem.$OnInnerOffsetChange = function (oldOffset, newOffset) {\r\n            var slidePosition = _DisplayPieces - newOffset;\r\n\r\n            SetPosition(_Wrapper, slidePosition);\r\n\r\n            //following lines are for future usage, not ready yet\r\n            //if (!_IsDragging || !_IsCaptionSliderPlayingWhenDragStart) {\r\n            //    var _DealWithParallax;\r\n            //    if (IsCurrentSlideIndex(slideIndex)) {\r\n            //        if (_CaptionSliderOptions.$PlayOutMode == 2)\r\n            //            _DealWithParallax = true;\r\n            //    }\r\n            //    else {\r\n            //        if (!_CaptionSliderOptions.$PlayInMode) {\r\n            //            //PlayInMode: 0 none\r\n            //            _CaptionSliderIn.$GoToEnd();\r\n            //        }\r\n            //        //else if (_CaptionSliderOptions.$PlayInMode == 1) {\r\n            //        //    //PlayInMode: 1 chain\r\n            //        //    _CaptionSliderIn.$GoToPosition(0);\r\n            //        //}\r\n            //        else if (_CaptionSliderOptions.$PlayInMode == 2) {\r\n            //            //PlayInMode: 2 parallel\r\n            //            _DealWithParallax = true;\r\n            //        }\r\n            //    }\r\n\r\n            //    if (_DealWithParallax) {\r\n            //        _CaptionSliderIn.$GoToPosition((_CaptionSliderIn.$GetPosition_OuterEnd() - _CaptionSliderIn.$GetPosition_OuterBegin()) * Math.abs(newOffset - 1) * .8 + _CaptionSliderIn.$GetPosition_OuterBegin());\r\n            //    }\r\n            //}\r\n        };\r\n\r\n        _SelfSlideItem.$GetCaptionSliderIn = function () {\r\n            return _CaptionSliderIn;\r\n        };\r\n\r\n        _SelfSlideItem.$GetCaptionSliderOut = function () {\r\n            return _CaptionSliderOut;\r\n        };\r\n\r\n        _SelfSlideItem.$Index = slideIndex;\r\n\r\n        $JssorObject$.call(_SelfSlideItem);\r\n\r\n        //SlideItem Constructor\r\n        {\r\n\r\n            var thumb = $Jssor$.$FindChild(slideElmt, \"thumb\", true);\r\n            if (thumb) {\r\n                _SelfSlideItem.$Thumb = $Jssor$.$CloneNode(thumb);\r\n                $Jssor$.$RemoveAttribute(thumb, \"id\");\r\n                $Jssor$.$HideElement(thumb);\r\n            }\r\n            $Jssor$.$ShowElement(slideElmt);\r\n\r\n            _LoadingScreen = $Jssor$.$CloneNode(_LoadingContainer);\r\n            $Jssor$.$CssZIndex(_LoadingScreen, 1000);\r\n\r\n            //cancel click event on <A> element when a drag of slide succeeded\r\n            $Jssor$.$AddEvent(slideElmt, \"click\", SlideClickEventHandler);\r\n\r\n            ResetCaptionSlider(true);\r\n\r\n            _SelfSlideItem.$Image = _ImageItem;\r\n            _SelfSlideItem.$Link = _LinkItem;\r\n\r\n            _SelfSlideItem.$Item = slideElmt;\r\n\r\n            _SelfSlideItem.$Wrapper = _Wrapper = slideElmt;\r\n            $Jssor$.$AppendChild(_Wrapper, _LoadingScreen);\r\n\r\n            _SelfSlider.$On(203, ParkEventHandler);\r\n            _SelfSlider.$On(28, FreezeEventHandler);\r\n            _SelfSlider.$On(24, SwipeStartEventHandler);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                _SequenceNumber = _SlideItemCreatedCount++;\r\n            });\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_Wrapper, \"debug-id\", \"slide-\" + slideIndex);\r\n            });\r\n        }\r\n    }\r\n    //SlideItem\r\n\r\n    //Processor\r\n    function Processor(slideElmt, slideIndex, slideshowProcessor, captionSliderIn, captionSliderOut) {\r\n\r\n        var _SelfProcessor = this;\r\n\r\n        var _ProgressBegin = 0;\r\n        var _SlideshowBegin = 0;\r\n        var _SlideshowEnd;\r\n        var _CaptionInBegin;\r\n        var _IdleBegin;\r\n        var _IdleEnd;\r\n        var _ProgressEnd;\r\n\r\n        var _IsSlideshowRunning;\r\n        var _IsRollingBack;\r\n\r\n        var _PlayerInstance;\r\n        var _IsPlayerOnService;\r\n\r\n        var slideItem = _SlideItems[slideIndex];\r\n\r\n        $JssorAnimator$.call(_SelfProcessor, 0, 0);\r\n\r\n        function UpdateLink() {\r\n\r\n            $Jssor$.$Empty(_LinkContainer);\r\n\r\n            if (_ShowLink && _IsSlideshowRunning && slideItem.$Link) {\r\n                $Jssor$.$AppendChild(_LinkContainer, slideItem.$Link);\r\n            }\r\n\r\n            $Jssor$.$ShowElement(_LinkContainer, !_IsSlideshowRunning && slideItem.$Image);\r\n        }\r\n\r\n        function ProcessCompleteEventHandler() {\r\n\r\n            if (_IsRollingBack) {\r\n                _IsRollingBack = false;\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_ROLLBACK_END, slideIndex, _IdleEnd, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n                _SelfProcessor.$GoToPosition(_IdleBegin);\r\n            }\r\n\r\n            _SelfProcessor.$Replay();\r\n        }\r\n\r\n        function PlayerSwitchEventHandler(isOnService) {\r\n            _IsPlayerOnService = isOnService;\r\n\r\n            _SelfProcessor.$Stop();\r\n            _SelfProcessor.$Replay();\r\n        }\r\n\r\n        _SelfProcessor.$Replay = function () {\r\n\r\n            var currentPosition = _SelfProcessor.$GetPosition_Display();\r\n\r\n            if (!_IsDragging && !_IsSliding && !_IsPlayerOnService && _CurrentSlideIndex == slideIndex) {\r\n\r\n                if (!currentPosition) {\r\n                    if (_SlideshowEnd && !_IsSlideshowRunning) {\r\n                        _IsSlideshowRunning = true;\r\n\r\n                        _SelfProcessor.$OpenSlideshowPanel(true);\r\n\r\n                        _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SLIDESHOW_START, slideIndex, _ProgressBegin, _SlideshowBegin, _SlideshowEnd, _ProgressEnd);\r\n                    }\r\n\r\n                    UpdateLink();\r\n                }\r\n\r\n                var toPosition;\r\n                var stateEvent = $JssorSlider$.$EVT_STATE_CHANGE;\r\n\r\n                if (currentPosition != _ProgressEnd) {\r\n                    if (currentPosition == _IdleEnd) {\r\n                        toPosition = _ProgressEnd;\r\n                    }\r\n                    else if (currentPosition == _IdleBegin) {\r\n                        toPosition = _IdleEnd;\r\n                    }\r\n                    else if (!currentPosition) {\r\n                        toPosition = _IdleBegin;\r\n                    }\r\n                    else if (currentPosition > _IdleEnd) {\r\n                        _IsRollingBack = true;\r\n                        toPosition = _IdleEnd;\r\n                        stateEvent = $JssorSlider$.$EVT_ROLLBACK_START;\r\n                    }\r\n                    else {\r\n                        //continue from break (by drag or lock)\r\n                        toPosition = _SelfProcessor.$GetPlayToPosition();\r\n                    }\r\n                }\r\n\r\n                _SelfSlider.$TriggerEvent(stateEvent, slideIndex, currentPosition, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n\r\n                var allowAutoPlay = _AutoPlay && (!_HoverToPause || _NotOnHover);\r\n\r\n                if (currentPosition == _ProgressEnd) {\r\n                    (_IdleEnd != _ProgressEnd && !(_HoverToPause & 12) || allowAutoPlay) && slideItem.$GoForNextSlide();\r\n                }\r\n                else if (allowAutoPlay || currentPosition != _IdleEnd) {\r\n                    _SelfProcessor.$PlayToPosition(toPosition, ProcessCompleteEventHandler);\r\n                }\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$AdjustIdleOnPark = function () {\r\n            if (_IdleEnd == _ProgressEnd && _IdleEnd == _SelfProcessor.$GetPosition_Display())\r\n                _SelfProcessor.$GoToPosition(_IdleBegin);\r\n        };\r\n\r\n        _SelfProcessor.$Abort = function () {\r\n            _SlideshowRunner && _SlideshowRunner.$Index == slideIndex && _SlideshowRunner.$Clear();\r\n\r\n            var currentPosition = _SelfProcessor.$GetPosition_Display();\r\n            if (currentPosition < _ProgressEnd) {\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_STATE_CHANGE, slideIndex, -currentPosition - 1, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$OpenSlideshowPanel = function (open) {\r\n            if (slideshowProcessor) {\r\n                $Jssor$.$CssOverflow(_SlideshowPanel, open && slideshowProcessor.$Transition.$Outside ? \"\" : \"hidden\");\r\n            }\r\n        };\r\n\r\n        _SelfProcessor.$OnInnerOffsetChange = function (oldPosition, newPosition) {\r\n\r\n            if (_IsSlideshowRunning && newPosition >= _SlideshowEnd) {\r\n                _IsSlideshowRunning = false;\r\n                UpdateLink();\r\n                slideItem.$UnhideContentForSlideshow();\r\n                _SlideshowRunner.$Clear();\r\n\r\n                _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_SLIDESHOW_END, slideIndex, _ProgressBegin, _SlideshowBegin, _SlideshowEnd, _ProgressEnd);\r\n            }\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_PROGRESS_CHANGE, slideIndex, newPosition, _ProgressBegin, _IdleBegin, _IdleEnd, _ProgressEnd);\r\n        };\r\n\r\n        _SelfProcessor.$SetPlayer = function (playerInstance) {\r\n            if (playerInstance && !_PlayerInstance) {\r\n                _PlayerInstance = playerInstance;\r\n\r\n                playerInstance.$On($JssorPlayer$.$EVT_SWITCH, PlayerSwitchEventHandler);\r\n            }\r\n        };\r\n\r\n        //Processor Constructor\r\n        {\r\n            if (slideshowProcessor) {\r\n                _SelfProcessor.$Chain(slideshowProcessor);\r\n            }\r\n\r\n            _SlideshowEnd = _SelfProcessor.$GetPosition_OuterEnd();\r\n            _CaptionInBegin = _SelfProcessor.$GetPosition_OuterEnd();\r\n            _SelfProcessor.$Chain(captionSliderIn);\r\n            _IdleBegin = captionSliderIn.$GetPosition_OuterEnd();\r\n            _IdleEnd = _IdleBegin + ($Jssor$.$ParseFloat($Jssor$.$AttributeEx(slideElmt, \"idle\")) || _AutoPlayInterval);\r\n\r\n            captionSliderOut.$Shift(_IdleEnd);\r\n            _SelfProcessor.$Combine(captionSliderOut);\r\n            _ProgressEnd = _SelfProcessor.$GetPosition_OuterEnd();\r\n        }\r\n    }\r\n    //Processor\r\n    //#endregion\r\n\r\n    function SetPosition(elmt, position) {\r\n        var orientation = _DragOrientation > 0 ? _DragOrientation : _PlayOrientation;\r\n        var x = _StepLengthX * position * (orientation & 1);\r\n        var y = _StepLengthY * position * ((orientation >> 1) & 1);\r\n\r\n        x = Math.round(x);\r\n        y = Math.round(y);\r\n\r\n        $Jssor$.$CssLeft(elmt, x);\r\n        $Jssor$.$CssTop(elmt, y);\r\n    }\r\n\r\n    //#region Event handling begin\r\n\r\n    function RecordFreezePoint() {\r\n        _CarouselPlaying_OnFreeze = _IsSliding;\r\n        _PlayToPosition_OnFreeze = _CarouselPlayer.$GetPlayToPosition();\r\n        _Position_OnFreeze = _Conveyor.$GetPosition();\r\n    }\r\n\r\n    function Freeze() {\r\n        RecordFreezePoint();\r\n\r\n        if (_IsDragging || !_NotOnHover && (_HoverToPause & 12)) {\r\n            _CarouselPlayer.$Stop();\r\n\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_FREEZE);\r\n        }\r\n    }\r\n\r\n    function Unfreeze(byDrag) {\r\n\r\n        if (!_IsDragging && (_NotOnHover || !(_HoverToPause & 12)) && !_CarouselPlayer.$IsPlaying()) {\r\n\r\n            var currentPosition = _Conveyor.$GetPosition();\r\n            var toPosition = Math.ceil(_Position_OnFreeze);\r\n\r\n            if (byDrag && Math.abs(_DragOffsetTotal) >= _Options.$MinDragOffsetToSlide) {\r\n                toPosition = Math.ceil(currentPosition);\r\n                toPosition += _DragIndexAdjust;\r\n            }\r\n\r\n            if (!(_Loop & 1)) {\r\n                toPosition = Math.min(_SlideCount - _DisplayPieces, Math.max(toPosition, 0));\r\n            }\r\n\r\n            var t = Math.abs(toPosition - currentPosition);\r\n            t = 1 - Math.pow(1 - t, 5);\r\n\r\n            if (!_LastDragSucceded && _CarouselPlaying_OnFreeze) {\r\n                _CarouselPlayer.$Continue(_PlayToPosition_OnFreeze);\r\n            }\r\n            else if (currentPosition == toPosition) {\r\n                _CurrentSlideItem.$EnablePlayer();\r\n                _CurrentSlideItem.$TryActivate();\r\n            }\r\n            else {\r\n\r\n                _CarouselPlayer.$PlayCarousel(currentPosition, toPosition, t * _SlideDuration);\r\n            }\r\n        }\r\n    }\r\n\r\n    function PreventDragSelectionEvent(event) {\r\n        if (!$Jssor$.$AttributeEx($Jssor$.$EvtSrc(event), \"nodrag\")) {\r\n            $Jssor$.$CancelEvent(event);\r\n        }\r\n    }\r\n\r\n    function OnTouchStart(event) {\r\n        OnDragStart(event, 1);\r\n    }\r\n\r\n    function OnDragStart(event, touch) {\r\n        event = $Jssor$.$GetEvent(event);\r\n        var eventSrc = $Jssor$.$EvtSrc(event);\r\n\r\n        if (!_DragOrientationRegistered && !$Jssor$.$AttributeEx(eventSrc, \"nodrag\") && RegisterDrag() && (!touch || event.touches.length == 1)) {\r\n            _IsDragging = true;\r\n            _DragInvalid = false;\r\n            _LoadingTicket = null;\r\n\r\n            $Jssor$.$AddEvent(document, touch ? \"touchmove\" : \"mousemove\", OnDragMove);\r\n\r\n            _LastTimeMoveByDrag = $Jssor$.$GetNow() - 50;\r\n\r\n            _LastDragSucceded = 0;\r\n            Freeze();\r\n\r\n            if (!_CarouselPlaying_OnFreeze)\r\n                _DragOrientation = 0;\r\n\r\n            if (touch) {\r\n                var touchPoint = event.touches[0];\r\n                _DragStartMouseX = touchPoint.clientX;\r\n                _DragStartMouseY = touchPoint.clientY;\r\n            }\r\n            else {\r\n                var mousePoint = $Jssor$.$MousePosition(event);\r\n\r\n                _DragStartMouseX = mousePoint.x;\r\n                _DragStartMouseY = mousePoint.y;\r\n            }\r\n\r\n            _DragOffsetTotal = 0;\r\n            _DragOffsetLastTime = 0;\r\n            _DragIndexAdjust = 0;\r\n\r\n            //Trigger EVT_DRAGSTART\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_DRAG_START, GetRealIndex(_Position_OnFreeze), _Position_OnFreeze, event);\r\n        }\r\n    }\r\n\r\n    function OnDragMove(event) {\r\n        if (_IsDragging) {\r\n            event = $Jssor$.$GetEvent(event);\r\n\r\n            var actionPoint;\r\n\r\n            if (event.type != \"mousemove\") {\r\n                var touch = event.touches[0];\r\n                actionPoint = { x: touch.clientX, y: touch.clientY };\r\n            }\r\n            else {\r\n                actionPoint = $Jssor$.$MousePosition(event);\r\n            }\r\n\r\n            if (actionPoint) {\r\n                var distanceX = actionPoint.x - _DragStartMouseX;\r\n                var distanceY = actionPoint.y - _DragStartMouseY;\r\n\r\n\r\n                if (Math.floor(_Position_OnFreeze) != _Position_OnFreeze)\r\n                    _DragOrientation = _DragOrientation || (_PlayOrientation & _DragOrientationRegistered);\r\n\r\n                if ((distanceX || distanceY) && !_DragOrientation) {\r\n                    if (_DragOrientationRegistered == 3) {\r\n                        if (Math.abs(distanceY) > Math.abs(distanceX)) {\r\n                            _DragOrientation = 2;\r\n                        }\r\n                        else\r\n                            _DragOrientation = 1;\r\n                    }\r\n                    else {\r\n                        _DragOrientation = _DragOrientationRegistered;\r\n                    }\r\n\r\n                    if (_IsTouchDevice && _DragOrientation == 1 && Math.abs(distanceY) - Math.abs(distanceX) > 3) {\r\n                        _DragInvalid = true;\r\n                    }\r\n                }\r\n\r\n                if (_DragOrientation) {\r\n                    var distance = distanceY;\r\n                    var stepLength = _StepLengthY;\r\n\r\n                    if (_DragOrientation == 1) {\r\n                        distance = distanceX;\r\n                        stepLength = _StepLengthX;\r\n                    }\r\n\r\n                    if (!(_Loop & 1)) {\r\n                        if (distance > 0) {\r\n                            var normalDistance = stepLength * _CurrentSlideIndex;\r\n                            var sqrtDistance = distance - normalDistance;\r\n                            if (sqrtDistance > 0) {\r\n                                distance = normalDistance + Math.sqrt(sqrtDistance) * 5;\r\n                            }\r\n                        }\r\n\r\n                        if (distance < 0) {\r\n                            var normalDistance = stepLength * (_SlideCount - _DisplayPieces - _CurrentSlideIndex);\r\n                            var sqrtDistance = -distance - normalDistance;\r\n\r\n                            if (sqrtDistance > 0) {\r\n                                distance = -normalDistance - Math.sqrt(sqrtDistance) * 5;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_DragOffsetTotal - _DragOffsetLastTime < -2) {\r\n                        _DragIndexAdjust = 0;\r\n                    }\r\n                    else if (_DragOffsetTotal - _DragOffsetLastTime > 2) {\r\n                        _DragIndexAdjust = -1;\r\n                    }\r\n\r\n                    _DragOffsetLastTime = _DragOffsetTotal;\r\n                    _DragOffsetTotal = distance;\r\n                    _PositionToGoByDrag = _Position_OnFreeze - _DragOffsetTotal / stepLength / (_ScaleRatio || 1);\r\n\r\n                    if (_DragOffsetTotal && _DragOrientation && !_DragInvalid) {\r\n                        $Jssor$.$CancelEvent(event);\r\n                        if (!_IsSliding) {\r\n                            _CarouselPlayer.$StandBy(_PositionToGoByDrag);\r\n                        }\r\n                        else\r\n                            _CarouselPlayer.$SetStandByPosition(_PositionToGoByDrag);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function OnDragEnd() {\r\n        UnregisterDrag();\r\n\r\n        if (_IsDragging) {\r\n\r\n            _IsDragging = false;\r\n\r\n            _LastTimeMoveByDrag = $Jssor$.$GetNow();\r\n\r\n            $Jssor$.$RemoveEvent(document, \"mousemove\", OnDragMove);\r\n            $Jssor$.$RemoveEvent(document, \"touchmove\", OnDragMove);\r\n\r\n            _LastDragSucceded = _DragOffsetTotal;\r\n\r\n            _CarouselPlayer.$Stop();\r\n\r\n            var currentPosition = _Conveyor.$GetPosition();\r\n\r\n            //Trigger EVT_DRAG_END\r\n            _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_DRAG_END, GetRealIndex(currentPosition), currentPosition, GetRealIndex(_Position_OnFreeze), _Position_OnFreeze);\r\n\r\n            (_HoverToPause & 12) && RecordFreezePoint();\r\n\r\n            Unfreeze(true);\r\n        }\r\n    }\r\n\r\n    function SlidesClickEventHandler(event) {\r\n        if (_LastDragSucceded) {\r\n            $Jssor$.$StopEvent(event);\r\n\r\n            var checkElement = $Jssor$.$EvtSrc(event);\r\n            while (checkElement && _SlidesContainer !== checkElement) {\r\n                if (checkElement.tagName == \"A\") {\r\n                    $Jssor$.$CancelEvent(event);\r\n                }\r\n                try {\r\n                    checkElement = checkElement.parentNode;\r\n                } catch (e) {\r\n                    // Firefox sometimes fires events for XUL elements, which throws\r\n                    // a \"permission denied\" error. so this is not a child.\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    function SetCurrentSlideIndex(index) {\r\n        _PrevSlideItem = _SlideItems[_CurrentSlideIndex];\r\n        _PreviousSlideIndex = _CurrentSlideIndex;\r\n        _CurrentSlideIndex = GetRealIndex(index);\r\n        _CurrentSlideItem = _SlideItems[_CurrentSlideIndex];\r\n        ResetNavigator(index);\r\n        return _CurrentSlideIndex;\r\n    }\r\n\r\n    function OnPark(slideIndex, prevIndex) {\r\n        _DragOrientation = 0;\r\n\r\n        SetCurrentSlideIndex(slideIndex);\r\n\r\n        //Trigger EVT_PARK\r\n        _SelfSlider.$TriggerEvent($JssorSlider$.$EVT_PARK, GetRealIndex(slideIndex), prevIndex);\r\n    }\r\n\r\n    function ResetNavigator(index, temp) {\r\n        _TempSlideIndex = index;\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$SetCurrentIndex(GetRealIndex(index), index, temp);\r\n        });\r\n    }\r\n\r\n    function RegisterDrag() {\r\n        var dragRegistry = $JssorSlider$.$DragRegistry || 0;\r\n        var dragOrientation = _DragEnabled;\r\n        if (_IsTouchDevice)\r\n            (dragOrientation & 1) && (dragOrientation &= 1);\r\n        $JssorSlider$.$DragRegistry |= dragOrientation;\r\n\r\n        return (_DragOrientationRegistered = dragOrientation & ~dragRegistry);\r\n    }\r\n\r\n    function UnregisterDrag() {\r\n        if (_DragOrientationRegistered) {\r\n            $JssorSlider$.$DragRegistry &= ~_DragEnabled;\r\n            _DragOrientationRegistered = 0;\r\n        }\r\n    }\r\n\r\n    function CreatePanel() {\r\n        var div = $Jssor$.$CreateDiv();\r\n\r\n        $Jssor$.$SetStyles(div, _StyleDef);\r\n        $Jssor$.$CssPosition(div, \"absolute\");\r\n\r\n        return div;\r\n    }\r\n\r\n    function GetRealIndex(index) {\r\n        return (index % _SlideCount + _SlideCount) % _SlideCount;\r\n    }\r\n\r\n    function IsCurrentSlideIndex(index) {\r\n        return GetRealIndex(index) == _CurrentSlideIndex;\r\n    }\r\n\r\n    function IsPreviousSlideIndex(index) {\r\n        return GetRealIndex(index) == _PreviousSlideIndex;\r\n    }\r\n\r\n    //Navigation Request Handler\r\n    function NavigationClickHandler(index, relative) {\r\n        var toIndex = index;\r\n\r\n        if (relative) {\r\n            if (!_Loop) {\r\n                //Stop at threshold\r\n                toIndex = Math.min(Math.max(toIndex + _TempSlideIndex, 0), _SlideCount - _DisplayPieces);\r\n                relative = false;\r\n            }\r\n            else if (_Loop & 2) {\r\n                //Rewind\r\n                toIndex = GetRealIndex(toIndex + _TempSlideIndex);\r\n                relative = false;\r\n            }\r\n        }\r\n        else if (_Loop) {\r\n            toIndex = _SelfSlider.$GetVirtualIndex(toIndex);\r\n        }\r\n\r\n        PlayTo(toIndex, _Options.$SlideDuration, relative);\r\n    }\r\n\r\n    function ShowNavigators() {\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Show(navigator.$Options.$ChanceToShow <= _NotOnHover);\r\n        });\r\n    }\r\n\r\n    function MainContainerMouseLeaveEventHandler() {\r\n        if (!_NotOnHover) {\r\n\r\n            //$JssorDebug$.$Log(\"mouseleave\");\r\n\r\n            _NotOnHover = 1;\r\n\r\n            ShowNavigators();\r\n\r\n            if (!_IsDragging) {\r\n                (_HoverToPause & 12) && Unfreeze();\r\n                (_HoverToPause & 3) && _SlideItems[_CurrentSlideIndex].$TryActivate();\r\n            }\r\n        }\r\n    }\r\n\r\n    function MainContainerMouseEnterEventHandler() {\r\n\r\n        if (_NotOnHover) {\r\n\r\n            //$JssorDebug$.$Log(\"mouseenter\");\r\n\r\n            _NotOnHover = 0;\r\n\r\n            ShowNavigators();\r\n\r\n            _IsDragging || !(_HoverToPause & 12) || Freeze();\r\n        }\r\n    }\r\n\r\n    function AdjustSlidesContainerSize() {\r\n        _StyleDef = { $Width: _SlideWidth, $Height: _SlideHeight, $Top: 0, $Left: 0 };\r\n\r\n        $Jssor$.$Each(_SlideElmts, function (slideElmt, i) {\r\n\r\n            $Jssor$.$SetStyles(slideElmt, _StyleDef);\r\n            $Jssor$.$CssPosition(slideElmt, \"absolute\");\r\n            $Jssor$.$CssOverflow(slideElmt, \"hidden\");\r\n\r\n            $Jssor$.$HideElement(slideElmt);\r\n        });\r\n\r\n        $Jssor$.$SetStyles(_LoadingContainer, _StyleDef);\r\n    }\r\n\r\n    function PlayToOffset(offset, slideDuration) {\r\n        PlayTo(offset, slideDuration, true);\r\n    }\r\n\r\n    function PlayTo(slideIndex, slideDuration, relative) {\r\n        /// <summary>\r\n        ///     PlayTo( slideIndex [, slideDuration] ); //Play slider to position 'slideIndex' within a period calculated base on 'slideDuration'.\r\n        /// </summary>\r\n        /// <param name=\"slideIndex\" type=\"Number\">\r\n        ///     slide slideIndex or position will be playing to\r\n        /// </param>\r\n        /// <param name=\"slideDuration\" type=\"Number\" optional=\"true\">\r\n        ///     base slide duration in milliseconds to calculate the whole duration to complete this play request.\r\n        ///     default value is '$SlideDuration' value which is specified when initialize the slider.\r\n        /// </param>\r\n        /// http://msdn.microsoft.com/en-us/library/vstudio/bb385682.aspx\r\n        /// http://msdn.microsoft.com/en-us/library/vstudio/hh542720.aspx\r\n        if (_CarouselEnabled && (!_IsDragging && (_NotOnHover || !(_HoverToPause & 12)) || _Options.$NaviQuitDrag)) {\r\n            _IsSliding = true;\r\n            _IsDragging = false;\r\n            _CarouselPlayer.$Stop();\r\n\r\n            {\r\n                //Slide Duration\r\n                if (slideDuration == undefined)\r\n                    slideDuration = _SlideDuration;\r\n\r\n                var positionDisplay = _Carousel.$GetPosition_Display();\r\n                var positionTo = slideIndex;\r\n                if (relative) {\r\n                    positionTo = positionDisplay + slideIndex;\r\n                    if (slideIndex > 0)\r\n                        positionTo = Math.ceil(positionTo);\r\n                    else\r\n                        positionTo = Math.floor(positionTo);\r\n                }\r\n\r\n                if (_Loop & 2) {\r\n                    //Rewind\r\n                    positionTo = GetRealIndex(positionTo);\r\n                }\r\n                if (!(_Loop & 1)) {\r\n                    //Stop at threshold\r\n                    positionTo = Math.max(0, Math.min(positionTo, _SlideCount - _DisplayPieces));\r\n                }\r\n\r\n                var positionOffset = (positionTo - positionDisplay) % _SlideCount;\r\n                positionTo = positionDisplay + positionOffset;\r\n\r\n                var duration = positionDisplay == positionTo ? 0 : slideDuration * Math.abs(positionOffset);\r\n                duration = Math.min(duration, slideDuration * _DisplayPieces * 1.5);\r\n\r\n                _CarouselPlayer.$PlayCarousel(positionDisplay, positionTo, duration || 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    //private functions\r\n\r\n    //member functions\r\n\r\n    _SelfSlider.$PlayTo = PlayTo;\r\n\r\n    _SelfSlider.$GoTo = function (slideIndex) {\r\n        /// <summary>\r\n        ///     instance.$GoTo( slideIndex );   //Go to the specifed slide immediately with no play.\r\n        /// </summary>\r\n        //PlayTo(slideIndex, 1);\r\n        _Conveyor.$GoToPosition(slideIndex);\r\n    };\r\n\r\n    _SelfSlider.$Next = function () {\r\n        /// <summary>\r\n        ///     instance.$Next();   //Play the slider to next slide.\r\n        /// </summary>\r\n        PlayToOffset(1);\r\n    };\r\n\r\n    _SelfSlider.$Prev = function () {\r\n        /// <summary>\r\n        ///     instance.$Prev();   //Play the slider to previous slide.\r\n        /// </summary>\r\n        PlayToOffset(-1);\r\n    };\r\n\r\n    _SelfSlider.$Pause = function () {\r\n        /// <summary>\r\n        ///     instance.$Pause();   //Pause the slider, prevent it from auto playing.\r\n        /// </summary>\r\n        _AutoPlay = false;\r\n    };\r\n\r\n    _SelfSlider.$Play = function () {\r\n        /// <summary>\r\n        ///     instance.$Play();   //Start auto play if the slider is currently paused.\r\n        /// </summary>\r\n        if (!_AutoPlay) {\r\n            _AutoPlay = true;\r\n            _SlideItems[_CurrentSlideIndex] && _SlideItems[_CurrentSlideIndex].$TryActivate();\r\n        }\r\n    };\r\n\r\n    _SelfSlider.$SetSlideshowTransitions = function (transitions) {\r\n        /// <summary>\r\n        ///     instance.$SetSlideshowTransitions( transitions );   //Reset slideshow transitions for the slider.\r\n        /// </summary>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!transitions || !transitions.length) {\r\n                $JssorDebug$.$Error(\"Can not set slideshow transitions, no transitions specified.\");\r\n            }\r\n        });\r\n\r\n        //$Jssor$.$TranslateTransitions(transitions);    //for old transition compatibility\r\n        _Options.$SlideshowOptions.$Transitions = transitions;\r\n    };\r\n\r\n    _SelfSlider.$SetCaptionTransitions = function (transitions) {\r\n        /// <summary>\r\n        ///     instance.$SetCaptionTransitions( transitions );   //Reset caption transitions for the slider.\r\n        /// </summary>\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!transitions || !transitions.length) {\r\n                $JssorDebug$.$Error(\"Can not set caption transitions, no transitions specified\");\r\n            }\r\n        });\r\n\r\n        //$Jssor$.$TranslateTransitions(transitions);    //for old transition compatibility\r\n        _CaptionSliderOptions.$CaptionTransitions = transitions;\r\n        _CaptionSliderOptions.$Version = $Jssor$.$GetNow();\r\n    };\r\n\r\n    _SelfSlider.$SlidesCount = function () {\r\n        /// <summary>\r\n        ///     instance.$SlidesCount();   //Retrieve slides count of the slider.\r\n        /// </summary>\r\n        return _SlideElmts.length;\r\n    };\r\n\r\n    _SelfSlider.$CurrentIndex = function () {\r\n        /// <summary>\r\n        ///     instance.$CurrentIndex();   //Retrieve current slide index of the slider.\r\n        /// </summary>\r\n        return _CurrentSlideIndex;\r\n    };\r\n\r\n    _SelfSlider.$IsAutoPlaying = function () {\r\n        /// <summary>\r\n        ///     instance.$IsAutoPlaying();   //Retrieve auto play status of the slider.\r\n        /// </summary>\r\n        return _AutoPlay;\r\n    };\r\n\r\n    _SelfSlider.$IsDragging = function () {\r\n        /// <summary>\r\n        ///     instance.$IsDragging();   //Retrieve drag status of the slider.\r\n        /// </summary>\r\n        return _IsDragging;\r\n    };\r\n\r\n    _SelfSlider.$IsSliding = function () {\r\n        /// <summary>\r\n        ///     instance.$IsSliding();   //Retrieve right<-->left sliding status of the slider.\r\n        /// </summary>\r\n        return _IsSliding;\r\n    };\r\n\r\n    _SelfSlider.$IsMouseOver = function () {\r\n        /// <summary>\r\n        ///     instance.$IsMouseOver();   //Retrieve mouse over status of the slider.\r\n        /// </summary>\r\n        return !_NotOnHover;\r\n    };\r\n\r\n    _SelfSlider.$LastDragSucceded = function () {\r\n        /// <summary>\r\n        ///     instance.$IsLastDragSucceded();   //Retrieve last drag succeded status, returns 0 if failed, returns drag offset if succeded\r\n        /// </summary>\r\n        return _LastDragSucceded;\r\n    };\r\n\r\n    function OriginalWidth() {\r\n        /// <summary>\r\n        ///     instance.$OriginalWidth();   //Retrieve original width of the slider.\r\n        /// </summary>\r\n        return $Jssor$.$CssWidth(_ScaleWrapper || elmt);\r\n    }\r\n\r\n    function OriginalHeight() {\r\n        /// <summary>\r\n        ///     instance.$OriginalHeight();   //Retrieve original height of the slider.\r\n        /// </summary>\r\n        return $Jssor$.$CssHeight(_ScaleWrapper || elmt);\r\n    }\r\n\r\n    _SelfSlider.$OriginalWidth = _SelfSlider.$GetOriginalWidth = OriginalWidth;\r\n\r\n    _SelfSlider.$OriginalHeight = _SelfSlider.$GetOriginalHeight = OriginalHeight;\r\n\r\n    function Scale(dimension, isHeight) {\r\n        /// <summary>\r\n        ///     instance.$ScaleWidth();   //Retrieve scaled dimension the slider currently displays.\r\n        ///     instance.$ScaleWidth( dimension );   //Scale the slider to new width and keep aspect ratio.\r\n        /// </summary>\r\n\r\n        if (dimension == undefined)\r\n            return $Jssor$.$CssWidth(elmt);\r\n\r\n        if (!_ScaleWrapper) {\r\n            $JssorDebug$.$Execute(function () {\r\n                var originalWidthStr = $Jssor$.$Css(elmt, \"width\");\r\n                var originalHeightStr = $Jssor$.$Css(elmt, \"height\");\r\n                var originalWidth = $Jssor$.$CssP(elmt, \"width\");\r\n                var originalHeight = $Jssor$.$CssP(elmt, \"height\");\r\n\r\n                if (!originalWidthStr || originalWidthStr.indexOf(\"px\") == -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not specified. Please specify 'width' in pixel. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (!originalHeightStr || originalHeightStr.indexOf(\"px\") == -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not specified. Please specify 'height' in pixel. e.g. 'height: 300px;'\");\r\n                }\r\n\r\n                if (originalWidthStr.indexOf('%') != -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not valid. Please specify 'width' in pixel. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (originalHeightStr.indexOf('%') != -1) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not valid. Please specify 'height' in pixel. e.g. 'height: 300px;'\");\r\n                }\r\n\r\n                if (!originalWidth) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'width' of 'outer container' not valid. 'width' of 'outer container' should be positive number. e.g. 'width: 600px;'\");\r\n                }\r\n\r\n                if (!originalHeight) {\r\n                    $JssorDebug$.$Fail(\"Cannot scale jssor slider, 'height' of 'outer container' not valid. 'height' of 'outer container' should be positive number. e.g. 'height: 300px;'\");\r\n                }\r\n            });\r\n\r\n            var innerWrapper = $Jssor$.$CreateDiv(document);\r\n            $Jssor$.$ClassName(innerWrapper, $Jssor$.$ClassName(elmt));\r\n            $Jssor$.$CssCssText(innerWrapper, $Jssor$.$CssCssText(elmt));\r\n            $Jssor$.$CssDisplay(innerWrapper, \"block\");\r\n\r\n            $Jssor$.$CssPosition(innerWrapper, \"relative\");\r\n            $Jssor$.$CssTop(innerWrapper, 0);\r\n            $Jssor$.$CssLeft(innerWrapper, 0);\r\n            $Jssor$.$CssOverflow(innerWrapper, \"visible\");\r\n\r\n            _ScaleWrapper = $Jssor$.$CreateDiv(document);\r\n\r\n            $Jssor$.$CssPosition(_ScaleWrapper, \"absolute\");\r\n            $Jssor$.$CssTop(_ScaleWrapper, 0);\r\n            $Jssor$.$CssLeft(_ScaleWrapper, 0);\r\n            $Jssor$.$CssWidth(_ScaleWrapper, $Jssor$.$CssWidth(elmt));\r\n            $Jssor$.$CssHeight(_ScaleWrapper, $Jssor$.$CssHeight(elmt));\r\n            $Jssor$.$SetStyleTransformOrigin(_ScaleWrapper, \"0 0\");\r\n\r\n            $Jssor$.$AppendChild(_ScaleWrapper, innerWrapper);\r\n\r\n            var children = $Jssor$.$Children(elmt);\r\n            $Jssor$.$AppendChild(elmt, _ScaleWrapper);\r\n\r\n            $Jssor$.$Css(elmt, \"backgroundImage\", \"\");\r\n\r\n            //var noMoveElmts = {\r\n            //    \"navigator\": _BulletNavigatorOptions && _BulletNavigatorOptions.$Scale == false,\r\n            //    \"arrowleft\": _ArrowNavigatorOptions && _ArrowNavigatorOptions.$Scale == false,\r\n            //    \"arrowright\": _ArrowNavigatorOptions && _ArrowNavigatorOptions.$Scale == false,\r\n            //    \"thumbnavigator\": _ThumbnailNavigatorOptions && _ThumbnailNavigatorOptions.$Scale == false,\r\n            //    \"thumbwrapper\": _ThumbnailNavigatorOptions && _ThumbnailNavigatorOptions.$Scale == false\r\n            //};\r\n\r\n            $Jssor$.$Each(children, function (child) {\r\n                $Jssor$.$AppendChild($Jssor$.$AttributeEx(child, \"noscale\") ? elmt : innerWrapper, child);\r\n                //$Jssor$.$AppendChild(noMoveElmts[$Jssor$.$AttributeEx(child, \"u\")] ? elmt : innerWrapper, child);\r\n            });\r\n        }\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!dimension || dimension < 0) {\r\n                $JssorDebug$.$Fail(\"'$ScaleWidth' error, 'dimension' should be positive value.\");\r\n            }\r\n        });\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_InitialScrollWidth) {\r\n                _InitialScrollWidth = _SelfSlider.$Elmt.scrollWidth;\r\n            }\r\n        });\r\n\r\n        _ScaleRatio = dimension / (isHeight ? $Jssor$.$CssHeight : $Jssor$.$CssWidth)(_ScaleWrapper);\r\n        $Jssor$.$CssScale(_ScaleWrapper, _ScaleRatio);\r\n\r\n        var scaleWidth = isHeight ? (_ScaleRatio * OriginalWidth()) : dimension;\r\n        var scaleHeight = isHeight ? dimension : (_ScaleRatio * OriginalHeight());\r\n\r\n        $Jssor$.$CssWidth(elmt, scaleWidth);\r\n        $Jssor$.$CssHeight(elmt, scaleHeight);\r\n\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Relocate(scaleWidth, scaleHeight);\r\n        });\r\n    }\r\n\r\n    _SelfSlider.$ScaleHeight = _SelfSlider.$GetScaleHeight = function (height) {\r\n        /// <summary>\r\n        ///     instance.$ScaleHeight();   //Retrieve scaled height the slider currently displays.\r\n        ///     instance.$ScaleHeight( dimension );   //Scale the slider to new height and keep aspect ratio.\r\n        /// </summary>\r\n\r\n        if (height == undefined)\r\n            return $Jssor$.$CssHeight(elmt);\r\n\r\n        Scale(height, true);\r\n    };\r\n\r\n    _SelfSlider.$ScaleWidth = _SelfSlider.$SetScaleWidth = _SelfSlider.$GetScaleWidth = Scale;\r\n\r\n    _SelfSlider.$GetVirtualIndex = function (index) {\r\n        var parkingIndex = Math.ceil(GetRealIndex(_ParkingPosition / _StepLength));\r\n        var displayIndex = GetRealIndex(index - _TempSlideIndex + parkingIndex);\r\n\r\n        if (displayIndex > _DisplayPieces) {\r\n            if (index - _TempSlideIndex > _SlideCount / 2)\r\n                index -= _SlideCount;\r\n            else if (index - _TempSlideIndex <= -_SlideCount / 2)\r\n                index += _SlideCount;\r\n        }\r\n        else {\r\n            index = _TempSlideIndex + displayIndex - parkingIndex;\r\n        }\r\n\r\n        return index;\r\n    };\r\n\r\n    //member functions\r\n\r\n    $JssorObject$.call(_SelfSlider);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        var outerContainerElmt = $Jssor$.$GetElement(elmt);\r\n        if (!outerContainerElmt)\r\n            $JssorDebug$.$Fail(\"Outer container '\" + elmt + \"' not found.\");\r\n    });\r\n\r\n    //initialize member variables\r\n    _SelfSlider.$Elmt = elmt = $Jssor$.$GetElement(elmt);\r\n    //initialize member variables\r\n\r\n    var _InitialScrollWidth;    //for debug only\r\n    var _CaptionSliderCount = 1;    //for debug only\r\n\r\n    var _Options = $Jssor$.$Extend({\r\n        $FillMode: 0,                   //[Optional] The way to fill image in slide, 0 stretch, 1 contain (keep aspect ratio and put all inside slide), 2 cover (keep aspect ratio and cover whole slide), 4 actual size, 5 contain for large image, actual size for small image, default value is 0\r\n        $LazyLoading: 1,                //[Optional] For image with  lazy loading format (<IMG src2=\"url\" .../>), by default it will be loaded only when the slide comes.\r\n        //But an integer value (maybe 0, 1, 2 or 3) indicates that how far of nearby slides should be loaded immediately as well, default value is 1.\r\n        $StartIndex: 0,                 //[Optional] Index of slide to display when initialize, default value is 0\r\n        $AutoPlay: false,               //[Optional] Whether to auto play, default value is false\r\n        $Loop: 1,                       //[Optional] Enable loop(circular) of carousel or not, 0: stop, 1: loop, 2 rewind, default value is 1\r\n        $HWA: true,                     //[Optional] Enable hardware acceleration or not, default value is true\r\n        $NaviQuitDrag: true,\r\n        $AutoPlaySteps: 1,              //[Optional] Steps to go of every play (this options applys only when slideshow disabled), default value is 1\r\n        $AutoPlayInterval: 3000,        //[Optional] Interval to play next slide since the previous stopped if a slideshow is auto playing, default value is 3000\r\n        $PauseOnHover: 1,               //[Optional] Whether to pause when mouse over if a slider is auto playing, 0 no pause, 1 pause for desktop, 2 pause for touch device, 3 pause for desktop and touch device, 4 freeze for desktop, 8 freeze for touch device, 12 freeze for desktop and touch device, default value is 1\r\n\r\n        $SlideDuration: 500,            //[Optional] Specifies default duration (swipe) for slide in milliseconds, default value is 400\r\n        $SlideEasing: $JssorEasing$.$EaseOutQuad,   //[Optional] Specifies easing for right to left animation, default value is $JssorEasing$.$EaseOutQuad\r\n        $MinDragOffsetToSlide: 20,      //[Optional] Minimum drag offset that trigger slide, default value is 20\r\n        $SlideSpacing: 0,               //[Optional] Space between each slide in pixels, default value is 0\r\n        $DisplayPieces: 1,              //[Optional] Number of pieces to display (the slideshow would be disabled if the value is set to greater than 1), default value is 1\r\n        $ParkingPosition: 0,            //[Optional] The offset position to park slide (this options applys only when slideshow disabled), default value is 0.\r\n        $UISearchMode: 1,               //[Optional] The way (0 parellel, 1 recursive, default value is recursive) to search UI components (slides container, loading screen, navigator container, arrow navigator container, thumbnail navigator container etc.\r\n        $PlayOrientation: 1,            //[Optional] Orientation to play slide (for auto play, navigation), 1 horizental, 2 vertical, 5 horizental reverse, 6 vertical reverse, default value is 1\r\n        $DragOrientation: 1             //[Optional] Orientation to drag slide, 0 no drag, 1 horizental, 2 vertical, 3 both, default value is 1 (Note that the $DragOrientation should be the same as $PlayOrientation when $DisplayPieces is greater than 1, or parking position is not 0)\r\n\r\n    }, options);\r\n\r\n    //going to use $Idle instead of $AutoPlayInterval\r\n    if (_Options.$Idle != undefined)\r\n        _Options.$AutoPlayInterval = _Options.$Idle;\r\n\r\n    //going to use $Cols instead of $DisplayPieces\r\n    if (_Options.$Cols != undefined)\r\n        _Options.$DisplayPieces = _Options.$Cols;\r\n\r\n    //Sodo statement for development time intellisence only\r\n    $JssorDebug$.$Execute(function () {\r\n        _Options = $Jssor$.$Extend({\r\n            $ArrowKeyNavigation: undefined,\r\n            $SlideWidth: undefined,\r\n            $SlideHeight: undefined,\r\n            $SlideshowOptions: undefined,\r\n            $CaptionSliderOptions: undefined,\r\n            $BulletNavigatorOptions: undefined,\r\n            $ArrowNavigatorOptions: undefined,\r\n            $ThumbnailNavigatorOptions: undefined\r\n        },\r\n        _Options);\r\n    });\r\n\r\n    var _PlayOrientation = _Options.$PlayOrientation & 3;\r\n    var _PlayReverse = (_Options.$PlayOrientation & 4) / -4 || 1;\r\n\r\n    var _SlideshowOptions = _Options.$SlideshowOptions;\r\n    var _CaptionSliderOptions = $Jssor$.$Extend({ $Class: $JssorCaptionSliderBase$, $PlayInMode: 1, $PlayOutMode: 1 }, _Options.$CaptionSliderOptions);\r\n    //$Jssor$.$TranslateTransitions(_CaptionSliderOptions.$CaptionTransitions); //for old transition compatibility\r\n    var _BulletNavigatorOptions = _Options.$BulletNavigatorOptions;\r\n    var _ArrowNavigatorOptions = _Options.$ArrowNavigatorOptions;\r\n    var _ThumbnailNavigatorOptions = _Options.$ThumbnailNavigatorOptions;\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_SlideshowOptions && !_SlideshowOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $SlideshowOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_Options.$CaptionSliderOptions && !_Options.$CaptionSliderOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $CaptionSliderOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_BulletNavigatorOptions && !_BulletNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $BulletNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_ArrowNavigatorOptions && !_ArrowNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $ArrowNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_ThumbnailNavigatorOptions && !_ThumbnailNavigatorOptions.$Class) {\r\n            $JssorDebug$.$Fail(\"Option $ThumbnailNavigatorOptions error, class not specified.\");\r\n        }\r\n    });\r\n\r\n    var _UISearchNoDeep = !_Options.$UISearchMode;\r\n    var _ScaleWrapper;\r\n    var _SlidesContainer = $Jssor$.$FindChild(elmt, \"slides\", _UISearchNoDeep);\r\n    var _LoadingContainer = $Jssor$.$FindChild(elmt, \"loading\", _UISearchNoDeep) || $Jssor$.$CreateDiv(document);\r\n\r\n    var _BulletNavigatorContainer = $Jssor$.$FindChild(elmt, \"navigator\", _UISearchNoDeep);\r\n\r\n    var _ArrowLeft = $Jssor$.$FindChild(elmt, \"arrowleft\", _UISearchNoDeep);\r\n    var _ArrowRight = $Jssor$.$FindChild(elmt, \"arrowright\", _UISearchNoDeep);\r\n\r\n    var _ThumbnailNavigatorContainer = $Jssor$.$FindChild(elmt, \"thumbnavigator\", _UISearchNoDeep);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        //if (_BulletNavigatorOptions && !_BulletNavigatorContainer) {\r\n        //    throw new Error(\"$BulletNavigatorOptions specified but bullet navigator container (<div u=\\\"navigator\\\" ...) not defined.\");\r\n        //}\r\n        if (_BulletNavigatorContainer && !_BulletNavigatorOptions) {\r\n            throw new Error(\"Bullet navigator container defined but $BulletNavigatorOptions not specified.\");\r\n        }\r\n\r\n        //if (_ArrowNavigatorOptions) {\r\n        //    if (!_ArrowLeft) {\r\n        //        throw new Error(\"$ArrowNavigatorOptions specified, but arrowleft (<span u=\\\"arrowleft\\\" ...) not defined.\");\r\n        //    }\r\n\r\n        //    if (!_ArrowRight) {\r\n        //        throw new Error(\"$ArrowNavigatorOptions specified, but arrowright (<span u=\\\"arrowright\\\" ...) not defined.\");\r\n        //    }\r\n        //}\r\n\r\n        if ((_ArrowLeft || _ArrowRight) && !_ArrowNavigatorOptions) {\r\n            throw new Error(\"arrowleft or arrowright defined, but $ArrowNavigatorOptions not specified.\");\r\n        }\r\n\r\n        //if (_ThumbnailNavigatorOptions && !_ThumbnailNavigatorContainer) {\r\n        //    throw new Error(\"$ThumbnailNavigatorOptions specified, but thumbnail navigator container (<div u=\\\"thumbnavigator\\\" ...) not defined.\");\r\n        //}\r\n\r\n        if (_ThumbnailNavigatorContainer && !_ThumbnailNavigatorOptions) {\r\n            throw new Error(\"Thumbnail navigator container defined, but $ThumbnailNavigatorOptions not specified.\");\r\n        }\r\n    });\r\n\r\n    var _SlidesContainerWidth = $Jssor$.$CssWidth(_SlidesContainer);\r\n    var _SlidesContainerHeight = $Jssor$.$CssHeight(_SlidesContainer);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (isNaN(_SlidesContainerWidth))\r\n            $JssorDebug$.$Fail(\"Width of slides container wrong specification, it should be specified in pixel (like style='width: 600px;').\");\r\n\r\n        if (_SlidesContainerWidth == undefined)\r\n            $JssorDebug$.$Fail(\"Width of slides container not specified, it should be specified in pixel (like style='width: 600px;').\");\r\n\r\n        if (isNaN(_SlidesContainerHeight))\r\n            $JssorDebug$.$Fail(\"Height of slides container wrong specification, it should be specified in pixel (like style='height: 300px;').\");\r\n\r\n        if (_SlidesContainerHeight == undefined)\r\n            $JssorDebug$.$Fail(\"Height of slides container not specified, it should be specified in pixel (like style='height: 300px;').\");\r\n\r\n        var slidesContainerOverflow = $Jssor$.$CssOverflow(_SlidesContainer);\r\n        var slidesContainerOverflowX = $Jssor$.$Css(_SlidesContainer, \"overflowX\");\r\n        var slidesContainerOverflowY = $Jssor$.$Css(_SlidesContainer, \"overflowY\");\r\n        if (slidesContainerOverflow != \"hidden\" && (slidesContainerOverflowX != \"hidden\" || slidesContainerOverflowY != \"hidden\"))\r\n            $JssorDebug$.$Fail(\"Overflow of slides container wrong specification, it should be specified as 'hidden' (style='overflow:hidden;').\");\r\n    });\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!$Jssor$.$IsNumeric(_Options.$DisplayPieces))\r\n            $JssorDebug$.$Fail(\"Option $DisplayPieces error, it should be a numeric value and greater than or equal to 1.\");\r\n\r\n        if (_Options.$DisplayPieces < 1)\r\n            $JssorDebug$.$Fail(\"Option $DisplayPieces error, it should be greater than or equal to 1.\");\r\n\r\n        if (_Options.$DisplayPieces > 1 && _Options.$DragOrientation && _Options.$DragOrientation != _PlayOrientation)\r\n            $JssorDebug$.$Fail(\"Option $DragOrientation error, it should be 0 or the same of $PlayOrientation when $DisplayPieces is greater than 1.\");\r\n\r\n        if (!$Jssor$.$IsNumeric(_Options.$ParkingPosition))\r\n            $JssorDebug$.$Fail(\"Option $ParkingPosition error, it should be a numeric value.\");\r\n\r\n        if (_Options.$ParkingPosition && _Options.$DragOrientation && _Options.$DragOrientation != _PlayOrientation)\r\n            $JssorDebug$.$Fail(\"Option $DragOrientation error, it should be 0 or the same of $PlayOrientation when $ParkingPosition is not equal to 0.\");\r\n    });\r\n\r\n    var _StyleDef;\r\n\r\n    var _SlideElmts = [];\r\n\r\n    {\r\n        var slideElmts = $Jssor$.$Children(_SlidesContainer);\r\n        $Jssor$.$Each(slideElmts, function (slideElmt) {\r\n            if (slideElmt.tagName == \"DIV\" && !$Jssor$.$AttributeEx(slideElmt, \"u\")) {\r\n                _SlideElmts.push(slideElmt);\r\n            }\r\n            else if ($Jssor$.$IsBrowserIe9Earlier()) {\r\n                $Jssor$.$CssZIndex(slideElmt, ($Jssor$.$CssZIndex(slideElmt) || 0) + 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n        if (_SlideElmts.length < 1) {\r\n            $JssorDebug$.$Error(\"Slides html code definition error, there must be at least 1 slide to initialize a slider.\");\r\n        }\r\n    });\r\n\r\n    var _SlideItemCreatedCount = 0; //for debug only\r\n    var _SlideItemReleasedCount = 0;    //for debug only\r\n\r\n    var _PreviousSlideIndex;\r\n    var _CurrentSlideIndex = -1;\r\n    var _TempSlideIndex;\r\n    var _PrevSlideItem;\r\n    var _CurrentSlideItem;\r\n    var _SlideCount = _SlideElmts.length;\r\n\r\n    var _SlideWidth = _Options.$SlideWidth || _SlidesContainerWidth;\r\n    var _SlideHeight = _Options.$SlideHeight || _SlidesContainerHeight;\r\n\r\n    var _SlideSpacing = _Options.$SlideSpacing;\r\n    var _StepLengthX = _SlideWidth + _SlideSpacing;\r\n    var _StepLengthY = _SlideHeight + _SlideSpacing;\r\n    var _StepLength = (_PlayOrientation & 1) ? _StepLengthX : _StepLengthY;\r\n    var _DisplayPieces = Math.min(_Options.$DisplayPieces, _SlideCount);\r\n\r\n    var _SlideshowPanel;\r\n    var _CurrentBoardIndex = 0;\r\n    var _DragOrientation;\r\n    var _DragOrientationRegistered;\r\n    var _DragInvalid;\r\n\r\n    var _Navigators = [];\r\n    var _BulletNavigator;\r\n    var _ArrowNavigator;\r\n    var _ThumbnailNavigator;\r\n\r\n    var _ShowLink;\r\n\r\n    var _Frozen;\r\n    var _AutoPlay;\r\n    var _AutoPlaySteps = _Options.$AutoPlaySteps;\r\n    var _HoverToPause = _Options.$PauseOnHover;\r\n    var _AutoPlayInterval = _Options.$AutoPlayInterval;\r\n    var _SlideDuration = _Options.$SlideDuration;\r\n\r\n    var _SlideshowRunnerClass;\r\n    var _TransitionsOrder;\r\n\r\n    var _SlideshowEnabled;\r\n    var _ParkingPosition;\r\n    var _CarouselEnabled = _DisplayPieces < _SlideCount;\r\n    var _Loop = _CarouselEnabled ? _Options.$Loop : 0;\r\n\r\n    var _DragEnabled;\r\n    var _LastDragSucceded;\r\n\r\n    var _NotOnHover = 1;   //0 Hovering, 1 Not hovering\r\n\r\n    //Variable Definition\r\n    var _IsSliding;\r\n    var _IsDragging;\r\n    var _LoadingTicket;\r\n\r\n    //The X position of mouse/touch when a drag start\r\n    var _DragStartMouseX = 0;\r\n    //The Y position of mouse/touch when a drag start\r\n    var _DragStartMouseY = 0;\r\n    var _DragOffsetTotal;\r\n    var _DragOffsetLastTime;\r\n    var _DragIndexAdjust;\r\n\r\n    var _Carousel;\r\n    var _Conveyor;\r\n    var _Slideshow;\r\n    var _CarouselPlayer;\r\n    var _SlideContainer = new SlideContainer();\r\n    var _ScaleRatio;\r\n\r\n    //$JssorSlider$ Constructor\r\n    {\r\n        _AutoPlay = _Options.$AutoPlay;\r\n        _SelfSlider.$Options = options;\r\n\r\n        AdjustSlidesContainerSize();\r\n\r\n        $Jssor$.$Attribute(elmt, \"jssor-slider\", true);\r\n\r\n        $Jssor$.$CssZIndex(_SlidesContainer, $Jssor$.$CssZIndex(_SlidesContainer) || 0);\r\n        $Jssor$.$CssPosition(_SlidesContainer, \"absolute\");\r\n        _SlideshowPanel = $Jssor$.$CloneNode(_SlidesContainer, true);\r\n        $Jssor$.$InsertBefore(_SlideshowPanel, _SlidesContainer);\r\n\r\n        if (_SlideshowOptions) {\r\n            _ShowLink = _SlideshowOptions.$ShowLink;\r\n            _SlideshowRunnerClass = _SlideshowOptions.$Class;\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (!_SlideshowOptions.$Transitions || !_SlideshowOptions.$Transitions.length) {\r\n                    $JssorDebug$.$Error(\"Invalid '$SlideshowOptions', no '$Transitions' specified.\");\r\n                }\r\n            });\r\n\r\n            _SlideshowEnabled = _DisplayPieces == 1 && _SlideCount > 1 && _SlideshowRunnerClass && (!$Jssor$.$IsBrowserIE() || $Jssor$.$BrowserVersion() >= 8);\r\n        }\r\n\r\n        _ParkingPosition = (_SlideshowEnabled || _DisplayPieces >= _SlideCount || !(_Loop & 1)) ? 0 : _Options.$ParkingPosition;\r\n\r\n        _DragEnabled = ((_DisplayPieces > 1 || _ParkingPosition) ? _PlayOrientation : -1) & _Options.$DragOrientation;\r\n\r\n        //SlideBoard\r\n        var _SlideboardElmt = _SlidesContainer;\r\n        var _SlideItems = [];\r\n\r\n        var _SlideshowRunner;\r\n        var _LinkContainer;\r\n\r\n        var _Device = $Jssor$.$Device();\r\n        var _IsTouchDevice = _Device.$Touchable;\r\n\r\n        var _LastTimeMoveByDrag;\r\n        var _Position_OnFreeze;\r\n        var _CarouselPlaying_OnFreeze;\r\n        var _PlayToPosition_OnFreeze;\r\n        var _PositionToGoByDrag;\r\n\r\n        //SlideBoard Constructor\r\n        {\r\n            if (_Device.$TouchActionAttr) {\r\n                $Jssor$.$Css(_SlideboardElmt, _Device.$TouchActionAttr, [null, \"pan-y\", \"pan-x\", \"none\"][_DragEnabled] || \"\");\r\n            }\r\n\r\n            _Slideshow = new Slideshow();\r\n\r\n            if (_SlideshowEnabled)\r\n                _SlideshowRunner = new _SlideshowRunnerClass(_SlideContainer, _SlideWidth, _SlideHeight, _SlideshowOptions, _IsTouchDevice);\r\n\r\n            $Jssor$.$AppendChild(_SlideshowPanel, _Slideshow.$Wrapper);\r\n            $Jssor$.$CssOverflow(_SlidesContainer, \"hidden\");\r\n\r\n            //link container\r\n            {\r\n                _LinkContainer = CreatePanel();\r\n                $Jssor$.$Css(_LinkContainer, \"backgroundColor\", \"#000\");\r\n                $Jssor$.$CssOpacity(_LinkContainer, 0);\r\n                $Jssor$.$InsertBefore(_LinkContainer, _SlideboardElmt.firstChild, _SlideboardElmt);\r\n            }\r\n\r\n            for (var i = 0; i < _SlideElmts.length; i++) {\r\n                var slideElmt = _SlideElmts[i];\r\n                var slideItem = new SlideItem(slideElmt, i);\r\n                _SlideItems.push(slideItem);\r\n            }\r\n\r\n            $Jssor$.$HideElement(_LoadingContainer);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_LoadingContainer, \"debug-id\", \"loading-container\");\r\n            });\r\n\r\n            _Carousel = new Carousel();\r\n            _CarouselPlayer = new CarouselPlayer(_Carousel, _Slideshow);\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                $Jssor$.$Attribute(_SlideboardElmt, \"debug-id\", \"slide-board\");\r\n            });\r\n\r\n            if (_DragEnabled) {\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"mousedown\", OnDragStart);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"touchstart\", OnTouchStart);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"dragstart\", PreventDragSelectionEvent);\r\n                $Jssor$.$AddEvent(_SlidesContainer, \"selectstart\", PreventDragSelectionEvent);\r\n                $Jssor$.$AddEvent(document, \"mouseup\", OnDragEnd);\r\n                $Jssor$.$AddEvent(document, \"touchend\", OnDragEnd);\r\n                $Jssor$.$AddEvent(document, \"touchcancel\", OnDragEnd);\r\n                $Jssor$.$AddEvent(window, \"blur\", OnDragEnd);\r\n            }\r\n        }\r\n        //SlideBoard\r\n\r\n        _HoverToPause &= (_IsTouchDevice ? 10 : 5);\r\n\r\n        //Bullet Navigator\r\n        if (_BulletNavigatorContainer && _BulletNavigatorOptions) {\r\n            _BulletNavigator = new _BulletNavigatorOptions.$Class(_BulletNavigatorContainer, _BulletNavigatorOptions, OriginalWidth(), OriginalHeight());\r\n            _Navigators.push(_BulletNavigator);\r\n        }\r\n\r\n        //Arrow Navigator\r\n        if (_ArrowNavigatorOptions && _ArrowLeft && _ArrowRight) {\r\n            _ArrowNavigatorOptions.$Loop = _Loop;\r\n            _ArrowNavigatorOptions.$DisplayPieces = _DisplayPieces;\r\n            _ArrowNavigator = new _ArrowNavigatorOptions.$Class(_ArrowLeft, _ArrowRight, _ArrowNavigatorOptions, OriginalWidth(), OriginalHeight());\r\n            _Navigators.push(_ArrowNavigator);\r\n        }\r\n\r\n        //Thumbnail Navigator\r\n        if (_ThumbnailNavigatorContainer && _ThumbnailNavigatorOptions) {\r\n            _ThumbnailNavigatorOptions.$StartIndex = _Options.$StartIndex;\r\n            _ThumbnailNavigator = new _ThumbnailNavigatorOptions.$Class(_ThumbnailNavigatorContainer, _ThumbnailNavigatorOptions);\r\n            _Navigators.push(_ThumbnailNavigator);\r\n        }\r\n\r\n        $Jssor$.$Each(_Navigators, function (navigator) {\r\n            navigator.$Reset(_SlideCount, _SlideItems, _LoadingContainer);\r\n            navigator.$On($JssorNavigatorEvents$.$NAVIGATIONREQUEST, NavigationClickHandler);\r\n        });\r\n\r\n        Scale(OriginalWidth());\r\n\r\n        $Jssor$.$AddEvent(_SlidesContainer, \"click\", SlidesClickEventHandler);\r\n        $Jssor$.$AddEvent(elmt, \"mouseout\", $Jssor$.$MouseOverOutFilter(MainContainerMouseLeaveEventHandler, elmt));\r\n        $Jssor$.$AddEvent(elmt, \"mouseover\", $Jssor$.$MouseOverOutFilter(MainContainerMouseEnterEventHandler, elmt));\r\n\r\n        ShowNavigators();\r\n\r\n        //Keyboard Navigation\r\n        if (_Options.$ArrowKeyNavigation) {\r\n            $Jssor$.$AddEvent(document, \"keydown\", function (e) {\r\n                if (e.keyCode == 37/*$JssorKeyCode$.$LEFT*/) {\r\n                    //Arrow Left\r\n                    PlayToOffset(-1);\r\n                }\r\n                else if (e.keyCode == 39/*$JssorKeyCode$.$RIGHT*/) {\r\n                    //Arrow Right\r\n                    PlayToOffset(1);\r\n                }\r\n            });\r\n        }\r\n\r\n        var startPosition = _Options.$StartIndex;\r\n        if (!(_Loop & 1)) {\r\n            startPosition = Math.max(0, Math.min(startPosition, _SlideCount - _DisplayPieces));\r\n        }\r\n        _CarouselPlayer.$PlayCarousel(startPosition, startPosition, 0);\r\n    }\r\n};\r\nvar $JssorSlideo$ = window.$JssorSlideo$ = $JssorSlider$;\r\n\r\n$JssorSlider$.$EVT_CLICK = 21;\r\n$JssorSlider$.$EVT_DRAG_START = 22;\r\n$JssorSlider$.$EVT_DRAG_END = 23;\r\n$JssorSlider$.$EVT_SWIPE_START = 24;\r\n$JssorSlider$.$EVT_SWIPE_END = 25;\r\n\r\n$JssorSlider$.$EVT_LOAD_START = 26;\r\n$JssorSlider$.$EVT_LOAD_END = 27;\r\n$JssorSlider$.$EVT_FREEZE = 28;\r\n\r\n$JssorSlider$.$EVT_POSITION_CHANGE = 202;\r\n$JssorSlider$.$EVT_PARK = 203;\r\n\r\n$JssorSlider$.$EVT_SLIDESHOW_START = 206;\r\n$JssorSlider$.$EVT_SLIDESHOW_END = 207;\r\n\r\n$JssorSlider$.$EVT_PROGRESS_CHANGE = 208;\r\n$JssorSlider$.$EVT_STATE_CHANGE = 209;\r\n$JssorSlider$.$EVT_ROLLBACK_START = 210;\r\n$JssorSlider$.$EVT_ROLLBACK_END = 211;\r\n\r\n//(function ($) {\r\n//    jQuery.fn.jssorSlider = function (options) {\r\n//        return this.each(function () {\r\n//            return $(this).data('jssorSlider') || $(this).data('jssorSlider', new $JssorSlider$(this, options));\r\n//        });\r\n//    };\r\n//})(jQuery);\r\n\r\n//window.jQuery && (jQuery.fn.jssorSlider = function (options) {\r\n//    return this.each(function () {\r\n//        return jQuery(this).data('jssorSlider') || jQuery(this).data('jssorSlider', new $JssorSlider$(this, options));\r\n//    });\r\n//});\r\n\r\n//$JssorBulletNavigator$\r\nvar $JssorNavigatorEvents$ = {\r\n    $NAVIGATIONREQUEST: 1,\r\n    $INDEXCHANGE: 2,\r\n    $RESET: 3\r\n};\r\n\r\nvar $JssorBulletNavigator$ = window.$JssorBulletNavigator$ = function (elmt, options, containerWidth, containerHeight) {\r\n    var self = this;\r\n    $JssorObject$.call(self);\r\n\r\n    elmt = $Jssor$.$GetElement(elmt);\r\n\r\n    var _Count;\r\n    var _Length;\r\n    var _Width;\r\n    var _Height;\r\n    var _CurrentIndex;\r\n    var _CurrentInnerIndex = 0;\r\n    var _Options;\r\n    var _Steps;\r\n    var _Lanes;\r\n    var _SpacingX;\r\n    var _SpacingY;\r\n    var _Orientation;\r\n    var _ItemPrototype;\r\n    var _PrototypeWidth;\r\n    var _PrototypeHeight;\r\n\r\n    var _ButtonElements = [];\r\n    var _Buttons = [];\r\n\r\n    function Highlight(index) {\r\n        if (index != -1)\r\n            _Buttons[index].$Selected(index == _CurrentInnerIndex);\r\n    }\r\n\r\n    function OnNavigationRequest(index) {\r\n        self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, index * _Steps);\r\n    }\r\n\r\n    self.$Elmt = elmt;\r\n    self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    self.$SetCurrentIndex = function (index) {\r\n        if (index != _CurrentIndex) {\r\n            var lastInnerIndex = _CurrentInnerIndex;\r\n            var innerIndex = Math.floor(index / _Steps);\r\n            _CurrentInnerIndex = innerIndex;\r\n            _CurrentIndex = index;\r\n\r\n            Highlight(lastInnerIndex);\r\n            Highlight(innerIndex);\r\n\r\n            //self.$TriggerEvent($JssorNavigatorEvents$.$INDEXCHANGE, index);\r\n        }\r\n    };\r\n\r\n    self.$Show = function (hide) {\r\n        $Jssor$.$ShowElement(elmt, hide);\r\n    };\r\n\r\n    var _Located;\r\n    self.$Relocate = function (containerWidth, containerHeight) {\r\n        if (!_Located || _Options.$Scale == false) {\r\n            var containerWidth = $Jssor$.$ParentNode(elmt).clientWidth;\r\n            var containerHeight = $Jssor$.$ParentNode(elmt).clientHeight;\r\n\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(elmt, (containerWidth - _Width) / 2);\r\n            }\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(elmt, (containerHeight - _Height) / 2);\r\n            }\r\n\r\n            _Located = true;\r\n        }\r\n    };\r\n\r\n    var _Initialized;\r\n    self.$Reset = function (length) {\r\n        if (!_Initialized) {\r\n            _Length = length;\r\n            _Count = Math.ceil(length / _Steps);\r\n            _CurrentInnerIndex = 0;\r\n\r\n            var itemOffsetX = _PrototypeWidth + _SpacingX;\r\n            var itemOffsetY = _PrototypeHeight + _SpacingY;\r\n\r\n            var maxIndex = Math.ceil(_Count / _Lanes) - 1;\r\n\r\n            _Width = _PrototypeWidth + itemOffsetX * (!_Orientation ? maxIndex : _Lanes - 1);\r\n            _Height = _PrototypeHeight + itemOffsetY * (_Orientation ? maxIndex : _Lanes - 1);\r\n\r\n            $Jssor$.$CssWidth(elmt, _Width);\r\n            $Jssor$.$CssHeight(elmt, _Height);\r\n\r\n            for (var buttonIndex = 0; buttonIndex < _Count; buttonIndex++) {\r\n\r\n                var numberDiv = $Jssor$.$CreateSpan();\r\n                $Jssor$.$InnerText(numberDiv, buttonIndex + 1);\r\n\r\n                var div = $Jssor$.$BuildElement(_ItemPrototype, \"numbertemplate\", numberDiv, true);\r\n                $Jssor$.$CssPosition(div, \"absolute\");\r\n\r\n                var columnIndex = buttonIndex % (maxIndex + 1);\r\n                $Jssor$.$CssLeft(div, !_Orientation ? itemOffsetX * columnIndex : buttonIndex % _Lanes * itemOffsetX);\r\n                $Jssor$.$CssTop(div, _Orientation ? itemOffsetY * columnIndex : Math.floor(buttonIndex / (maxIndex + 1)) * itemOffsetY);\r\n\r\n                $Jssor$.$AppendChild(elmt, div);\r\n                _ButtonElements[buttonIndex] = div;\r\n\r\n                if (_Options.$ActionMode & 1)\r\n                    $Jssor$.$AddEvent(div, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, buttonIndex));\r\n\r\n                if (_Options.$ActionMode & 2)\r\n                    $Jssor$.$AddEvent(div, \"mouseover\", $Jssor$.$MouseOverOutFilter($Jssor$.$CreateCallback(null, OnNavigationRequest, buttonIndex), div));\r\n\r\n                _Buttons[buttonIndex] = $Jssor$.$Buttonize(div);\r\n            }\r\n\r\n            //self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n            _Initialized = true;\r\n        }\r\n    };\r\n\r\n    //JssorBulletNavigator Constructor\r\n    {\r\n        self.$Options = _Options = $Jssor$.$Extend({\r\n            $SpacingX: 0,\r\n            $SpacingY: 0,\r\n            $Orientation: 1,\r\n            $ActionMode: 1\r\n        }, options);\r\n\r\n        //Sodo statement for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            _Options = $Jssor$.$Extend({\r\n                $Steps: undefined,\r\n                $Lanes: undefined\r\n            }, _Options);\r\n        });\r\n\r\n        _ItemPrototype = $Jssor$.$FindChild(elmt, \"prototype\");\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_ItemPrototype)\r\n                $JssorDebug$.$Fail(\"Navigator item prototype not defined.\");\r\n\r\n            if (isNaN($Jssor$.$CssWidth(_ItemPrototype))) {\r\n                $JssorDebug$.$Fail(\"Width of 'navigator item prototype' not specified.\");\r\n            }\r\n\r\n            if (isNaN($Jssor$.$CssHeight(_ItemPrototype))) {\r\n                $JssorDebug$.$Fail(\"Height of 'navigator item prototype' not specified.\");\r\n            }\r\n        });\r\n\r\n        _PrototypeWidth = $Jssor$.$CssWidth(_ItemPrototype);\r\n        _PrototypeHeight = $Jssor$.$CssHeight(_ItemPrototype);\r\n\r\n        $Jssor$.$RemoveElement(_ItemPrototype, elmt);\r\n\r\n        _Steps = _Options.$Steps || 1;\r\n        _Lanes = _Options.$Lanes || 1;\r\n        _SpacingX = _Options.$SpacingX;\r\n        _SpacingY = _Options.$SpacingY;\r\n        _Orientation = _Options.$Orientation - 1;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(elmt, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\nvar $JssorArrowNavigator$ = window.$JssorArrowNavigator$ = function (arrowLeft, arrowRight, options, containerWidth, containerHeight) {\r\n    var self = this;\r\n    $JssorObject$.call(self);\r\n\r\n    $JssorDebug$.$Execute(function () {\r\n\r\n        if (!arrowLeft)\r\n            $JssorDebug$.$Fail(\"Option '$ArrowNavigatorOptions' spepcified, but UI 'arrowleft' not defined. Define 'arrowleft' to enable direct navigation, or remove option '$ArrowNavigatorOptions' to disable direct navigation.\");\r\n\r\n        if (!arrowRight)\r\n            $JssorDebug$.$Fail(\"Option '$ArrowNavigatorOptions' spepcified, but UI 'arrowright' not defined. Define 'arrowright' to enable direct navigation, or remove option '$ArrowNavigatorOptions' to disable direct navigation.\");\r\n\r\n        if (isNaN($Jssor$.$CssWidth(arrowLeft))) {\r\n            $JssorDebug$.$Fail(\"Width of 'arrow left' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssWidth(arrowRight))) {\r\n            $JssorDebug$.$Fail(\"Width of 'arrow right' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssHeight(arrowLeft))) {\r\n            $JssorDebug$.$Fail(\"Height of 'arrow left' not specified.\");\r\n        }\r\n\r\n        if (isNaN($Jssor$.$CssHeight(arrowRight))) {\r\n            $JssorDebug$.$Fail(\"Height of 'arrow right' not specified.\");\r\n        }\r\n    });\r\n\r\n    var _Hide;\r\n    var _Length;\r\n    var _CurrentIndex;\r\n    var _Options;\r\n    var _Steps;\r\n    var _ArrowWidth = $Jssor$.$CssWidth(arrowLeft);\r\n    var _ArrowHeight = $Jssor$.$CssHeight(arrowLeft);\r\n\r\n    function OnNavigationRequest(steps) {\r\n        self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, steps, true);\r\n    }\r\n\r\n    function ShowArrows(hide) {\r\n        $Jssor$.$ShowElement(arrowLeft, hide || !options.$Loop && _CurrentIndex == 0);\r\n        $Jssor$.$ShowElement(arrowRight, hide || !options.$Loop && _CurrentIndex >= _Length - options.$DisplayPieces);\r\n\r\n        _Hide = hide;\r\n    }\r\n\r\n    self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    self.$SetCurrentIndex = function (index, virtualIndex, temp) {\r\n        if (temp) {\r\n            _CurrentIndex = virtualIndex;\r\n        }\r\n        else {\r\n            _CurrentIndex = index;\r\n\r\n            ShowArrows(_Hide);\r\n        }\r\n        //self.$TriggerEvent($JssorNavigatorEvents$.$INDEXCHANGE, index);\r\n    };\r\n\r\n    self.$Show = ShowArrows;\r\n\r\n    var _Located;\r\n    self.$Relocate = function (conainerWidth, containerHeight) {\r\n        if (!_Located || _Options.$Scale == false) {\r\n\r\n            var containerWidth = $Jssor$.$ParentNode(arrowLeft).clientWidth;\r\n            var containerHeight = $Jssor$.$ParentNode(arrowLeft).clientHeight;\r\n\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(arrowLeft, (containerWidth - _ArrowWidth) / 2);\r\n                $Jssor$.$CssLeft(arrowRight, (containerWidth - _ArrowWidth) / 2);\r\n            }\r\n\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(arrowLeft, (containerHeight - _ArrowHeight) / 2);\r\n                $Jssor$.$CssTop(arrowRight, (containerHeight - _ArrowHeight) / 2);\r\n            }\r\n\r\n            _Located = true;\r\n        }\r\n    };\r\n\r\n    var _Initialized;\r\n    self.$Reset = function (length) {\r\n        _Length = length;\r\n        _CurrentIndex = 0;\r\n\r\n        if (!_Initialized) {\r\n\r\n            $Jssor$.$AddEvent(arrowLeft, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, -_Steps));\r\n            $Jssor$.$AddEvent(arrowRight, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, _Steps));\r\n\r\n            $Jssor$.$Buttonize(arrowLeft);\r\n            $Jssor$.$Buttonize(arrowRight);\r\n\r\n            _Initialized = true;\r\n        }\r\n\r\n        //self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n    };\r\n\r\n    //JssorArrowNavigator Constructor\r\n    {\r\n        self.$Options = _Options = $Jssor$.$Extend({\r\n            $Steps: 1\r\n        }, options);\r\n\r\n        _Steps = _Options.$Steps;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(arrowLeft, \"noscale\", true);\r\n            $Jssor$.$Attribute(arrowRight, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\n//$JssorThumbnailNavigator$\r\nvar $JssorThumbnailNavigator$ = window.$JssorThumbnailNavigator$ = function (elmt, options) {\r\n    var _Self = this;\r\n    var _Length;\r\n    var _Count;\r\n    var _CurrentIndex;\r\n    var _Options;\r\n    var _NavigationItems = [];\r\n\r\n    var _Width;\r\n    var _Height;\r\n    var _Lanes;\r\n    var _SpacingX;\r\n    var _SpacingY;\r\n    var _PrototypeWidth;\r\n    var _PrototypeHeight;\r\n    var _DisplayPieces;\r\n\r\n    var _Slider;\r\n    var _CurrentMouseOverIndex = -1;\r\n\r\n    var _SlidesContainer;\r\n    var _ThumbnailPrototype;\r\n\r\n    $JssorObject$.call(_Self);\r\n    elmt = $Jssor$.$GetElement(elmt);\r\n\r\n    function NavigationItem(item, index) {\r\n        var self = this;\r\n        var _Wrapper;\r\n        var _Button;\r\n        var _Thumbnail;\r\n\r\n        function Highlight(mouseStatus) {\r\n            _Button.$Selected(_CurrentIndex == index);\r\n        }\r\n\r\n        function OnNavigationRequest(byMouseOver, event) {\r\n            if (byMouseOver || !_Slider.$LastDragSucceded()) {\r\n                //var tail = _Lanes - index % _Lanes;\r\n                //var slideVirtualIndex = _Slider.$GetVirtualIndex((index + tail) / _Lanes - 1);\r\n                //var itemVirtualIndex = slideVirtualIndex * _Lanes + _Lanes - tail;\r\n                //_Self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, itemVirtualIndex);\r\n\r\n                _Self.$TriggerEvent($JssorNavigatorEvents$.$NAVIGATIONREQUEST, index);\r\n            }\r\n\r\n            //$JssorDebug$.$Log(\"navigation request\");\r\n        }\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            self.$Wrapper = undefined;\r\n        });\r\n\r\n        self.$Index = index;\r\n\r\n        self.$Highlight = Highlight;\r\n\r\n        //NavigationItem Constructor\r\n        {\r\n            _Thumbnail = item.$Thumb || item.$Image || $Jssor$.$CreateDiv();\r\n            self.$Wrapper = _Wrapper = $Jssor$.$BuildElement(_ThumbnailPrototype, \"thumbnailtemplate\", _Thumbnail, true);\r\n\r\n            _Button = $Jssor$.$Buttonize(_Wrapper);\r\n            if (_Options.$ActionMode & 1)\r\n                $Jssor$.$AddEvent(_Wrapper, \"click\", $Jssor$.$CreateCallback(null, OnNavigationRequest, 0));\r\n            if (_Options.$ActionMode & 2)\r\n                $Jssor$.$AddEvent(_Wrapper, \"mouseover\", $Jssor$.$MouseOverOutFilter($Jssor$.$CreateCallback(null, OnNavigationRequest, 1), _Wrapper));\r\n        }\r\n    }\r\n\r\n    _Self.$GetCurrentIndex = function () {\r\n        return _CurrentIndex;\r\n    };\r\n\r\n    _Self.$SetCurrentIndex = function (index, virtualIndex, temp) {\r\n        var oldIndex = _CurrentIndex;\r\n        _CurrentIndex = index;\r\n        if (oldIndex != -1)\r\n            _NavigationItems[oldIndex].$Highlight();\r\n        _NavigationItems[index].$Highlight();\r\n\r\n        if (!temp) {\r\n            _Slider.$PlayTo(_Slider.$GetVirtualIndex(Math.floor(virtualIndex / _Lanes)));\r\n        }\r\n    };\r\n\r\n    _Self.$Show = function (hide) {\r\n        $Jssor$.$ShowElement(elmt, hide);\r\n    };\r\n\r\n    _Self.$Relocate = $Jssor$.$EmptyFunction;\r\n\r\n    var _Initialized;\r\n    _Self.$Reset = function (length, items, loadingContainer) {\r\n        if (!_Initialized) {\r\n            _Length = length;\r\n            _Count = Math.ceil(_Length / _Lanes);\r\n            _CurrentIndex = -1;\r\n            _DisplayPieces = Math.min(_DisplayPieces, items.length);\r\n\r\n            var horizontal = _Options.$Orientation & 1;\r\n\r\n            var slideWidth = _PrototypeWidth + (_PrototypeWidth + _SpacingX) * (_Lanes - 1) * (1 - horizontal);\r\n            var slideHeight = _PrototypeHeight + (_PrototypeHeight + _SpacingY) * (_Lanes - 1) * horizontal;\r\n\r\n            var slidesContainerWidth = slideWidth + (slideWidth + _SpacingX) * (_DisplayPieces - 1) * horizontal;\r\n            var slidesContainerHeight = slideHeight + (slideHeight + _SpacingY) * (_DisplayPieces - 1) * (1 - horizontal);\r\n\r\n            $Jssor$.$CssPosition(_SlidesContainer, \"absolute\");\r\n            $Jssor$.$CssOverflow(_SlidesContainer, \"hidden\");\r\n            if (_Options.$AutoCenter & 1) {\r\n                $Jssor$.$CssLeft(_SlidesContainer, (_Width - slidesContainerWidth) / 2);\r\n            }\r\n            if (_Options.$AutoCenter & 2) {\r\n                $Jssor$.$CssTop(_SlidesContainer, (_Height - slidesContainerHeight) / 2);\r\n            }\r\n            //$JssorDebug$.$Execute(function () {\r\n            //    if (!_Options.$AutoCenter) {\r\n            //        var slidesContainerTop = $Jssor$.$CssTop(_SlidesContainer);\r\n            //        var slidesContainerLeft = $Jssor$.$CssLeft(_SlidesContainer);\r\n\r\n            //        if (isNaN(slidesContainerTop)) {\r\n            //            $JssorDebug$.$Fail(\"Position 'top' wrong specification of thumbnail navigator slides container (<div u=\\\"thumbnavigator\\\">...<div u=\\\"slides\\\">), \\r\\nwhen option $ThumbnailNavigatorOptions.$AutoCenter set to 0, it should be specified in pixel (like <div u=\\\"slides\\\" style=\\\"top: 0px;\\\">)\");\r\n            //        }\r\n\r\n            //        if (isNaN(slidesContainerLeft)) {\r\n            //            $JssorDebug$.$Fail(\"Position 'left' wrong specification of thumbnail navigator slides container (<div u=\\\"thumbnavigator\\\">...<div u=\\\"slides\\\">), \\r\\nwhen option $ThumbnailNavigatorOptions.$AutoCenter set to 0, it should be specified in pixel (like <div u=\\\"slides\\\" style=\\\"left: 0px;\\\">)\");\r\n            //        }\r\n            //    }\r\n            //});\r\n            $Jssor$.$CssWidth(_SlidesContainer, slidesContainerWidth);\r\n            $Jssor$.$CssHeight(_SlidesContainer, slidesContainerHeight);\r\n\r\n            var slideItemElmts = [];\r\n            $Jssor$.$Each(items, function (item, index) {\r\n                var navigationItem = new NavigationItem(item, index);\r\n                var navigationItemWrapper = navigationItem.$Wrapper;\r\n\r\n                var columnIndex = Math.floor(index / _Lanes);\r\n                var laneIndex = index % _Lanes;\r\n\r\n                $Jssor$.$CssLeft(navigationItemWrapper, (_PrototypeWidth + _SpacingX) * laneIndex * (1 - horizontal));\r\n                $Jssor$.$CssTop(navigationItemWrapper, (_PrototypeHeight + _SpacingY) * laneIndex * horizontal);\r\n\r\n                if (!slideItemElmts[columnIndex]) {\r\n                    slideItemElmts[columnIndex] = $Jssor$.$CreateDiv();\r\n                    $Jssor$.$AppendChild(_SlidesContainer, slideItemElmts[columnIndex]);\r\n                }\r\n\r\n                $Jssor$.$AppendChild(slideItemElmts[columnIndex], navigationItemWrapper);\r\n\r\n                _NavigationItems.push(navigationItem);\r\n            });\r\n\r\n            var thumbnailSliderOptions = $Jssor$.$Extend({\r\n                $HWA: false,\r\n                $AutoPlay: false,\r\n                $NaviQuitDrag: false,\r\n                $SlideWidth: slideWidth,\r\n                $SlideHeight: slideHeight,\r\n                $SlideSpacing: _SpacingX * horizontal + _SpacingY * (1 - horizontal),\r\n                $MinDragOffsetToSlide: 12,\r\n                $SlideDuration: 200,\r\n                $PauseOnHover: 1,\r\n                $PlayOrientation: _Options.$Orientation,\r\n                $DragOrientation: _Options.$DisableDrag ? 0 : _Options.$Orientation\r\n            }, _Options);\r\n\r\n            _Slider = new $JssorSlider$(elmt, thumbnailSliderOptions);\r\n\r\n            _Initialized = true;\r\n        }\r\n\r\n        //_Self.$TriggerEvent($JssorNavigatorEvents$.$RESET);\r\n    };\r\n\r\n    //JssorThumbnailNavigator Constructor\r\n    {\r\n        _Self.$Options = _Options = $Jssor$.$Extend({\r\n            $SpacingX: 3,\r\n            $SpacingY: 3,\r\n            $DisplayPieces: 1,\r\n            $Orientation: 1,\r\n            $AutoCenter: 3,\r\n            $ActionMode: 1\r\n        }, options);\r\n\r\n        //going to use $Rows instead of $Lanes\r\n        if (_Options.$Rows != undefined)\r\n            _Options.$Lanes = _Options.$Rows;\r\n\r\n        //Sodo statement for development time intellisence only\r\n        $JssorDebug$.$Execute(function () {\r\n            _Options = $Jssor$.$Extend({\r\n                $Lanes: undefined,\r\n                $Width: undefined,\r\n                $Height: undefined\r\n            }, _Options);\r\n        });\r\n\r\n        _Width = $Jssor$.$CssWidth(elmt);\r\n        _Height = $Jssor$.$CssHeight(elmt);\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_Width)\r\n                $JssorDebug$.$Fail(\"width of 'thumbnavigator' container not specified.\");\r\n            if (!_Height)\r\n                $JssorDebug$.$Fail(\"height of 'thumbnavigator' container not specified.\");\r\n        });\r\n\r\n        _SlidesContainer = $Jssor$.$FindChild(elmt, \"slides\", true);\r\n        _ThumbnailPrototype = $Jssor$.$FindChild(_SlidesContainer, \"prototype\");\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            if (!_ThumbnailPrototype)\r\n                $JssorDebug$.$Fail(\"prototype of 'thumbnavigator' not defined.\");\r\n        });\r\n\r\n        _PrototypeWidth = $Jssor$.$CssWidth(_ThumbnailPrototype);\r\n        _PrototypeHeight = $Jssor$.$CssHeight(_ThumbnailPrototype);\r\n\r\n        $Jssor$.$RemoveElement(_ThumbnailPrototype, _SlidesContainer);\r\n\r\n        _Lanes = _Options.$Lanes || 1;\r\n        _SpacingX = _Options.$SpacingX;\r\n        _SpacingY = _Options.$SpacingY;\r\n        _DisplayPieces = _Options.$DisplayPieces;\r\n\r\n        if (_Options.$Scale == false) {\r\n            $Jssor$.$Attribute(elmt, \"noscale\", true);\r\n        }\r\n    }\r\n};\r\n\r\n//$JssorCaptionSliderBase$\r\nfunction $JssorCaptionSliderBase$() {\r\n    $JssorAnimator$.call(this, 0, 0);\r\n    this.$Revert = $Jssor$.$EmptyFunction;\r\n}\r\n\r\nvar $JssorCaptionSlider$ = window.$JssorCaptionSlider$ = function (container, captionSlideOptions, playIn) {\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!captionSlideOptions.$CaptionTransitions) {\r\n            $JssorDebug$.$Error(\"'$CaptionSliderOptions' option error, '$CaptionSliderOptions.$CaptionTransitions' not specified.\");\r\n        }\r\n    });\r\n\r\n    var _Self = this;\r\n    var _ImmediateOutCaptionHanger;\r\n    var _PlayMode = playIn ? captionSlideOptions.$PlayInMode : captionSlideOptions.$PlayOutMode;\r\n\r\n    var _CaptionTransitions = captionSlideOptions.$CaptionTransitions;\r\n    var _CaptionTuningFetcher = { $Transition: \"t\", $Delay: \"d\", $Duration: \"du\", x: \"x\", y: \"y\", $Rotate: \"r\", $Zoom: \"z\", $Opacity: \"f\", $BeginTime: \"b\" };\r\n    var _CaptionTuningTransfer = {\r\n        $Default: function (value, tuningValue) {\r\n            if (!isNaN(tuningValue.$Value))\r\n                value = tuningValue.$Value;\r\n            else\r\n                value *= tuningValue.$Percent;\r\n\r\n            return value;\r\n        },\r\n        $Opacity: function (value, tuningValue) {\r\n            return this.$Default(value - 1, tuningValue);\r\n        }\r\n    };\r\n    _CaptionTuningTransfer.$Zoom = _CaptionTuningTransfer.$Opacity;\r\n\r\n    $JssorAnimator$.call(_Self, 0, 0);\r\n\r\n    function GetCaptionItems(element, level) {\r\n\r\n        var itemsToPlay = [];\r\n        var lastTransitionName;\r\n        var namedTransitions = [];\r\n        var namedTransitionOrders = [];\r\n\r\n        function FetchRawTransition(captionElmt, index) {\r\n            var rawTransition = {};\r\n\r\n            $Jssor$.$Each(_CaptionTuningFetcher, function (fetchAttribute, fetchProperty) {\r\n                var attributeValue = $Jssor$.$AttributeEx(captionElmt, fetchAttribute + (index || \"\"));\r\n                if (attributeValue) {\r\n                    var propertyValue = {};\r\n\r\n                    if (fetchAttribute == \"t\") {\r\n                        propertyValue.$Value = attributeValue;\r\n                    }\r\n                    else if (attributeValue.indexOf(\"%\") + 1)\r\n                        propertyValue.$Percent = $Jssor$.$ParseFloat(attributeValue) / 100;\r\n                    else\r\n                        propertyValue.$Value = $Jssor$.$ParseFloat(attributeValue);\r\n\r\n                    rawTransition[fetchProperty] = propertyValue;\r\n                }\r\n            });\r\n\r\n            return rawTransition;\r\n        }\r\n\r\n        function GetRandomTransition() {\r\n            return _CaptionTransitions[Math.floor(Math.random() * _CaptionTransitions.length)];\r\n        }\r\n\r\n        function EvaluateCaptionTransition(transitionName) {\r\n\r\n            var transition;\r\n\r\n            if (transitionName == \"*\") {\r\n                transition = GetRandomTransition();\r\n            }\r\n            else if (transitionName) {\r\n\r\n                //indexed transition allowed, just the same as named transition\r\n                var tempTransition = _CaptionTransitions[$Jssor$.$ParseInt(transitionName)] || _CaptionTransitions[transitionName];\r\n\r\n                if ($Jssor$.$IsArray(tempTransition)) {\r\n                    if (transitionName != lastTransitionName) {\r\n                        lastTransitionName = transitionName;\r\n                        namedTransitionOrders[transitionName] = 0;\r\n\r\n                        namedTransitions[transitionName] = tempTransition[Math.floor(Math.random() * tempTransition.length)];\r\n                    }\r\n                    else {\r\n                        namedTransitionOrders[transitionName]++;\r\n                    }\r\n\r\n                    tempTransition = namedTransitions[transitionName];\r\n\r\n                    if ($Jssor$.$IsArray(tempTransition)) {\r\n                        tempTransition = tempTransition.length && tempTransition[namedTransitionOrders[transitionName] % tempTransition.length];\r\n\r\n                        if ($Jssor$.$IsArray(tempTransition)) {\r\n                            //got transition from array level 3, random for all captions\r\n                            tempTransition = tempTransition[Math.floor(Math.random() * tempTransition.length)];\r\n                        }\r\n                        //else {\r\n                        //    //got transition from array level 2, in sequence for all adjacent captions with same name specified\r\n                        //    transition = tempTransition;\r\n                        //}\r\n                    }\r\n                    //else {\r\n                    //    //got transition from array level 1, random but same for all adjacent captions with same name specified\r\n                    //    transition = tempTransition;\r\n                    //}\r\n                }\r\n                //else {\r\n                //    //got transition directly from a simple transition object\r\n                //    transition = tempTransition;\r\n                //}\r\n\r\n                transition = tempTransition;\r\n\r\n                if ($Jssor$.$IsString(transition))\r\n                    transition = EvaluateCaptionTransition(transition);\r\n            }\r\n\r\n            return transition;\r\n        }\r\n\r\n        var captionElmts = $Jssor$.$Children(element);\r\n        $Jssor$.$Each(captionElmts, function (captionElmt, i) {\r\n\r\n            var transitionsWithTuning = [];\r\n            transitionsWithTuning.$Elmt = captionElmt;\r\n            var isCaption = $Jssor$.$AttributeEx(captionElmt, \"u\") == \"caption\";\r\n\r\n            $Jssor$.$Each(playIn ? [0, 3] : [2], function (j, k) {\r\n\r\n                if (isCaption) {\r\n                    var transition;\r\n                    var rawTransition;\r\n\r\n                    if (j != 2 || !$Jssor$.$AttributeEx(captionElmt, \"t3\")) {\r\n                        rawTransition = FetchRawTransition(captionElmt, j);\r\n\r\n                        if (j == 2 && !rawTransition.$Transition) {\r\n                            rawTransition.$Delay = rawTransition.$Delay || { $Value: 0 };\r\n                            rawTransition = $Jssor$.$Extend(FetchRawTransition(captionElmt, 0), rawTransition);\r\n                        }\r\n                    }\r\n\r\n                    if (rawTransition && rawTransition.$Transition) {\r\n\r\n                        transition = EvaluateCaptionTransition(rawTransition.$Transition.$Value);\r\n\r\n                        if (transition) {\r\n\r\n                            //var transitionWithTuning = $Jssor$.$Extend({ $Delay: 0, $ScaleHorizontal: 1, $ScaleVertical: 1 }, transition);\r\n                            var transitionWithTuning = $Jssor$.$Extend({ $Delay: 0 }, transition);\r\n\r\n                            $Jssor$.$Each(rawTransition, function (rawPropertyValue, propertyName) {\r\n                                var tuningPropertyValue = (_CaptionTuningTransfer[propertyName] || _CaptionTuningTransfer.$Default).apply(_CaptionTuningTransfer, [transitionWithTuning[propertyName], rawTransition[propertyName]]);\r\n                                if (!isNaN(tuningPropertyValue))\r\n                                    transitionWithTuning[propertyName] = tuningPropertyValue;\r\n                            });\r\n\r\n                            if (!k) {\r\n                                if (rawTransition.$BeginTime)\r\n                                    transitionWithTuning.$BeginTime = rawTransition.$BeginTime.$Value || 0;\r\n                                else if ((_PlayMode) & 2)\r\n                                    transitionWithTuning.$BeginTime = 0;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    transitionsWithTuning.push(transitionWithTuning);\r\n                }\r\n\r\n                if ((level % 2) && !k) {\r\n                    transitionsWithTuning.$Children = GetCaptionItems(captionElmt, level + 1);\r\n                }\r\n            });\r\n\r\n            itemsToPlay.push(transitionsWithTuning);\r\n        });\r\n\r\n        return itemsToPlay;\r\n    }\r\n\r\n    function CreateAnimator(item, transition, immediateOut) {\r\n\r\n        var animatorOptions = {\r\n            $Easing: transition.$Easing,\r\n            $Round: transition.$Round,\r\n            $During: transition.$During,\r\n            $Reverse: playIn && !immediateOut\r\n        };\r\n\r\n        $JssorDebug$.$Execute(function () {\r\n            animatorOptions.$CaptionAnimator = true;\r\n        });\r\n\r\n        var captionItem = item;\r\n        var captionParent = $Jssor$.$ParentNode(item);\r\n\r\n        var captionItemWidth = $Jssor$.$CssWidth(captionItem);\r\n        var captionItemHeight = $Jssor$.$CssHeight(captionItem);\r\n        var captionParentWidth = $Jssor$.$CssWidth(captionParent);\r\n        var captionParentHeight = $Jssor$.$CssHeight(captionParent);\r\n\r\n        var fromStyles = {};\r\n        var difStyles = {};\r\n        var scaleClip = transition.$ScaleClip || 1;\r\n\r\n        //Opacity\r\n        if (transition.$Opacity) {\r\n            difStyles.$Opacity = 1 - transition.$Opacity;\r\n        }\r\n\r\n        animatorOptions.$OriginalWidth = captionItemWidth;\r\n        animatorOptions.$OriginalHeight = captionItemHeight;\r\n\r\n        //Transform\r\n        if (transition.$Zoom || transition.$Rotate) {\r\n            difStyles.$Zoom = (transition.$Zoom || 2) - 2;\r\n\r\n            if ($Jssor$.$IsBrowserIe9Earlier() || $Jssor$.$IsBrowserOpera()) {\r\n                difStyles.$Zoom = Math.min(difStyles.$Zoom, 1);\r\n            }\r\n\r\n            fromStyles.$Zoom = 1;\r\n\r\n            var rotate = transition.$Rotate || 0;\r\n\r\n            difStyles.$Rotate = rotate * 360;\r\n            fromStyles.$Rotate = 0;\r\n        }\r\n            //Clip\r\n        else if (transition.$Clip) {\r\n            var fromStyleClip = { $Top: 0, $Right: captionItemWidth, $Bottom: captionItemHeight, $Left: 0 };\r\n            var toStyleClip = $Jssor$.$Extend({}, fromStyleClip);\r\n\r\n            var blockOffset = toStyleClip.$Offset = {};\r\n\r\n            var topBenchmark = transition.$Clip & 4;\r\n            var bottomBenchmark = transition.$Clip & 8;\r\n            var leftBenchmark = transition.$Clip & 1;\r\n            var rightBenchmark = transition.$Clip & 2;\r\n\r\n            if (topBenchmark && bottomBenchmark) {\r\n                blockOffset.$Top = captionItemHeight / 2 * scaleClip;\r\n                blockOffset.$Bottom = -blockOffset.$Top;\r\n            }\r\n            else if (topBenchmark)\r\n                blockOffset.$Bottom = -captionItemHeight * scaleClip;\r\n            else if (bottomBenchmark)\r\n                blockOffset.$Top = captionItemHeight * scaleClip;\r\n\r\n            if (leftBenchmark && rightBenchmark) {\r\n                blockOffset.$Left = captionItemWidth / 2 * scaleClip;\r\n                blockOffset.$Right = -blockOffset.$Left;\r\n            }\r\n            else if (leftBenchmark)\r\n                blockOffset.$Right = -captionItemWidth * scaleClip;\r\n            else if (rightBenchmark)\r\n                blockOffset.$Left = captionItemWidth * scaleClip;\r\n\r\n            animatorOptions.$Move = transition.$Move;\r\n            difStyles.$Clip = toStyleClip;\r\n            fromStyles.$Clip = fromStyleClip;\r\n        }\r\n\r\n        //Fly\r\n        {\r\n            var toLeft = 0;\r\n            var toTop = 0;\r\n\r\n            if (transition.x)\r\n                toLeft -= captionParentWidth * transition.x;\r\n\r\n            if (transition.y)\r\n                toTop -= captionParentHeight * transition.y;\r\n\r\n            if (toLeft || toTop || animatorOptions.$Move) {\r\n                difStyles.$Left = toLeft;\r\n                difStyles.$Top = toTop;\r\n            }\r\n        }\r\n\r\n        //duration\r\n        var duration = transition.$Duration;\r\n\r\n        fromStyles = $Jssor$.$Extend(fromStyles, $Jssor$.$GetStyles(captionItem, difStyles));\r\n\r\n        animatorOptions.$Setter = $Jssor$.$StyleSetterEx();\r\n\r\n        return new $JssorAnimator$(transition.$Delay, duration, animatorOptions, captionItem, fromStyles, difStyles);\r\n    }\r\n\r\n    function CreateAnimators(streamLineLength, captionItems) {\r\n\r\n        $Jssor$.$Each(captionItems, function (captionItem, i) {\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (captionItem.length) {\r\n                    var top = $Jssor$.$CssTop(captionItem.$Elmt);\r\n                    var left = $Jssor$.$CssLeft(captionItem.$Elmt);\r\n                    var width = $Jssor$.$CssWidth(captionItem.$Elmt);\r\n                    var height = $Jssor$.$CssHeight(captionItem.$Elmt);\r\n\r\n                    var error = null;\r\n\r\n                    if (isNaN(top))\r\n                        error = \"Style 'top' for caption not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(left))\r\n                        error = \"Style 'left' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(width))\r\n                        error = \"Style 'width' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n                    else if (isNaN(height))\r\n                        error = \"Style 'height' not specified. Please always specify caption like 'position: absolute; top: ...px; left: ...px; width: ...px; height: ...px;'.\";\r\n\r\n                    if (error)\r\n                        $JssorDebug$.$Error(\"Caption \" + (i + 1) + \" definition error, \\r\\n\" + error + \"\\r\\n\" + captionItem.$Elmt.outerHTML);\r\n                }\r\n            });\r\n\r\n            var animator;\r\n            var captionElmt = captionItem.$Elmt;\r\n            var transition = captionItem[0];\r\n            var transition3 = captionItem[1];\r\n\r\n            if (transition) {\r\n\r\n                animator = CreateAnimator(captionElmt, transition);\r\n                streamLineLength = animator.$Locate(transition.$BeginTime == undefined ? streamLineLength : transition.$BeginTime, 1);\r\n            }\r\n\r\n            streamLineLength = CreateAnimators(streamLineLength, captionItem.$Children);\r\n\r\n            if (transition3) {\r\n                var animator3 = CreateAnimator(captionElmt, transition3, 1);\r\n                animator3.$Locate(streamLineLength, 1);\r\n                _Self.$Combine(animator3);\r\n                _ImmediateOutCaptionHanger.$Combine(animator3);\r\n            }\r\n\r\n            if (animator)\r\n                _Self.$Combine(animator);\r\n        });\r\n\r\n        return streamLineLength;\r\n    }\r\n\r\n    _Self.$Revert = function () {\r\n        _Self.$GoToPosition(_Self.$GetPosition_OuterEnd() * (playIn || 0));\r\n        _ImmediateOutCaptionHanger.$GoToPosition(0);\r\n    };\r\n\r\n    //Constructor\r\n    {\r\n        _ImmediateOutCaptionHanger = new $JssorAnimator$(0, 0);\r\n\r\n        CreateAnimators(0, _PlayMode ? GetCaptionItems(container, 1) : []);\r\n    }\r\n};\r\n\r\nvar $JssorCaptionSlideo$ = function (container, captionSlideoOptions, playIn) {\r\n    $JssorDebug$.$Execute(function () {\r\n        if (!captionSlideoOptions.$CaptionTransitions) {\r\n            $JssorDebug$.$Error(\"'$CaptionSlideoOptions' option error, '$CaptionSlideoOptions.$CaptionTransitions' not specified.\");\r\n        }\r\n        else if (!$Jssor$.$IsArray(captionSlideoOptions.$CaptionTransitions)) {\r\n            $JssorDebug$.$Error(\"'$CaptionSlideoOptions' option error, '$CaptionSlideoOptions.$CaptionTransitions' is not an array.\");\r\n        }\r\n    });\r\n\r\n    var _This = this;\r\n\r\n    var _Easings;\r\n    var _TransitionConverter = {};\r\n    var _CaptionTransitions = captionSlideoOptions.$CaptionTransitions;\r\n\r\n    $JssorAnimator$.call(_This, 0, 0);\r\n\r\n    function ConvertTransition(transition, isEasing) {\r\n        $Jssor$.$Each(transition, function (property, name) {\r\n            var performName = _TransitionConverter[name];\r\n            if (performName) {\r\n                if (isEasing || name == \"e\") {\r\n                    if ($Jssor$.$IsNumeric(property)) {\r\n                        property = _Easings[property];\r\n                    }\r\n                    else if ($Jssor$.$IsPlainObject(property)) {\r\n                        ConvertTransition(property, true);\r\n                    }\r\n                }\r\n\r\n                transition[performName] = property;\r\n                delete transition[name];\r\n            }\r\n        });\r\n    }\r\n\r\n    function GetCaptionItems(element, level) {\r\n\r\n        var itemsToPlay = [];\r\n\r\n        var captionElmts = $Jssor$.$Children(element);\r\n        $Jssor$.$Each(captionElmts, function (captionElmt, i) {\r\n            var isCaption = $Jssor$.$AttributeEx(captionElmt, \"u\") == \"caption\";\r\n            if (isCaption) {\r\n                var transitionName = $Jssor$.$AttributeEx(captionElmt, \"t\");\r\n                var transition = _CaptionTransitions[$Jssor$.$ParseInt(transitionName)] || _CaptionTransitions[transitionName];\r\n\r\n                var transitionName2 = $Jssor$.$AttributeEx(captionElmt, \"t2\");\r\n                var transition2 = _CaptionTransitions[$Jssor$.$ParseInt(transitionName2)] || _CaptionTransitions[transitionName2];\r\n\r\n                var itemToPlay = { $Elmt: captionElmt, $Transition: transition, $Transition2: transition2 };\r\n                if (level < 3) {\r\n                    itemsToPlay.concat(GetCaptionItems(captionElmt, level + 1));\r\n                }\r\n                itemsToPlay.push(itemToPlay);\r\n            }\r\n        });\r\n\r\n        return itemsToPlay;\r\n    }\r\n\r\n    function CreateAnimator(captionElmt, transitions, lastStyles, forIn) {\r\n\r\n        $Jssor$.$Each(transitions, function (transition) {\r\n            ConvertTransition(transition);\r\n\r\n            var animatorOptions = {\r\n                $Easing: transition.$Easing,\r\n                $Round: transition.$Round,\r\n                $During: transition.$During,\r\n                $Setter: $Jssor$.$StyleSetterEx()\r\n            };\r\n\r\n            var fromStyles = $Jssor$.$Extend($Jssor$.$GetStyles(captionItem, transition), lastStyles);\r\n\r\n            var animator = new $JssorAnimator$(transition.b || 0, transition.d, animatorOptions, captionElmt, fromStyles, transition);\r\n\r\n            !forIn == !playIn && _This.$Combine(animator);\r\n\r\n            var castOptions;\r\n            lastStyles = $Jssor$.$Extend(lastStyles, $Jssor$.$Cast(fromStyles, transition, 1, animatorOptions.$Easing, animatorOptions.$During, animatorOptions.$Round, animatorOptions, castOptions));\r\n        });\r\n\r\n        return lastStyles;\r\n    }\r\n\r\n    function CreateAnimators(captionItems) {\r\n\r\n        $Jssor$.$Each(captionItems, function (captionItem, i) {\r\n\r\n            $JssorDebug$.$Execute(function () {\r\n                if (captionItem.length) {\r\n                    var top = $Jssor$.$CssTop(captionItem.$Elmt);\r\n                    var left = $Jssor$.$CssLeft(captionItem.$Elmt);\r\n                    var width = $Jssor$.$CssWidth(captionItem.$Elmt);\r\n                    var height = $Jssor$.$CssHeight(captionItem.$Elmt);\r\n\r\n                    var error = null;\r\n\r\n                    if (isNaN(top))\r\n                        error = \"style 'top' not specified\";\r\n                    else if (isNaN(left))\r\n                        error = \"style 'left' not specified\";\r\n                    else if (isNaN(width))\r\n                        error = \"style 'width' not specified\";\r\n                    else if (isNaN(height))\r\n                        error = \"style 'height' not specified\";\r\n\r\n                    if (error)\r\n                        throw new Error(\"Caption \" + (i + 1) + \" definition error, \" + error + \".\\r\\n\" + captionItem.$Elmt.outerHTML);\r\n                }\r\n            });\r\n\r\n            var captionElmt = captionItem.$Elmt;\r\n\r\n            var captionItemWidth = $Jssor$.$CssWidth(captionItem);\r\n            var captionItemHeight = $Jssor$.$CssHeight(captionItem);\r\n            var captionParentWidth = $Jssor$.$CssWidth(captionParent);\r\n            var captionParentHeight = $Jssor$.$CssHeight(captionParent);\r\n\r\n            var lastStyles = { $Zoom: 1, $Rotate: 0, $Clip: { $Top: 0, $Right: captionItemWidth, $Bottom: captionItemHeight, $Left: 0 } };\r\n\r\n            lastStyles = CreateAnimator(captionElmt, captionItem.$Transition, lastStyles, true);\r\n            CreateAnimator(captionElmt, captionItem.$Transition2, lastStyles, false);\r\n        });\r\n    }\r\n\r\n    _This.$Revert = function () {\r\n        _This.$GoToPosition(-1, true);\r\n    }\r\n\r\n    //Constructor\r\n    {\r\n        _Easings = [\r\n            $JssorEasing$.$EaseSwing,\r\n            $JssorEasing$.$EaseLinear,\r\n            $JssorEasing$.$EaseInQuad,\r\n            $JssorEasing$.$EaseOutQuad,\r\n            $JssorEasing$.$EaseInOutQuad,\r\n            $JssorEasing$.$EaseInCubic,\r\n            $JssorEasing$.$EaseOutCubic,\r\n            $JssorEasing$.$EaseInOutCubic,\r\n            $JssorEasing$.$EaseInQuart,\r\n            $JssorEasing$.$EaseOutQuart,\r\n            $JssorEasing$.$EaseInOutQuart,\r\n            $JssorEasing$.$EaseInQuint,\r\n            $JssorEasing$.$EaseOutQuint,\r\n            $JssorEasing$.$EaseInOutQuint,\r\n            $JssorEasing$.$EaseInSine,\r\n            $JssorEasing$.$EaseOutSine,\r\n            $JssorEasing$.$EaseInOutSine,\r\n            $JssorEasing$.$EaseInExpo,\r\n            $JssorEasing$.$EaseOutExpo,\r\n            $JssorEasing$.$EaseInOutExpo,\r\n            $JssorEasing$.$EaseInCirc,\r\n            $JssorEasing$.$EaseOutCirc,\r\n            $JssorEasing$.$EaseInOutCirc,\r\n            $JssorEasing$.$EaseInElastic,\r\n            $JssorEasing$.$EaseOutElastic,\r\n            $JssorEasing$.$EaseInOutElastic,\r\n            $JssorEasing$.$EaseInBack,\r\n            $JssorEasing$.$EaseOutBack,\r\n            $JssorEasing$.$EaseInOutBack,\r\n            $JssorEasing$.$EaseInBounce,\r\n            $JssorEasing$.$EaseOutBounce,\r\n            $JssorEasing$.$EaseInOutBounce//,\r\n            //$JssorEasing$.$EaseGoBack,\r\n            //$JssorEasing$.$EaseInWave,\r\n            //$JssorEasing$.$EaseOutWave,\r\n            //$JssorEasing$.$EaseOutJump,\r\n            //$JssorEasing$.$EaseInJump\r\n        ];\r\n\r\n        var translater = {\r\n            $Top: \"y\",          //top\r\n            $Left: \"x\",         //left\r\n            $Bottom: \"m\",       //bottom\r\n            $Right: \"t\",        //right\r\n            $Zoom: \"s\",         //zoom/scale\r\n            $Rotate: \"r\",       //rotate\r\n            $Opacity: \"o\",      //opacity\r\n            $Easing: \"e\",       //easing\r\n            $ZIndex: \"i\",       //zindex\r\n            $Round: \"rd\",       //round\r\n            $During: \"du\",      //during\r\n            $Duration: \"d\"//,   //duration\r\n            //$Begin: \"b\"\r\n        };\r\n\r\n        $Jssor$.$Each(translater, function (prop, newProp) {\r\n            _TransitionConverter[prop] = newProp;\r\n        });\r\n\r\n        CreateAnimators(GetCaptionItems(container, 1));\r\n    }\r\n};\r\n\r\n//Event Table\r\n\r\n//$EVT_CLICK = 21;              function(slideIndex[, event])\r\n//$EVT_DRAG_START = 22;         function(position[, virtualPosition, event])\r\n//$EVT_DRAG_END = 23;           function(position, startPosition[, virtualPosition, virtualStartPosition, event])\r\n//$EVT_SWIPE_START = 24;        function(position[, virtualPosition])\r\n//$EVT_SWIPE_END = 25;          function(position[, virtualPosition])\r\n\r\n//$EVT_LOAD_START = 26;         function(slideIndex)\r\n//$EVT_LOAD_END = 27;           function(slideIndex)\r\n\r\n//$EVT_POSITION_CHANGE = 202;   function(position, fromPosition[, virtualPosition, virtualFromPosition])\r\n//$EVT_PARK = 203;              function(slideIndex, fromIndex)\r\n\r\n//$EVT_PROGRESS_CHANGE = 208;   function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n//$EVT_STATE_CHANGE = 209;      function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n\r\n//$EVT_ROLLBACK_START = 210;    function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n//$EVT_ROLLBACK_END = 211;      function(slideIndex, progress[, progressBegin, idleBegin, idleEnd, progressEnd])\r\n\r\n//$EVT_SLIDESHOW_START = 206;   function(slideIndex[, progressBegin, slideshowBegin, slideshowEnd, progressEnd])\r\n//$EVT_SLIDESHOW_END = 207;     function(slideIndex[, progressBegin, slideshowBegin, slideshowEnd, progressEnd])\r\n\r\n//http://www.jssor.com/development/reference-api.html\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jssorslider/js/jssor.component.js\n// module id = 144\n// module chunks = 8"],"sourceRoot":""}